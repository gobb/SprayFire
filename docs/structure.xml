<?xml version="1.0" encoding="utf-8"?>
<project version="2.0.0a12" title="SprayFire">
  <file path="Bootstrap/Bootstrapper.php" hash="ebd9038f9d631359e570566039aa5382" package="Default">
    <docblock line="3">
      <description>Interface for bootstrapping processes during framework or app initialization.</description>
      <long-description/>
      <tag line="3" name="author" description="Charles Sprayberry"/>
      <tag line="3" name="license" description="Subject to the terms of the LICENSE file in the project root"/>
      <tag line="3" name="version" description="0.1"/>
      <tag line="3" name="since" description="0.1"/>
    </docblock>
    <interface namespace="SprayFire\Bootstrap" line="23" package="SprayFire\Bootstrap">
      <name>Bootstrapper</name>
      <full_name>\SprayFire\Bootstrap\Bootstrapper</full_name>
      <extends>\SprayFire\Object</extends>
      <docblock line="16">
        <description>Your application specific bootstraps should implement this interface to ensure
that any initialization scripts are ran at start up time.</description>
        <long-description/>
        <tag line="16" name="package" description="SprayFire"/>
        <tag line="16" name="subpackage" description="Bootstrap"/>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="SprayFire\Bootstrap" line="30" package="SprayFire\Bootstrap">
        <name>runBootstrap</name>
        <full_name>runBootstrap</full_name>
        <docblock line="25">
          <description>Should perform whatever actions are necessary for the given bootstrap.</description>
          <long-description/>
          <tag line="25" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
      </method>
    </interface>
  </file>
  <file path="Bootstrap/FireBootstrap/IniSetting.php" hash="efe637302b5e6a8d831d9cf16737bf83" package="Default">
    <docblock line="3">
      <description>Implementation of SprayFire.Bootstrapper.Bootstrapper that sets variable php.ini
configuration properties during framework initialization.</description>
      <long-description/>
      <tag line="3" name="author" description="Charles Sprayberry"/>
      <tag line="3" name="license" description="Subject to the terms of the LICENSE file in the project root"/>
      <tag line="3" name="version" description="0.1"/>
      <tag line="3" name="since" description="0.1"/>
    </docblock>
    <class final="false" abstract="false" namespace="SprayFire\Bootstrap\FireBootstrap" line="25" package="SprayFire\Bootstrap\FireBootstrap">
      <extends>\SprayFire\CoreObject</extends>
      <implements>\SprayFire\Bootstrap\Bootstrapper</implements>
      <name>IniSetting</name>
      <full_name>\SprayFire\Bootstrap\FireBootstrap\IniSetting</full_name>
      <docblock line="18">
        <description>This bootstrap should be ran by init.php during framework initialization; to alter
the ini values that are set please reference install_dir/config/SprayFire/environment.php.</description>
        <long-description/>
        <tag line="18" name="package" description="SprayFire"/>
        <tag line="18" name="subpackage" description="Bootstrap.FireBootstrap"/>
      </docblock>
      <property final="false" static="false" visibility="protected" line="33" namespace="SprayFire\Bootstrap\FireBootstrap" package="Default">
        <name>$config</name>
        <default/>
        <docblock line="27">
          <description>Associative array holding the settings and values that should be used in
the ini_set() call, [setting =&gt; value]</description>
          <long-description/>
          <tag line="27" name="property" description="" type="array" variable="">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="SprayFire\Bootstrap\FireBootstrap" line="40" package="SprayFire\Bootstrap\FireBootstrap">
        <name>__construct</name>
        <full_name>__construct</full_name>
        <docblock line="35">
          <description>The array should be associative with [ini_setting =&gt; value]</description>
          <long-description/>
          <tag line="35" name="param" description="" type="array" variable="$config">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
        <argument line="40">
          <name>$config</name>
          <default/>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="SprayFire\Bootstrap\FireBootstrap" line="49" package="SprayFire\Bootstrap\FireBootstrap">
        <name>runBootstrap</name>
        <full_name>runBootstrap</full_name>
        <docblock line="44">
          <description>Sets the ini configuration provided at object construction</description>
          <long-description/>
          <tag line="44" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
      </method>
    </class>
  </file>
  <file path="Bootstrap/FireBootstrap/Pluggable.php" hash="343d0689b4ebbd55095e65435188e026" package="Default">
    <docblock line="3">
      <description>Abstract \SprayFire\Bootstrap\Bootstrapper that provides easy access to service
containers and autoloading setup for apps, plugins and optional SprayFire modules.</description>
      <long-description/>
      <tag line="3" name="author" description="Charles Sprayberry"/>
      <tag line="3" name="license" description="Subject to the terms of the LICENSE file in the project root"/>
      <tag line="3" name="version" description="0.1"/>
      <tag line="3" name="since" description="0.1"/>
    </docblock>
    <class final="false" abstract="true" namespace="SprayFire\Bootstrap\FireBootstrap" line="27" package="SprayFire\Bootstrap\FireBootstrap">
      <extends>\SprayFire\CoreObject</extends>
      <implements>\SprayFire\Bootstrap\Bootstrapper</implements>
      <name>Pluggable</name>
      <full_name>\SprayFire\Bootstrap\FireBootstrap\Pluggable</full_name>
      <docblock line="19">
        <description>Provides a generic Bootstrapper that will allow applications, plugins and third
party libraries to easily integrate their own startup procedures into the
framework.</description>
        <long-description/>
        <tag line="19" name="package" description="SprayFire"/>
        <tag line="19" name="subpackage" description="Bootstrap.FireBootstrap"/>
      </docblock>
      <property final="false" static="false" visibility="protected" line="35" namespace="SprayFire\Bootstrap\FireBootstrap" package="Default">
        <name>$Container</name>
        <default/>
        <docblock line="29">
          <description>Container used by framework to hold your services; add services that your
application needs when calling runBootstrap().</description>
          <long-description/>
          <tag line="29" name="property" description="" type="\SprayFire\Service\Container" variable="">
            <type by_reference="false">\SprayFire\Service\Container</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="43" namespace="SprayFire\Bootstrap\FireBootstrap" package="Default">
        <name>$ClassLoader</name>
        <default/>
        <docblock line="37">
          <description>ClassLoader library that allows you to setup autoloading for whatever third
party libraries your app may be using.</description>
          <long-description/>
          <tag line="37" name="property" description="" type="\ClassLoader\Loader" variable="">
            <type by_reference="false">\ClassLoader\Loader</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="SprayFire\Bootstrap\FireBootstrap" line="51" package="SprayFire\Bootstrap\FireBootstrap">
        <name>__construct</name>
        <full_name>__construct</full_name>
        <docblock line="45">
          <description/>
          <long-description/>
          <tag line="45" name="param" description="" type="\SprayFire\Service\Container" variable="$Container">
            <type by_reference="false">\SprayFire\Service\Container</type>
          </tag>
          <tag line="45" name="param" description="" type="\ClassLoader\Loader" variable="$ClassLoader">
            <type by_reference="false">\ClassLoader\Loader</type>
          </tag>
        </docblock>
        <argument line="51">
          <name>$Container</name>
          <default/>
          <type>\SprayFire\Service\Container</type>
        </argument>
        <argument line="51">
          <name>$ClassLoader</name>
          <default/>
          <type>\ClassLoader\Loader</type>
        </argument>
      </method>
    </class>
    <parse_markers>
      <error line="45" code="50012">No short description for method __construct()</error>
    </parse_markers>
  </file>
  <file path="Bootstrap/NullObject.php" hash="4480d0983f443c95ac9327ae5959aac2" package="Default">
    <docblock line="3">
      <description>Implementation of SprayFire.Bootstrap.Bootstrapper that performs no operations</description>
      <long-description/>
      <tag line="3" name="author" description="Charles Sprayberry"/>
      <tag line="3" name="license" description="Subject to the terms of the LICENSE file in the project root"/>
      <tag line="3" name="version" description="0.1"/>
      <tag line="3" name="since" description="0.1"/>
    </docblock>
    <class final="false" abstract="false" namespace="SprayFire\Bootstrap" line="25" package="SprayFire\Bootstrap">
      <extends>\SprayFire\CoreObject</extends>
      <implements>\SprayFire\Bootstrap\Bootstrapper</implements>
      <name>NullObject</name>
      <full_name>\SprayFire\Bootstrap\NullObject</full_name>
      <docblock line="17">
        <description>Provided so that SprayFire.Factory.Factory objects creating objects implementing
SprayFire.Bootstrap.Bootstrapper can return an appropriate null object if so
configured.</description>
        <long-description/>
        <tag line="17" name="package" description="SprayFire"/>
        <tag line="17" name="subpackage" description="Bootstrap"/>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="SprayFire\Bootstrap" line="32" package="SprayFire\Bootstrap">
        <name>runBootstrap</name>
        <full_name>runBootstrap</full_name>
        <docblock line="27">
          <description>Performs no operation and returns null.</description>
          <long-description/>
          <tag line="27" name="return" description="" type="null">
            <type by_reference="false">null</type>
          </tag>
        </docblock>
      </method>
    </class>
  </file>
  <file path="Controller/Controller.php" hash="eb60d75f8105069d0ecfd71022bfa736" package="Default">
    <docblock line="3">
      <description>Interface that serves as a connection between the Model and Responder</description>
      <long-description/>
      <tag line="3" name="author" description="Charles Sprayberry"/>
      <tag line="3" name="license" description="Subject to the terms of the LICENSE file in the project root"/>
      <tag line="3" name="version" description="0.1"/>
      <tag line="3" name="since" description="0.1"/>
    </docblock>
    <interface namespace="SprayFire\Controller" line="27" package="SprayFire">
      <name>Controller</name>
      <full_name>\SprayFire\Controller\Controller</full_name>
      <extends>\SprayFire\Object</extends>
      <extends>\SprayFire\Service\Consumer</extends>
      <docblock line="19">
        <description>Designed to serve as a data conduit to the chose SprayFire.Responder.Responder
providing the chosen Responder with the appropriate information needed to send
the correct resource to the user.</description>
        <long-description/>
        <tag line="19" name="package" description="SprayFire"/>
        <tag line="19" name="package" description="Controller"/>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="SprayFire\Controller" line="35" package="SprayFire">
        <name>getResponderName</name>
        <full_name>getResponderName</full_name>
        <docblock line="29">
          <description>Provides the fully namespaced name of the class to use as the Responder
for this controller; can be a Java or PHP-style name.</description>
          <long-description/>
          <tag line="29" name="return" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="SprayFire\Controller" line="43" package="SprayFire">
        <name>getResponderData</name>
        <full_name>getResponderData</full_name>
        <docblock line="37">
          <description>Return an array of data provided by setResponderData</description>
          <long-description/>
          <tag line="37" name="param" description="" type="string" variable="$context">
            <type by_reference="false">string</type>
          </tag>
          <tag line="37" name="return" description="" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
        <argument line="43">
          <name>$context</name>
          <default>\SprayFire\Responder\OutputEscaper::HTML_CONTENT_CONTEXT</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="SprayFire\Controller" line="55" package="SprayFire">
        <name>setMultipleResponderData</name>
        <full_name>setMultipleResponderData</full_name>
        <docblock line="45">
          <description>Provide a set of data to the SprayFire.Responder.Responder that should be
used during response processing.</description>
          <long-description>&lt;p&gt;The $data should be in the format [$varName =&gt; $varValue]&lt;/p&gt;</long-description>
          <tag line="45" name="param" description="" type="array" variable="$data">
            <type by_reference="false">array</type>
          </tag>
          <tag line="45" name="param" description="" type="string" variable="$context">
            <type by_reference="false">string</type>
          </tag>
          <tag line="45" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
        <argument line="55">
          <name>$data</name>
          <default/>
          <type>array</type>
        </argument>
        <argument line="55">
          <name>$context</name>
          <default>\SprayFire\Responder\OutputEscaper::HTML_CONTENT_CONTEXT</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="SprayFire\Controller" line="66" package="SprayFire">
        <name>setResponderData</name>
        <full_name>setResponderData</full_name>
        <docblock line="57">
          <description>Provide data to the SprayFire.Responder.Responder that should be used
during response processing.</description>
          <long-description/>
          <tag line="57" name="param" description="" type="string" variable="$name">
            <type by_reference="false">string</type>
          </tag>
          <tag line="57" name="param" description="" type="mixed" variable="$value">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="57" name="param" description="" type="string" variable="$context">
            <type by_reference="false">string</type>
          </tag>
          <tag line="57" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
        <argument line="66">
          <name>$name</name>
          <default/>
          <type/>
        </argument>
        <argument line="66">
          <name>$value</name>
          <default/>
          <type/>
        </argument>
        <argument line="66">
          <name>$context</name>
          <default>\SprayFire\Responder\OutputEscaper::HTML_CONTENT_CONTEXT</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="SprayFire\Controller" line="75" package="SprayFire">
        <name>getTemplateManager</name>
        <full_name>getTemplateManager</full_name>
        <docblock line="68">
          <description>Return an implementation of \SprayFire\Responder\Template\Manager that tells
the SprayFire.Responder.Responder implementation what layout and content
templates to use for the given request.</description>
          <long-description/>
          <tag line="68" name="return" description="" type="\SprayFire\Responder\Template\Manager">
            <type by_reference="false">\SprayFire\Responder\Template\Manager</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="SprayFire\Controller" line="84" package="SprayFire">
        <name>beforeAction</name>
        <full_name>beforeAction</full_name>
        <docblock line="77">
          <description>This method is invoked during dispatching of a request before the requested
controller action is invoked.</description>
          <long-description/>
          <tag line="77" name="param" description="" type="\SprayFire\Mediator\Event" variable="$Event">
            <type by_reference="false">\SprayFire\Mediator\Event</type>
          </tag>
          <tag line="77" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
        <argument line="84">
          <name>$Event</name>
          <default/>
          <type>\SprayFire\Mediator\Event</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="SprayFire\Controller" line="93" package="SprayFire">
        <name>afterAction</name>
        <full_name>afterAction</full_name>
        <docblock line="86">
          <description>This method is invoked during dispatching of a request after the requested
controller action is invoked.</description>
          <long-description/>
          <tag line="86" name="param" description="" type="\SprayFire\Mediator\Event" variable="$Event">
            <type by_reference="false">\SprayFire\Mediator\Event</type>
          </tag>
          <tag line="86" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
        <argument line="93">
          <name>$Event</name>
          <default/>
          <type>\SprayFire\Mediator\Event</type>
        </argument>
      </method>
    </interface>
  </file>
  <file path="Controller/FireController/About.php" hash="24e371503986977db3154a9a342892da" package="Default">
    <docblock line="3">
      <description>Implementation of SprayFire.Controller.Controller provided in the default SprayFire
install</description>
      <long-description/>
      <tag line="3" name="author" description="Charles Sprayberry"/>
      <tag line="3" name="license" description="Subject to the terms of the LICENSE file in the project root"/>
      <tag line="3" name="version" description="0.1"/>
      <tag line="3" name="since" description="0.1"/>
    </docblock>
    <class final="false" abstract="false" namespace="SprayFire\Controller\FireController" line="36" package="SprayFire\Controller\FireController">
      <extends>\SprayFire\Controller\FireController\Base</extends>
      <implements>\SprayFire\Controller\Controller</implements>
      <name>About</name>
      <full_name>\SprayFire\Controller\FireController\About</full_name>
      <docblock line="20">
        <description>This implementation is intended to provide the user some more detailed info on
SprayFire as well as its creator and contributors.</description>
        <long-description>&lt;p&gt;This controller is not required to stick around, but please remove the appropriate
route, '/about/', if you decide to remove this from your SprayFire install.&lt;/p&gt;</long-description>
        <tag line="20" name="package" description="SprayFire"/>
        <tag line="20" name="subpackage" description="Controller.FireController"/>
        <tag line="20" name="property" description="" type="\SprayFire\FileSys\FireFileSys\Paths" variable="$Paths">
          <type by_reference="false">\SprayFire\FileSys\FireFileSys\Paths</type>
        </tag>
        <tag line="20" name="property" description="" type="\SprayFire\Http\FireHttp\Request" variable="$Request">
          <type by_reference="false">\SprayFire\Http\FireHttp\Request</type>
        </tag>
        <tag line="20" name="property" description="" type="\SprayFire\Http\Routing\FireRouting\RoutedRequest" variable="$RoutedRequest">
          <type by_reference="false">\SprayFire\Http\Routing\FireRouting\RoutedRequest</type>
        </tag>
        <tag line="20" name="property" description="" type="\SprayFire\Responder\Template\FireTemplate\Manager" variable="$TemplateManager">
          <type by_reference="false">\SprayFire\Responder\Template\FireTemplate\Manager</type>
        </tag>
        <tag line="20" name="property" description="" type="\SprayFire\Logging\FireLogging\LogOverseer" variable="$Logging">
          <type by_reference="false">\SprayFire\Logging\FireLogging\LogOverseer</type>
        </tag>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="SprayFire\Controller\FireController" line="44" package="SprayFire\Controller\FireController">
        <name>beforeAction</name>
        <full_name>beforeAction</full_name>
        <docblock line="38">
          <description>Ensures that the default layout template is set in the $TemplateManager</description>
          <long-description/>
          <tag line="38" name="param" description="" type="\SprayFire\Mediator\Event" variable="$Event">
            <type by_reference="false">\SprayFire\Mediator\Event</type>
          </tag>
          <tag line="38" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
        <argument line="44">
          <name>$Event</name>
          <default/>
          <type>\SprayFire\Mediator\Event</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="SprayFire\Controller\FireController" line="55" package="SprayFire\Controller\FireController">
        <name>sprayFire</name>
        <full_name>sprayFire</full_name>
        <docblock line="50">
          <description>Prepares data needed to let the user know more about the framework.</description>
          <long-description/>
          <tag line="50" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
      </method>
    </class>
  </file>
  <file path="Controller/FireController/Base.php" hash="a85485d47d01f6fe47b0251f39dc2a70" package="Default">
    <docblock line="3">
      <description>Abstract implementation of \SprayFire\Controller\Controller that allows for easy
sharing of generic functionality that would be reasonable all implementations
to use.</description>
      <long-description/>
      <tag line="3" name="author" description="Charles Sprayberry"/>
      <tag line="3" name="license" description="Subject to the terms of the LICENSE file in the project root"/>
      <tag line="3" name="version" description="0.1"/>
      <tag line="3" name="since" description="0.1"/>
    </docblock>
    <class final="false" abstract="true" namespace="SprayFire\Controller\FireController" line="43" package="SprayFire\Controller\FireController">
      <extends>\SprayFire\Service\FireService\Consumer</extends>
      <implements>\SprayFire\Controller\Controller</implements>
      <name>Base</name>
      <full_name>\SprayFire\Controller\FireController\Base</full_name>
      <docblock line="21">
        <description>Application controllers are expected to take advantage of the very basic functionality
provided by this object.</description>
        <long-description>&lt;p&gt;The contract for \SprayFire\Controller\Controller and \SprayFire\Service\Consumer
is satisfied by this object and can be extended in such a way that overwriting
properties or altering properties at runtime, either at construction, as an event
or during action invocation alters the behavior of the implementation.&lt;/p&gt;

&lt;p&gt;If you overwrite the methods in this class please ensure that you return the
appropriate types as defined in the documentation of \SprayFire\Controller\Controller
and SprayFire.Service.Consumer.&lt;/p&gt;</long-description>
        <tag line="21" name="package" description="SprayFire"/>
        <tag line="21" name="subpackage" description="Controller.FireController"/>
        <tag line="21" name="property" description="" type="\SprayFire\FileSys\FireFileSys\Paths" variable="$Paths">
          <type by_reference="false">\SprayFire\FileSys\FireFileSys\Paths</type>
        </tag>
        <tag line="21" name="property" description="" type="\SprayFire\Http\FireHttp\Request" variable="$Request">
          <type by_reference="false">\SprayFire\Http\FireHttp\Request</type>
        </tag>
        <tag line="21" name="property" description="" type="\SprayFire\Http\Routing\FireRouting\RoutedRequest" variable="$RoutedRequest">
          <type by_reference="false">\SprayFire\Http\Routing\FireRouting\RoutedRequest</type>
        </tag>
        <tag line="21" name="property" description="" type="\SprayFire\Responder\Template\FireTemplate\Manager" variable="$TemplateManager">
          <type by_reference="false">\SprayFire\Responder\Template\FireTemplate\Manager</type>
        </tag>
        <tag line="21" name="property" description="" type="\SprayFire\Logging\FireLogging\LogOverseer" variable="$Logging">
          <type by_reference="false">\SprayFire\Logging\FireLogging\LogOverseer</type>
        </tag>
      </docblock>
      <property final="false" static="false" visibility="protected" line="51" namespace="SprayFire\Controller\FireController" package="Default">
        <name>$responderName</name>
        <default>'SprayFire.Responder.FireResponder.Html'</default>
        <docblock line="45">
          <description>The PHP or Java style namespaced class to use as the \SprayFire\Responder\Responder
implementation for this controller.</description>
          <long-description/>
          <tag line="45" name="property" description="" type="string" variable="">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="58" namespace="SprayFire\Controller\FireController" package="Default">
        <name>$responderData</name>
        <default>array()</default>
        <docblock line="53">
          <description>Stores the data that will be made available to the SprayFire.Responder.Responder</description>
          <long-description/>
          <tag line="53" name="property" description="" type="array" variable="">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="69" namespace="SprayFire\Controller\FireController" package="Default">
        <name>$services</name>
        <default>array('Paths' =&gt; 'SprayFire.FileSys.FireFileSys.Paths', 'Request' =&gt; 'SprayFire.Http.FireHttp.Request', 'RoutedRequest' =&gt; 'SprayFire.Http.Routing.FireRouting.RoutedRequest', 'Logging' =&gt; 'SprayFire.Logging.FireLogging.LogOverseer', 'TemplateManager' =&gt; 'SprayFire.Responder.Template.FireTemplate.Manager')</default>
        <docblock line="60">
          <description>Services that are provided by default to all implementations extending
this class.</description>
          <long-description>&lt;p&gt;If you extend this class and overwrite this property the default services
will not be properly added and will not be made available to you.&lt;/p&gt;</long-description>
          <tag line="60" name="property" description="" type="array" variable="">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="84" namespace="SprayFire\Controller\FireController" package="Default">
        <name>$parameters</name>
        <default>array()</default>
        <docblock line="77">
          <description>Holds the parameters that were parsed from the Request and stored in the
RoutedRequest object; serves as a helper property to easily retrieve named
properties.</description>
          <long-description/>
          <tag line="77" name="property" description="" type="array" variable="">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="SprayFire\Controller\FireController" line="89" package="SprayFire\Controller\FireController">
        <name>__construct</name>
        <full_name>__construct</full_name>
        <docblock line="86">
          <description>Ensures that the appropriate storage for each escaping context is provided.</description>
          <long-description/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="SprayFire\Controller\FireController" line="102" package="SprayFire\Controller\FireController">
        <name>beforeAction</name>
        <full_name>beforeAction</full_name>
        <docblock line="96">
          <description>Sets the parameters from the RoutedRequest into the $parameters property.</description>
          <long-description/>
          <tag line="96" name="param" description="" type="\SprayFire\Mediator\Event" variable="$Event">
            <type by_reference="false">\SprayFire\Mediator\Event</type>
          </tag>
          <tag line="96" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
        <argument line="102">
          <name>$Event</name>
          <default/>
          <type>\SprayFire\Mediator\Event</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="SprayFire\Controller\FireController" line="119" package="SprayFire\Controller\FireController">
        <name>afterAction</name>
        <full_name>afterAction</full_name>
        <docblock line="106">
          <description>Does not perform any action, here to allow implementations not to have empty
afterAction methods in their implementations.</description>
          <long-description>&lt;p&gt;Although at this point this method does not perform any action it is still
advised that you call parent::afterAction() in any implementation that
overrides this for forward compatibility purposes.&lt;/p&gt;</long-description>
          <tag line="106" name="param" description="" type="\SprayFire\Mediator\Event" variable="$Event">
            <type by_reference="false">\SprayFire\Mediator\Event</type>
          </tag>
          <tag line="106" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
          <tag line="106" name="codeCoverageIgnore" description=""/>
        </docblock>
        <argument line="119">
          <name>$Event</name>
          <default/>
          <type>\SprayFire\Mediator\Event</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="SprayFire\Controller\FireController" line="128" package="SprayFire\Controller\FireController">
        <name>getResponderName</name>
        <full_name>getResponderName</full_name>
        <docblock line="123">
          <description>Java or PHP style namespaced class name.</description>
          <long-description/>
          <tag line="123" name="return" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="SprayFire\Controller\FireController" line="139" package="SprayFire\Controller\FireController">
        <name>setMultipleResponderData</name>
        <full_name>setMultipleResponderData</full_name>
        <docblock line="132">
          <description>Provide a set of data to the responder, should be in the format [$varName =&gt; $varValue]</description>
          <long-description/>
          <tag line="132" name="param" description="" type="array" variable="$data">
            <type by_reference="false">array</type>
          </tag>
          <tag line="132" name="param" description="" type="string" variable="$context">
            <type by_reference="false">string</type>
          </tag>
          <tag line="132" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
        <argument line="139">
          <name>$data</name>
          <default/>
          <type>array</type>
        </argument>
        <argument line="139">
          <name>$context</name>
          <default>\SprayFire\Responder\OutputEscaper::HTML_CONTENT_CONTEXT</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="SprayFire\Controller\FireController" line="153" package="SprayFire\Controller\FireController">
        <name>setResponderData</name>
        <full_name>setResponderData</full_name>
        <docblock line="145">
          <description>Provides a single data value to the set of data used by the responder</description>
          <long-description/>
          <tag line="145" name="param" description="" type="string" variable="$name">
            <type by_reference="false">string</type>
          </tag>
          <tag line="145" name="param" description="" type="mixed" variable="$value">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="145" name="param" description="" type="string" variable="$context">
            <type by_reference="false">string</type>
          </tag>
          <tag line="145" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
        <argument line="153">
          <name>$name</name>
          <default/>
          <type/>
        </argument>
        <argument line="153">
          <name>$value</name>
          <default/>
          <type/>
        </argument>
        <argument line="153">
          <name>$context</name>
          <default>\SprayFire\Responder\OutputEscaper::HTML_CONTENT_CONTEXT</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="SprayFire\Controller\FireController" line="163" package="SprayFire\Controller\FireController">
        <name>getResponderData</name>
        <full_name>getResponderData</full_name>
        <docblock line="157">
          <description>Provides a set of data that should be made available to the responder</description>
          <long-description/>
          <tag line="157" name="param" description="" type="string" variable="$context">
            <type by_reference="false">string</type>
          </tag>
          <tag line="157" name="return" description="" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
        <argument line="163">
          <name>$context</name>
          <default>\SprayFire\Responder\OutputEscaper::HTML_CONTENT_CONTEXT</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="SprayFire\Controller\FireController" line="172" package="SprayFire\Controller\FireController">
        <name>getTemplateManager</name>
        <full_name>getTemplateManager</full_name>
        <docblock line="167">
          <description>This is a service property that, by default, holds the</description>
          <long-description/>
          <tag line="167" name="return" description="" type="\SprayFire\Responder\Template\Manager">
            <type by_reference="false">\SprayFire\Responder\Template\Manager</type>
          </tag>
        </docblock>
      </method>
    </class>
  </file>
  <file path="Controller/FireController/Factory.php" hash="d5d4c5b2cc5d00a74bb8b025ecd10789" package="Default">
    <docblock line="3">
      <description>Implementation of SprayFire.Factory.Factory that ensures the proper creation
of SprayFire.Controller.Controller objects.</description>
      <long-description/>
      <tag line="3" name="author" description="Charles Sprayberry"/>
      <tag line="3" name="license" description="Subject to the terms of the LICENSE file in the project root"/>
      <tag line="3" name="version" description="0.1"/>
      <tag line="3" name="since" description="0.1"/>
    </docblock>
    <class final="false" abstract="false" namespace="SprayFire\Controller\FireController" line="34" package="SprayFire\Controller\FireController">
      <extends>\SprayFire\Service\FireService\ConsumerFactory</extends>
      <name>Factory</name>
      <full_name>\SprayFire\Controller\FireController\Factory</full_name>
      <docblock line="21">
        <description>Will ensure that a SprayFire.Controller.Controller is created with the appropriate
services added.</description>
        <long-description>&lt;p&gt;You may use SprayFire.Factory.FireFactory.Factory to set the error handling
mechanism used, whether to throw an exception or return a Null Object.  By
default the type of Null Object returned is SprayFire.Controller.NullObject.
You can change the constructor value for the Null Object type given in
install_dir/libs/SprayFire/config/SprayFire/environment.php.&lt;/p&gt;</long-description>
        <tag line="21" name="package" description="SprayFire"/>
        <tag line="21" name="subpackage" description="Controller.FireController"/>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="SprayFire\Controller\FireController" line="43" package="SprayFire\Controller\FireController">
        <name>__construct</name>
        <full_name>__construct</full_name>
        <docblock line="36">
          <description/>
          <long-description/>
          <tag line="36" name="param" description="" type="\SprayFire\Utils\ReflectionCache" variable="$Cache">
            <type by_reference="false">\SprayFire\Utils\ReflectionCache</type>
          </tag>
          <tag line="36" name="param" description="" type="\SprayFire\Service\Container" variable="$Container">
            <type by_reference="false">\SprayFire\Service\Container</type>
          </tag>
          <tag line="36" name="param" description="" type="\SprayFire\Logging\LogOverseer" variable="$LogOverseer">
            <type by_reference="false">\SprayFire\Logging\LogOverseer</type>
          </tag>
          <tag line="36" name="param" description="" type="string" variable="$type">
            <type by_reference="false">string</type>
          </tag>
          <tag line="36" name="param" description="" type="string" variable="$nullType">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="44">
          <name>$Cache</name>
          <default/>
          <type>\SprayFire\Utils\ReflectionCache</type>
        </argument>
        <argument line="45">
          <name>$Container</name>
          <default/>
          <type>\SprayFire\Service\Container</type>
        </argument>
        <argument line="46">
          <name>$LogOverseer</name>
          <default/>
          <type>\SprayFire\Logging\LogOverseer</type>
        </argument>
        <argument line="47">
          <name>$type</name>
          <default>'SprayFire.Controller.Controller'</default>
          <type/>
        </argument>
        <argument line="48">
          <name>$nullType</name>
          <default>'SprayFire.Controller.NullObject'</default>
          <type/>
        </argument>
      </method>
    </class>
    <parse_markers>
      <error line="36" code="50012">No short description for method __construct()</error>
    </parse_markers>
  </file>
  <file path="Controller/FireController/Pages.php" hash="02cace42556128a3674692b7ebaec91b" package="Default">
    <docblock line="3">
      <description>Implementation of \SprayFire\Controller\Controller that is used to show off the
installation and debug pages provided in the default SprayFire install.</description>
      <long-description/>
      <tag line="3" name="author" description="Charles Sprayberry"/>
      <tag line="3" name="license" description="Subject to the terms of the LICENSE file in the project root"/>
      <tag line="3" name="version" description="0.1"/>
      <tag line="3" name="since" description="0.1"/>
    </docblock>
    <class final="false" abstract="false" namespace="SprayFire\Controller\FireController" line="37" package="SprayFire\Controller\FireController">
      <extends>\SprayFire\Controller\FireController\Base</extends>
      <name>Pages</name>
      <full_name>\SprayFire\Controller\FireController\Pages</full_name>
      <docblock line="18">
        <description>This controller is responsible for the default SprayFire install pages, other
than the about page.</description>
        <long-description>&lt;p&gt;This controller is not intended to be used by your application.  Please extend
your controllers on some application specific controller.  The default SprayFire
install should include an implementation in:&lt;/p&gt;

&lt;p&gt;\&lt;AppName&gt;\Controller\Base&lt;/p&gt;</long-description>
        <tag line="18" name="package" description="SprayFire"/>
        <tag line="18" name="subpackage" description="Controller.FireController"/>
        <tag line="18" name="property" description="" type="\SprayFire\FileSys\FireFileSys\Paths" variable="$Paths">
          <type by_reference="false">\SprayFire\FileSys\FireFileSys\Paths</type>
        </tag>
        <tag line="18" name="property" description="" type="\SprayFire\Http\FireHttp\Request" variable="$Request">
          <type by_reference="false">\SprayFire\Http\FireHttp\Request</type>
        </tag>
        <tag line="18" name="property" description="" type="\SprayFire\Http\Routing\FireRouting\RoutedRequest" variable="$RoutedRequest">
          <type by_reference="false">\SprayFire\Http\Routing\FireRouting\RoutedRequest</type>
        </tag>
        <tag line="18" name="property" description="" type="\SprayFire\Responder\Template\FireTemplate\Manager" variable="$TemplateManager">
          <type by_reference="false">\SprayFire\Responder\Template\FireTemplate\Manager</type>
        </tag>
        <tag line="18" name="property" description="" type="\SprayFire\Logging\FireLogging\LogOverseer" variable="$Logging">
          <type by_reference="false">\SprayFire\Logging\FireLogging\LogOverseer</type>
        </tag>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="SprayFire\Controller\FireController" line="44" package="SprayFire\Controller\FireController">
        <name>beforeAction</name>
        <full_name>beforeAction</full_name>
        <docblock line="39">
          <description>Ensures that the default layout template is set in the $TemplateManager</description>
          <long-description/>
          <tag line="39" name="param" description="" type="\SprayFire\Mediator\Event" variable="$Event">
            <type by_reference="false">\SprayFire\Mediator\Event</type>
          </tag>
        </docblock>
        <argument line="44">
          <name>$Event</name>
          <default/>
          <type>\SprayFire\Mediator\Event</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="SprayFire\Controller\FireController" line="56" package="SprayFire\Controller\FireController">
        <name>index</name>
        <full_name>index</full_name>
        <docblock line="51">
          <description>Provides data used by the default SprayFire install home page; primarily
responsible for setting up the appropriate sidebar and providing sidebar
content.</description>
          <long-description/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="SprayFire\Controller\FireController" line="78" package="SprayFire\Controller\FireController">
        <name>debug</name>
        <full_name>debug</full_name>
        <docblock line="74">
          <description>Provides some basic data about the request, nothing too detailed and just
dumps that information out.</description>
          <long-description/>
        </docblock>
      </method>
    </class>
  </file>
  <file path="Controller/NullObject.php" hash="72697d620baf3d0685d59b2f7be07e25" package="Default">
    <docblock line="3">
      <description>An implementation of SprayFire.Controller.Controller that should perform no
operations.</description>
      <long-description/>
      <tag line="3" name="author" description="Charles Sprayberry"/>
      <tag line="3" name="license" description="Subject to the terms of the LICENSE file in the project root"/>
      <tag line="3" name="version" description="0.1"/>
      <tag line="3" name="since" description="0.1"/>
    </docblock>
    <class final="false" abstract="false" namespace="SprayFire\Controller" line="36" package="SprayFire\Controller">
      <extends>\SprayFire\CoreObject</extends>
      <implements>\SprayFire\Controller\Controller</implements>
      <name>NullObject</name>
      <full_name>\SprayFire\Controller\NullObject</full_name>
      <docblock line="21">
        <description>By default this object is returned from the SprayFire.Controller.FireController.Factory
implementation and can be used as a 404 object, controlling what is displayed
when the appropriate resource could not be found.</description>
        <long-description>&lt;p&gt;This object does not allow the supporting of services and does not extend
SprayFire.Controller.FireController.Base by design.  This is intentionally
supposed to be as minimal as possible and to perform no operations for the
majority of calls.&lt;/p&gt;</long-description>
        <tag line="21" name="package" description="SprayFire"/>
        <tag line="21" name="subpackage" description="Controller"/>
        <tag line="21" name="codeCoverageIgnore" description=""/>
      </docblock>
      <property final="false" static="false" visibility="protected" line="44" namespace="SprayFire\Controller" package="Default">
        <name>$TemplateManager</name>
        <default/>
        <docblock line="38">
          <description>Returned from self::getTemplateManager to allow the controller to determine
what layout and content templates are provided.</description>
          <long-description/>
          <tag line="38" name="property" description="" type="\SprayFire\Responder\Template\Manager" variable="">
            <type by_reference="false">\SprayFire\Responder\Template\Manager</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="SprayFire\Controller" line="50" package="SprayFire\Controller">
        <name>__construct</name>
        <full_name>__construct</full_name>
        <docblock line="46">
          <description>Ensures that an appropriate \SprayFire\Responder\Template\Manager is setup
to be returned from getTemplateManager()</description>
          <long-description/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="SprayFire\Controller" line="58" package="SprayFire\Controller">
        <name>setUpTemplateManager</name>
        <full_name>setUpTemplateManager</full_name>
        <docblock line="54">
          <description>Create a \SprayFire\Responder\FireResponder\FireTemplate\Manager instance
and set the appropriate layout template.</description>
          <long-description/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="SprayFire\Controller" line="76" package="SprayFire\Controller">
        <name>__call</name>
        <full_name>__call</full_name>
        <docblock line="68">
          <description>Here to ensure that this object can invoke any action called upon it so that
if this is returned from the controller factory we don't have to change the
action used.</description>
          <long-description/>
          <tag line="68" name="param" description="" type="string" variable="$name">
            <type by_reference="false">string</type>
          </tag>
          <tag line="68" name="param" description="" type="array" variable="$arguments">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
        <argument line="76">
          <name>$name</name>
          <default/>
          <type/>
        </argument>
        <argument line="76">
          <name>$arguments</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="SprayFire\Controller" line="86" package="SprayFire\Controller">
        <name>beforeAction</name>
        <full_name>beforeAction</full_name>
        <docblock line="80">
          <description>No operation performed</description>
          <long-description/>
          <tag line="80" name="param" description="" type="\SprayFire\Mediator\Event" variable="$Event">
            <type by_reference="false">\SprayFire\Mediator\Event</type>
          </tag>
          <tag line="80" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
        <argument line="86">
          <name>$Event</name>
          <default/>
          <type>\SprayFire\Mediator\Event</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="SprayFire\Controller" line="96" package="SprayFire\Controller">
        <name>afterAction</name>
        <full_name>afterAction</full_name>
        <docblock line="90">
          <description>No operation performed</description>
          <long-description/>
          <tag line="90" name="param" description="" type="\SprayFire\Mediator\Event" variable="$Event">
            <type by_reference="false">\SprayFire\Mediator\Event</type>
          </tag>
          <tag line="90" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
        <argument line="96">
          <name>$Event</name>
          <default/>
          <type>\SprayFire\Mediator\Event</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="SprayFire\Controller" line="107" package="SprayFire\Controller">
        <name>setMultipleResponderData</name>
        <full_name>setMultipleResponderData</full_name>
        <docblock line="100">
          <description>No operation performed</description>
          <long-description/>
          <tag line="100" name="param" description="" type="array" variable="$data">
            <type by_reference="false">array</type>
          </tag>
          <tag line="100" name="param" description="" type="string" variable="$context">
            <type by_reference="false">string</type>
          </tag>
          <tag line="100" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
        <argument line="107">
          <name>$data</name>
          <default/>
          <type>array</type>
        </argument>
        <argument line="107">
          <name>$context</name>
          <default>\SprayFire\Responder\OutputEscaper::HTML_CONTENT_CONTEXT</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="SprayFire\Controller" line="118" package="SprayFire\Controller">
        <name>setResponderData</name>
        <full_name>setResponderData</full_name>
        <docblock line="111">
          <description>No operation performed</description>
          <long-description/>
          <tag line="111" name="param" description="" type="string" variable="$name">
            <type by_reference="false">string</type>
          </tag>
          <tag line="111" name="param" description="" type="mixed" variable="$value">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="111" name="param" description="" type="string" variable="$context">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="118">
          <name>$name</name>
          <default/>
          <type/>
        </argument>
        <argument line="118">
          <name>$value</name>
          <default/>
          <type/>
        </argument>
        <argument line="118">
          <name>$context</name>
          <default>\SprayFire\Responder\OutputEscaper::HTML_CONTENT_CONTEXT</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="SprayFire\Controller" line="128" package="SprayFire\Controller">
        <name>getResponderData</name>
        <full_name>getResponderData</full_name>
        <docblock line="122">
          <description>No operation performed; will always return an empty array</description>
          <long-description/>
          <tag line="122" name="param" description="" type="string" variable="$context">
            <type by_reference="false">string</type>
          </tag>
          <tag line="122" name="return" description="" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
        <argument line="128">
          <name>$context</name>
          <default>\SprayFire\Responder\OutputEscaper::HTML_CONTENT_CONTEXT</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="SprayFire\Controller" line="137" package="SprayFire\Controller">
        <name>getResponderName</name>
        <full_name>getResponderName</full_name>
        <docblock line="132">
          <description>Returns the default HTML responder provided by the framework</description>
          <long-description/>
          <tag line="132" name="return" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="SprayFire\Controller" line="146" package="SprayFire\Controller">
        <name>getRequestedServices</name>
        <full_name>getRequestedServices</full_name>
        <docblock line="141">
          <description>No operation; returns an empty array</description>
          <long-description/>
          <tag line="141" name="return" description="" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="SprayFire\Controller" line="156" package="SprayFire\Controller">
        <name>giveService</name>
        <full_name>giveService</full_name>
        <docblock line="150">
          <description>No operation; no service is provided</description>
          <long-description/>
          <tag line="150" name="param" description="" type="string" variable="$key">
            <type by_reference="false">string</type>
          </tag>
          <tag line="150" name="param" description="" type="object" variable="$Service">
            <type by_reference="false">object</type>
          </tag>
        </docblock>
        <argument line="156">
          <name>$key</name>
          <default/>
          <type/>
        </argument>
        <argument line="156">
          <name>$Service</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="SprayFire\Controller" line="163" package="SprayFire\Controller">
        <name>getTemplateManager</name>
        <full_name>getTemplateManager</full_name>
        <docblock line="160">
          <description/>
          <long-description/>
          <tag line="160" name="return" description="" type="\SprayFire\Responder\Template\Manager">
            <type by_reference="false">\SprayFire\Responder\Template\Manager</type>
          </tag>
        </docblock>
      </method>
    </class>
    <parse_markers>
      <error line="160" code="50012">No short description for method getTemplateManager()</error>
    </parse_markers>
  </file>
  <file path="CoreObject.php" hash="1bf42bb08b9adf91d9084e9a109fbfea" package="Default">
    <docblock line="3">
      <description>Abstract implementation of SprayFire.Object designed to provide basic functionality
across a variety of objects, both in the framework and your applications.</description>
      <long-description/>
      <tag line="3" name="author" description="Charles Sprayberry"/>
      <tag line="3" name="license" description="Subject to the terms of the LICENSE file in the project root"/>
      <tag line="3" name="version" description="0.1"/>
      <tag line="3" name="since" description="0.1"/>
    </docblock>
    <class final="false" abstract="true" namespace="SprayFire" line="28" package="SprayFire">
      <extends/>
      <implements>\SprayFire\Object</implements>
      <name>CoreObject</name>
      <full_name>\SprayFire\CoreObject</full_name>
      <docblock line="15">
        <description>It is recommended that classes needing to implement \SprayFire\Object extend
this class.</description>
        <long-description>&lt;p&gt;This class will never implement any functionality not specified in the SprayFire.Object
interface.  It is explicitly designed in such a way that it should be reasonable
for all objects to trace their inheritance back through this object if interfaces
they implement require \SprayFire\Object.&lt;/p&gt;</long-description>
        <tag line="15" name="package" description="SprayFire"/>
        <tag line="15" name="codeCoverageIgnore" description=""/>
      </docblock>
      <method final="true" abstract="false" static="false" visibility="public" namespace="SprayFire" line="37" package="SprayFire">
        <name>hashCode</name>
        <full_name>hashCode</full_name>
        <docblock line="30">
          <description>Returns a unique identifier for the object that will be the same for objects
referencing the same spot in memory.</description>
          <long-description/>
          <tag line="30" name="return" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
          <tag line="30" name="see" description="\SprayFire\http://us3.php.net/manual/en/function.spl-object-hash.php" refers="\SprayFire\http://us3.php.net/manual/en/function.spl-object-hash.php"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="SprayFire" line="51" package="SprayFire">
        <name>equals</name>
        <full_name>equals</full_name>
        <docblock line="41">
          <description>Default implementation, compares the \SprayFire\CoreObject::hashCode()
return value to the passed $CompareObject.</description>
          <long-description>&lt;p&gt;If your objects need to implement a Comparator be sure to override this
implementation.&lt;/p&gt;</long-description>
          <tag line="41" name="param" description="" type="\SprayFire\Object" variable="$CompareObject">
            <type by_reference="false">\SprayFire\Object</type>
          </tag>
          <tag line="41" name="return" description="" type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
        </docblock>
        <argument line="51">
          <name>$CompareObject</name>
          <default/>
          <type>\SprayFire\Object</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="SprayFire" line="64" package="SprayFire">
        <name>__toString</name>
        <full_name>__toString</full_name>
        <docblock line="55">
          <description>Returns the fully namespaced class name.</description>
          <long-description>&lt;p&gt;We are using get_class() over the &lt;strong&gt;CLASS&lt;/strong&gt; magic constant as the constant
will return the name of the class this method is implemented in and not
the name of the class we are invoking the object on.&lt;/p&gt;</long-description>
          <tag line="55" name="return" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </method>
    </class>
  </file>
  <file path="Dispatcher/AppInitializer.php" hash="f6a026845757ff07e824cc8f644fc323" package="Default">
    <docblock line="3">
      <description>Interface designed to get an application initialized based on the results
of routing passed via SprayFire.Http.Routing.RoutedRequest</description>
      <long-description/>
      <tag line="3" name="author" description="Charles Sprayberry"/>
      <tag line="3" name="license" description="Subject to the terms of the LICENSE file in the project root"/>
      <tag line="3" name="version" description="0.1"/>
      <tag line="3" name="since" description="0.1"/>
    </docblock>
    <interface namespace="SprayFire\Dispatcher" line="29" package="SprayFire\Dispatcher">
      <name>AppInitializer</name>
      <full_name>\SprayFire\Dispatcher\AppInitializer</full_name>
      <docblock line="17">
        <description>Implementations of this interface should take care of whatever is needed to
get an application booted up so that it may take whatever actions are necessary
to process a request.</description>
        <long-description>&lt;p&gt;At the bare minimum this should include setting up autoloading for the application
and, if applicable, instantiate and run any SprayFire.Bootstrap.Bootstrappers
that may be assigned to the application.&lt;/p&gt;</long-description>
        <tag line="17" name="package" description="SprayFire"/>
        <tag line="17" name="subpackage" description="Dispatcher"/>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="SprayFire\Dispatcher" line="38" package="SprayFire\Dispatcher">
        <name>initializeApp</name>
        <full_name>initializeApp</full_name>
        <docblock line="31">
          <description>Based on information from the $RoutedRequest initialize any bootstrapping
process needed.</description>
          <long-description/>
          <tag line="31" name="param" description="" type="\SprayFire\Http\Routing\RoutedRequest" variable="$RoutedRequest">
            <type by_reference="false">\SprayFire\Http\Routing\RoutedRequest</type>
          </tag>
          <tag line="31" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
        <argument line="38">
          <name>$RoutedRequest</name>
          <default/>
          <type>\SprayFire\Http\Routing\RoutedRequest</type>
        </argument>
      </method>
    </interface>
  </file>
  <file path="Dispatcher/Dispatcher.php" hash="0ba7e39c122cd7980ba6e6ed48a59521" package="Default">
    <docblock line="3">
      <description>Interface for invoking the appropriate steps to return a response to a given
SprayFire.Http.Request.</description>
      <long-description/>
      <tag line="3" name="author" description="Charles Sprayberry"/>
      <tag line="3" name="license" description="Subject to the terms of the LICENSE file in the project root"/>
      <tag line="3" name="version" description="0.1"/>
      <tag line="3" name="since" description="0.1"/>
    </docblock>
    <interface namespace="SprayFire\Dispatcher" line="31" package="SprayFire\Dispatcher">
      <name>Dispatcher</name>
      <full_name>\SprayFire\Dispatcher\Dispatcher</full_name>
      <extends>\SprayFire\Object</extends>
      <docblock line="18">
        <description>Implementations of this interface should be able to handle routing the given
SprayFire.Http.Request, creation and invocation of SprayFire.Controller.Controller,
creation of SprayFire.Responder.Responder and the sending of the response to
the user.</description>
        <long-description>&lt;p&gt;It is also encouraged that your implementations support the SprayFire event
hooks we have built into the framework.  Please see the SprayFire.Mediator
module and also take a look at the wiki for more information on SprayFire events.&lt;/p&gt;</long-description>
        <tag line="18" name="package" description="SprayFire"/>
        <tag line="18" name="subpackage" description="Dispatcher"/>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="SprayFire\Dispatcher" line="40" package="SprayFire\Dispatcher">
        <name>dispatchResponse</name>
        <full_name>dispatchResponse</full_name>
        <docblock line="33">
          <description>At some point during the execution of this method the response appropriate
for the passed $Request should be sent to the user.</description>
          <long-description/>
          <tag line="33" name="param" description="" type="\SprayFire\Http\Routing\RoutedRequest" variable="$RoutedRequest">
            <type by_reference="false">\SprayFire\Http\Routing\RoutedRequest</type>
          </tag>
          <tag line="33" name="return" description="" type="mixed">
            <type by_reference="false">mixed</type>
          </tag>
        </docblock>
        <argument line="40">
          <name>$RoutedRequest</name>
          <default/>
          <type>\SprayFire\Http\Routing\RoutedRequest</type>
        </argument>
      </method>
    </interface>
  </file>
  <file path="Dispatcher/Events.php" hash="f2942edc5acd0253ed2582ea9dc6ebc4" package="Default">
    <docblock line="3">
      <description>An "enum" abstract class that holds constants representing the different events
that should be fired off by the Dispatching process.</description>
      <long-description/>
      <tag line="3" name="author" description="Charles Sprayberry"/>
      <tag line="3" name="license" description="Subject to the terms of the LICENSE file in the project root"/>
      <tag line="3" name="version" description="0.1"/>
      <tag line="3" name="since" description="0.1"/>
    </docblock>
    <class final="false" abstract="true" namespace="SprayFire\Dispatcher" line="22" package="SprayFire\Dispatcher">
      <extends/>
      <name>Events</name>
      <full_name>\SprayFire\Dispatcher\Events</full_name>
      <docblock line="15">
        <description>Each constant represents a target type and event name that should be triggered
at some point during the dispatching process.</description>
        <long-description/>
        <tag line="15" name="package" description="SprayFire"/>
        <tag line="15" name="subpackage" description="Dispatcher"/>
      </docblock>
      <constant namespace="SprayFire\Dispatcher" line="28" package="SprayFire\Dispatcher">
        <name>BEFORE_CONTROLLER_INVOKED</name>
        <full_name>BEFORE_CONTROLLER_INVOKED</full_name>
        <value>'controller.before_invoked'</value>
        <docblock line="24">
          <description>Should be invoked before the routed controller is invoked and should set
the target as a SprayFire.Controller.Controller.</description>
          <long-description/>
        </docblock>
      </constant>
      <constant namespace="SprayFire\Dispatcher" line="34" package="SprayFire\Dispatcher">
        <name>AFTER_CONTROLLER_INVOKED</name>
        <full_name>AFTER_CONTROLLER_INVOKED</full_name>
        <value>'controller.after_invoked'</value>
        <docblock line="30">
          <description>Should be invoked after the routed controller is invoked and should set
the target as a SprayFire.Controller.Controller.</description>
          <long-description/>
        </docblock>
      </constant>
      <constant namespace="SprayFire\Dispatcher" line="40" package="SprayFire\Dispatcher">
        <name>BEFORE_RESPONSE_SENT</name>
        <full_name>BEFORE_RESPONSE_SENT</full_name>
        <value>'responder.before_responder_sent'</value>
        <docblock line="36">
          <description>Should be invoked before a responder has generated and sent the response
with the SprayFire.Responder.Responder being used set as the target.</description>
          <long-description/>
        </docblock>
      </constant>
      <constant namespace="SprayFire\Dispatcher" line="46" package="SprayFire\Dispatcher">
        <name>AFTER_RESPONSE_SENT</name>
        <full_name>AFTER_RESPONSE_SENT</full_name>
        <value>'responder.after_responder_sent'</value>
        <docblock line="42">
          <description>Should be invoked after a responder has generated and sent the response
with the SprayFire.Responder.Responder that was used set as the target.</description>
          <long-description/>
        </docblock>
      </constant>
    </class>
  </file>
  <file path="Dispatcher/Exception/ActionNotFound.php" hash="beb1e0645324405ebbf7630d5de0ac83" package="Default">
    <docblock line="3">
      <description>Exception thrown if the controller for a route does not have the appropriate
action requested.</description>
      <long-description/>
      <tag line="3" name="author" description="Charles Sprayberry"/>
      <tag line="3" name="license" description="Subject to the terms of the LICENSE file in the project root"/>
      <tag line="3" name="version" description="0.1"/>
      <tag line="3" name="since" description="0.1"/>
    </docblock>
    <class final="false" abstract="false" namespace="SprayFire\Dispatcher\Exception" line="23" package="SprayFire\Dispatcher\Exception">
      <extends>\RuntimeException</extends>
      <name>ActionNotFound</name>
      <full_name>\SprayFire\Dispatcher\Exception\ActionNotFound</full_name>
      <docblock line="16">
        <description>Exception thrown if the controller for a route does not have the appropriate
action requested.</description>
        <long-description/>
        <tag line="16" name="package" description="SprayFire"/>
        <tag line="16" name="subpackage" description="Dispatcher.Exception"/>
      </docblock>
    </class>
  </file>
  <file path="Dispatcher/Exception/BootstrapNotFound.php" hash="c212ba9c956e4c0aacc4dfda09c625a3" package="Default">
    <docblock line="3">
      <description>Thrown if an application's bootstrap could not be appropriately found.</description>
      <long-description/>
      <tag line="3" name="author" description="Charles Sprayberry"/>
      <tag line="3" name="license" description="Subject to the terms of the LICENSE file in the project root"/>
      <tag line="3" name="version" description="0.1"/>
      <tag line="3" name="since" description="0.1"/>
    </docblock>
    <class final="false" abstract="false" namespace="SprayFire\Dispatcher\Exception" line="21" package="SprayFire\Dispatcher\Exception">
      <extends>\RuntimeException</extends>
      <name>BootstrapNotFound</name>
      <full_name>\SprayFire\Dispatcher\Exception\BootstrapNotFound</full_name>
      <docblock line="15">
        <description>Thrown if an application's bootstrap could not be appropriately found.</description>
        <long-description/>
        <tag line="15" name="package" description="SprayFire"/>
        <tag line="15" name="subpackage" description="Dispatcher.Exception"/>
      </docblock>
    </class>
  </file>
  <file path="Dispatcher/Exception/NotBootstrapperInstance.php" hash="7c0f05d961ba194918361a9e9279b9cc" package="Default">
    <docblock line="3">
      <description>Exception thrown if the application's bootstrap does not appropriately implement
\SprayFire\Bootstrap\Bootstrapper</description>
      <long-description/>
      <tag line="3" name="author" description="Charles Sprayberry"/>
      <tag line="3" name="license" description="Subject to the terms of the LICENSE file in the project root"/>
      <tag line="3" name="version" description="0.1"/>
      <tag line="3" name="since" description="0.1"/>
    </docblock>
    <class final="false" abstract="false" namespace="SprayFire\Dispatcher\Exception" line="23" package="SprayFire\Dispatcher\Exception">
      <extends>\RuntimeException</extends>
      <name>NotBootstrapperInstance</name>
      <full_name>\SprayFire\Dispatcher\Exception\NotBootstrapperInstance</full_name>
      <docblock line="16">
        <description>Exception thrown if the application's bootstrap does not appropriately implement
\SprayFire\Bootstrap\Bootstrapper</description>
        <long-description/>
        <tag line="16" name="package" description="SprayFire"/>
        <tag line="16" name="subpackage" description="Dispatcher.Exception"/>
      </docblock>
    </class>
  </file>
  <file path="Dispatcher/FireDispatcher/AppInitializer.php" hash="3cc59a701faa132b01fb9bc6069c80d9" package="Default">
    <docblock line="3">
      <description>Implementation of SprayFire.Dispatcher.AppInitializer provided with the default
SprayFire install.</description>
      <long-description/>
      <tag line="3" name="author" description="Charles Sprayberry"/>
      <tag line="3" name="license" description="Subject to the terms of the LICENSE file in the project root"/>
      <tag line="3" name="version" description="0.1"/>
      <tag line="3" name="since" description="0.1"/>
    </docblock>
    <class final="false" abstract="false" namespace="SprayFire\Dispatcher\FireDispatcher" line="32" package="SprayFire\Dispatcher\FireDispatcher">
      <extends>\SprayFire\CoreObject</extends>
      <implements>\SprayFire\Dispatcher\AppInitializer</implements>
      <name>AppInitializer</name>
      <full_name>\SprayFire\Dispatcher\FireDispatcher\AppInitializer</full_name>
      <docblock line="24">
        <description>During framework initialization, after the Request has been routed, this class
will ensure that your app's bootstrap has been instantiated and invoked so that
you may run whatever startup scripts your app needs.</description>
        <long-description/>
        <tag line="24" name="package" description="SprayFire"/>
        <tag line="24" name="subpackage" description="Dispatcher.FireDispatcher"/>
      </docblock>
      <property final="false" static="false" visibility="protected" line="43" namespace="SprayFire\Dispatcher\FireDispatcher" package="Default">
        <name>$ClassLoader</name>
        <default/>
        <docblock line="34">
          <description>Is here to provide the bootstrap process for the application a way to setup
autoloading for application specific third party libraries.</description>
          <long-description>&lt;p&gt;Also here to ensure the application we parse from the SprayFire.Http.Routing.RoutedRequest
gets autoloading setup properly.&lt;/p&gt;</long-description>
          <tag line="34" name="property" description="" type="\SprayFire\Dispatcher\FireDispatcher\ClassLoader.Loader" variable="">
            <type by_reference="false">\SprayFire\Dispatcher\FireDispatcher\ClassLoader.Loader</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="51" namespace="SprayFire\Dispatcher\FireDispatcher" package="Default">
        <name>$Container</name>
        <default/>
        <docblock line="45">
          <description>Is here to provide the bootstrap process for the application the service
container so that the appropriate application specific services may be added.</description>
          <long-description/>
          <tag line="45" name="property" description="" type="\SprayFire\Dispatcher\FireDispatcher\SprayFire.Service.Container" variable="">
            <type by_reference="false">\SprayFire\Dispatcher\FireDispatcher\SprayFire.Service.Container</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="59" namespace="SprayFire\Dispatcher\FireDispatcher" package="Default">
        <name>$Paths</name>
        <default/>
        <docblock line="53">
          <description>Is here to provide the directory that application specific classes should
be autoloaded from.</description>
          <long-description/>
          <tag line="53" name="property" description="" type="\SprayFire\Dispatcher\FireDispatcher\SprayFire.FileSys.PathGenerator" variable="">
            <type by_reference="false">\SprayFire\Dispatcher\FireDispatcher\SprayFire.FileSys.PathGenerator</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="SprayFire\Dispatcher\FireDispatcher" line="66" package="SprayFire\Dispatcher\FireDispatcher">
        <name>__construct</name>
        <full_name>__construct</full_name>
        <docblock line="61">
          <description/>
          <long-description/>
          <tag line="61" name="param" description="" type="\SprayFire\Service\Container" variable="$Container">
            <type by_reference="false">\SprayFire\Service\Container</type>
          </tag>
          <tag line="61" name="param" description="" type="\SprayFire\FileSys\PathGenerator" variable="$Paths">
            <type by_reference="false">\SprayFire\FileSys\PathGenerator</type>
          </tag>
          <tag line="61" name="param" description="" type="\ClassLoader\Loader" variable="$ClassLoader">
            <type by_reference="false">\ClassLoader\Loader</type>
          </tag>
        </docblock>
        <argument line="66">
          <name>$Container</name>
          <default/>
          <type>\SprayFire\Service\Container</type>
        </argument>
        <argument line="66">
          <name>$Paths</name>
          <default/>
          <type>\SprayFire\FileSys\PathGenerator</type>
        </argument>
        <argument line="66">
          <name>$ClassLoader</name>
          <default/>
          <type>\ClassLoader\Loader</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="SprayFire\Dispatcher\FireDispatcher" line="86" package="SprayFire\Dispatcher\FireDispatcher">
        <name>initializeApp</name>
        <full_name>initializeApp</full_name>
        <docblock line="72">
          <description>Based on the application namespace from the $RoutedRequest will setup the
appropriate autoloading and determine if there is a \&lt;AppName&gt;\Bootstrap
class that properly implements \SprayFire\Bootstrap\Bootstrapper and, if
so, will instantiate and invoke the runBootstrap() object for the application.</description>
          <long-description>&lt;p&gt;It is assumed that your application bootstraps are expecting a \SprayFire\Service\Container
and a \ClassLoader\Loader are injected at construction time.&lt;/p&gt;</long-description>
          <tag line="72" name="param" description="" type="\SprayFire\Http\Routing\RoutedRequest" variable="$RoutedRequest">
            <type by_reference="false">\SprayFire\Http\Routing\RoutedRequest</type>
          </tag>
          <tag line="72" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
          <tag line="72" name="throws" description="" type="\SprayFire\Dispatcher\Exception\BootstrapNotFound">
            <type by_reference="false">\SprayFire\Dispatcher\Exception\BootstrapNotFound</type>
          </tag>
          <tag line="72" name="throws" description="" type="\SprayFire\Dispatcher\Exception\NotBootstrapperInstance">
            <type by_reference="false">\SprayFire\Dispatcher\Exception\NotBootstrapperInstance</type>
          </tag>
        </docblock>
        <argument line="86">
          <name>$RoutedRequest</name>
          <default/>
          <type>\SprayFire\Http\Routing\RoutedRequest</type>
        </argument>
      </method>
    </class>
    <parse_markers>
      <error line="61" code="50012">No short description for method __construct()</error>
    </parse_markers>
  </file>
  <file path="Dispatcher/FireDispatcher/Dispatcher.php" hash="164a28de13960a26eb11290c6c2893c8" package="Default">
    <docblock line="3">
      <description>Implementation of \SprayFire\Dispatcher\Dispatcher provided with the default
SprayFire install.</description>
      <long-description/>
      <tag line="3" name="author" description="Charles Sprayberry"/>
      <tag line="3" name="license" description="Subject to the terms of the LICENSE file in the project root"/>
      <tag line="3" name="version" description="0.1"/>
      <tag line="3" name="since" description="0.1"/>
    </docblock>
    <class final="false" abstract="false" namespace="SprayFire\Dispatcher\FireDispatcher" line="37" package="SprayFire\Dispatcher\FireDispatcher">
      <extends>\SprayFire\CoreObject</extends>
      <implements>\SprayFire\Dispatcher\Dispatcher</implements>
      <name>Dispatcher</name>
      <full_name>\SprayFire\Dispatcher\FireDispatcher\Dispatcher</full_name>
      <docblock line="23">
        <description>This class is the primary workhorse of the framework and is responsible for
the overall resource processing logic including:</description>
        <long-description>&lt;ul&gt;
&lt;li&gt;Routing the given \SprayFire\Http\Request&lt;/li&gt;
&lt;li&gt;Initializing the appropriate application based on routing&lt;/li&gt;
&lt;li&gt;Creation of the appropriate \SprayFire\Controller\Controller and \SprayFire\Responder\Responder
objects.&lt;/li&gt;
&lt;li&gt;Invocation of the Controller and the triggering of an events provided by
the default SprayFire install&lt;/li&gt;
&lt;/ul&gt;</long-description>
        <tag line="23" name="package" description="SprayFire"/>
        <tag line="23" name="subpackage" description="Dispatcher.FireDispatcher"/>
      </docblock>
      <property final="false" static="false" visibility="protected" line="44" namespace="SprayFire\Dispatcher\FireDispatcher" package="Default">
        <name>$AppInitializer</name>
        <default/>
        <docblock line="39">
          <description>Used to ensure the appropriate applications gets autoloaded and bootstrapped.</description>
          <long-description/>
          <tag line="39" name="property" description="" type="\SprayFire\Dispatcher\AppInitializer" variable="">
            <type by_reference="false">\SprayFire\Dispatcher\AppInitializer</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="52" namespace="SprayFire\Dispatcher\FireDispatcher" package="Default">
        <name>$Mediator</name>
        <default/>
        <docblock line="46">
          <description>Is used to ensure that appropriate events for the dispatching process are
triggered when appropriate.</description>
          <long-description/>
          <tag line="46" name="property" description="" type="\SprayFire\Mediator\Mediator" variable="">
            <type by_reference="false">\SprayFire\Mediator\Mediator</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="59" namespace="SprayFire\Dispatcher\FireDispatcher" package="Default">
        <name>$ControllerFactory</name>
        <default/>
        <docblock line="54">
          <description>Ensures an appropriate \SprayFire\Controller\Controller can be created.</description>
          <long-description/>
          <tag line="54" name="property" description="" type="\SprayFire\Factory\Factory" variable="">
            <type by_reference="false">\SprayFire\Factory\Factory</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="66" namespace="SprayFire\Dispatcher\FireDispatcher" package="Default">
        <name>$ResponderFactory</name>
        <default/>
        <docblock line="61">
          <description>Ensures an appropriate \SprayFire\Responder\Responder can be created.</description>
          <long-description/>
          <tag line="61" name="property" description="" type="\SprayFire\Factory\Factory" variable="">
            <type by_reference="false">\SprayFire\Factory\Factory</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="74" namespace="SprayFire\Dispatcher\FireDispatcher" package="Default">
        <name>$environmentConfig</name>
        <default/>
        <docblock line="68">
          <description>A configuration array, the default environment configuration for a SprayFire
install can be found in install_dir/config/SprayFire/environment.php</description>
          <long-description/>
          <tag line="68" name="property" description="" type="array" variable="">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="SprayFire\Dispatcher\FireDispatcher" line="81" package="SprayFire\Dispatcher\FireDispatcher">
        <name>__construct</name>
        <full_name>__construct</full_name>
        <docblock line="76">
          <description/>
          <long-description/>
          <tag line="76" name="param" description="" type="\SprayFire\Mediator\Mediator" variable="$Mediator">
            <type by_reference="false">\SprayFire\Mediator\Mediator</type>
          </tag>
          <tag line="76" name="param" description="" type="\SprayFire\Factory\Factory" variable="$ControllerFactory">
            <type by_reference="false">\SprayFire\Factory\Factory</type>
          </tag>
          <tag line="76" name="param" description="" type="\SprayFire\Factory\Factory" variable="$ResponderFactory">
            <type by_reference="false">\SprayFire\Factory\Factory</type>
          </tag>
        </docblock>
        <argument line="81">
          <name>$Mediator</name>
          <default/>
          <type>\SprayFire\Mediator\Mediator</type>
        </argument>
        <argument line="81">
          <name>$ControllerFactory</name>
          <default/>
          <type>\SprayFire\Factory\Factory</type>
        </argument>
        <argument line="81">
          <name>$ResponderFactory</name>
          <default/>
          <type>\SprayFire\Factory\Factory</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="SprayFire\Dispatcher\FireDispatcher" line="96" package="SprayFire\Dispatcher\FireDispatcher">
        <name>dispatchResponse</name>
        <full_name>dispatchResponse</full_name>
        <docblock line="87">
          <description>Will route a SprayFire.Http.Request object, triggering appropriate Dispatcher
events along the way, and start the invocation of the static or dynamic
response sending.</description>
          <long-description/>
          <tag line="87" name="param" description="" type="\SprayFire\Http\Routing\RoutedRequest" variable="$RoutedRequest">
            <type by_reference="false">\SprayFire\Http\Routing\RoutedRequest</type>
          </tag>
          <tag line="87" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
          <tag line="87" name="throws" description="" type="\SprayFire\Dispatcher\Exception\ActionNotFound">
            <type by_reference="false">\SprayFire\Dispatcher\Exception\ActionNotFound</type>
          </tag>
        </docblock>
        <argument line="96">
          <name>$RoutedRequest</name>
          <default/>
          <type>\SprayFire\Http\Routing\RoutedRequest</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="SprayFire\Dispatcher\FireDispatcher" line="116" package="SprayFire\Dispatcher\FireDispatcher">
        <name>addControllerBeforeActionEventToMediator</name>
        <full_name>addControllerBeforeActionEventToMediator</full_name>
        <docblock line="110">
          <description>Will create a callback for the Controller::beforeAction method and add that
to the Mediator to be invoked as appropriate.</description>
          <long-description/>
          <tag line="110" name="param" description="" type="\SprayFire\Controller\Controller" variable="$Controller">
            <type by_reference="false">\SprayFire\Controller\Controller</type>
          </tag>
        </docblock>
        <argument line="116">
          <name>$Controller</name>
          <default/>
          <type>\SprayFire\Controller\Controller</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="SprayFire\Dispatcher\FireDispatcher" line="129" package="SprayFire\Dispatcher\FireDispatcher">
        <name>addControllerAfterActionEventToMediator</name>
        <full_name>addControllerAfterActionEventToMediator</full_name>
        <docblock line="123">
          <description>Will create a callback for the Controller::afterAction method and add that
to the Mediator to be invoked as appropriate.</description>
          <long-description/>
          <tag line="123" name="param" description="" type="\SprayFire\Controller\Controller" variable="$Controller">
            <type by_reference="false">\SprayFire\Controller\Controller</type>
          </tag>
        </docblock>
        <argument line="129">
          <name>$Controller</name>
          <default/>
          <type>\SprayFire\Controller\Controller</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="SprayFire\Dispatcher\FireDispatcher" line="148" package="SprayFire\Dispatcher\FireDispatcher">
        <name>generateController</name>
        <full_name>generateController</full_name>
        <docblock line="136">
          <description>Generates the appropriate controller and, if the method exists, will return
the implementation.</description>
          <long-description>&lt;p&gt;An exception will be thrown if the $actionName does not exist as a callable
method on created controller.&lt;/p&gt;</long-description>
          <tag line="136" name="param" description="" type="string" variable="$controllerName">
            <type by_reference="false">string</type>
          </tag>
          <tag line="136" name="param" description="" type="string" variable="$actionName">
            <type by_reference="false">string</type>
          </tag>
          <tag line="136" name="return" description="" type="\SprayFire\Controller\Controller">
            <type by_reference="false">\SprayFire\Controller\Controller</type>
          </tag>
          <tag line="136" name="throws" description="" type="\SprayFire\Dispatcher\Exception\ActionNotFound">
            <type by_reference="false">\SprayFire\Dispatcher\Exception\ActionNotFound</type>
          </tag>
        </docblock>
        <argument line="148">
          <name>$controllerName</name>
          <default/>
          <type/>
        </argument>
        <argument line="148">
          <name>$actionName</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="SprayFire\Dispatcher\FireDispatcher" line="164" package="SprayFire\Dispatcher\FireDispatcher">
        <name>invokeController</name>
        <full_name>invokeController</full_name>
        <docblock line="156">
          <description>Ensures that the appropriate events and actions for invoking a \SprayFire\Controller\Controller
are properly carried out.</description>
          <long-description/>
          <tag line="156" name="param" description="" type="\SprayFire\Controller\Controller" variable="$Controller">
            <type by_reference="false">\SprayFire\Controller\Controller</type>
          </tag>
          <tag line="156" name="param" description="" type="\SprayFire\Http\Routing\RoutedRequest" variable="$RoutedRequest">
            <type by_reference="false">\SprayFire\Http\Routing\RoutedRequest</type>
          </tag>
          <tag line="156" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
        <argument line="164">
          <name>$Controller</name>
          <default/>
          <type>\SprayFire\Controller\Controller</type>
        </argument>
        <argument line="164">
          <name>$RoutedRequest</name>
          <default/>
          <type>\SprayFire\Http\Routing\RoutedRequest</type>
        </argument>
      </method>
    </class>
    <parse_markers>
      <error line="76" code="50012">No short description for method __construct()</error>
    </parse_markers>
  </file>
  <file path="EnvironmentConfig.php" hash="42efd253663068c09e5ac4be02948fd7" package="Default">
    <docblock line="3">
      <description>Object representing SprayFire's environment configuration.</description>
      <long-description></long-description>
      <tag line="3" name="author" description="Charles Sprayberry"/>
      <tag line="3" name="license" description="Subject to the terms of the LICENSE file in the project root"/>
      <tag line="3" name="version" description="0.1"/>
      <tag line="3" name="since" description="0.1"/>
    </docblock>
    <class final="false" abstract="false" namespace="SprayFire" line="22" package="SprayFire">
      <extends>\SprayFire\CoreObject</extends>
      <name>EnvironmentConfig</name>
      <full_name>\SprayFire\EnvironmentConfig</full_name>
      <docblock line="16">
        <description>Object representing SprayFire's environment configuration and controls how
the framework operates at runtime.</description>
        <long-description></long-description>
        <tag line="16" name="package" description="SprayFire"/>
      </docblock>
      <constant namespace="SprayFire" line="27" package="SprayFire">
        <name>VERSION</name>
        <full_name>VERSION</full_name>
        <value>'0.1.0alpha'</value>
        <docblock line="24">
          <description>The current version of the framework.</description>
          <long-description></long-description>
        </docblock>
      </constant>
      <property final="false" static="false" visibility="protected" line="34" namespace="SprayFire" package="Default">
        <name>$defaultOptions</name>
        <default>array('developmentMode' =&gt; false, 'defaultCharset' =&gt; 'UTF-8', 'registeredEvents' =&gt; array(\SprayFire\Dispatcher\Events::AFTER_CONTROLLER_INVOKED =&gt; '', \SprayFire\Dispatcher\Events::AFTER_RESPONSE_SENT =&gt; '', \SprayFire\Dispatcher\Events::BEFORE_CONTROLLER_INVOKED =&gt; '', \SprayFire\Dispatcher\Events::BEFORE_RESPONSE_SENT =&gt; ''), 'virtualHost' =&gt; true)</default>
        <docblock line="29">
          <description>Default environment config if none are provided at time of construction.</description>
          <long-description></long-description>
          <tag line="29" name="property" description="" type="array" variable="">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="51" namespace="SprayFire" package="Default">
        <name>$options</name>
        <default></default>
        <docblock line="46">
          <description>The actual options used to return appropriate configuration values</description>
          <long-description></long-description>
          <tag line="46" name="property" description="" type="array" variable="">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="SprayFire" line="72" package="SprayFire">
        <name>__construct</name>
        <full_name>__construct</full_name>
        <docblock line="53">
          <description>If no $options are passed the $defaultOptions are used; please see chart
in details for more information on the keys available in options.</description>
          <long-description>&lt;p&gt;Options:&lt;/p&gt;

&lt;h2&gt;Key                | Value&lt;/h2&gt;

&lt;h2&gt;developmentMode    | boolean (default: true)&lt;/h2&gt;

&lt;h2&gt;defaultCharset     | string (default: utf-8)&lt;/h2&gt;

&lt;h2&gt;registeredEvents   | array (default: constants in Dispatcher\Events)&lt;/h2&gt;

&lt;h2&gt;virtualHost        | boolean (default: true)&lt;/h2&gt;</long-description>
          <tag line="53" name="param" description="" type="array" variable="$options">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
        <argument line="72">
          <name>$options</name>
          <default>array()</default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="SprayFire" line="79" package="SprayFire">
        <name>getDefaultCharset</name>
        <full_name>getDefaultCharset</full_name>
        <docblock line="76">
          <description></description>
          <long-description></long-description>
          <tag line="76" name="return" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="SprayFire" line="86" package="SprayFire">
        <name>getRegisteredEvents</name>
        <full_name>getRegisteredEvents</full_name>
        <docblock line="83">
          <description></description>
          <long-description></long-description>
          <tag line="83" name="return" description="" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="SprayFire" line="93" package="SprayFire">
        <name>isDevelopmentMode</name>
        <full_name>isDevelopmentMode</full_name>
        <docblock line="90">
          <description></description>
          <long-description></long-description>
          <tag line="90" name="return" description="" type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="SprayFire" line="100" package="SprayFire">
        <name>useVirtualHost</name>
        <full_name>useVirtualHost</full_name>
        <docblock line="97">
          <description></description>
          <long-description></long-description>
          <tag line="97" name="return" description="" type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
        </docblock>
      </method>
    </class>
    <parse_markers>
      <error line="76" code="50012">No short description for method getDefaultCharset()</error>
      <error line="83" code="50012">No short description for method getRegisteredEvents()</error>
      <error line="90" code="50012">No short description for method isDevelopmentMode()</error>
      <error line="97" code="50012">No short description for method useVirtualHost()</error>
    </parse_markers>
  </file>
  <file path="Exception/UnsupportedOperationException.php" hash="433829250a8ece7e71859d4b6d27f6dd" package="Default">
    <docblock line="3">
      <description>Thrown if a method implemented by an interface should not be callable for a
specific implementation.</description>
      <long-description></long-description>
      <tag line="3" name="author" description="Charles Sprayberry"/>
      <tag line="3" name="license" description="Governed by the LICENSE file found in the root directory of this source&#10;code"/>
    </docblock>
    <class final="false" abstract="false" namespace="SprayFire\Exception" line="23" package="SprayFire\Exception">
      <extends>\RuntimeException</extends>
      <name>UnsupportedOperationException</name>
      <full_name>\SprayFire\Exception\UnsupportedOperationException</full_name>
      <docblock line="16">
        <description>Thrown if a method implemented by an interface should not be callable for a
specific implementation.</description>
        <long-description></long-description>
        <tag line="16" name="package" description="SprayFire"/>
        <tag line="16" name="subpackage" description="Exception"/>
      </docblock>
    </class>
  </file>
  <file path="Factory/Exception/TypeNotFound.php" hash="7fd5cf9be7d424cc097a71bafe2ea32a" package="Default">
    <docblock line="3">
      <description>Exception thrown if a return type restriction or a null object passed to a
Factory could not be loaded.</description>
      <long-description/>
      <tag line="3" name="author" description="Charles Sprayberry"/>
      <tag line="3" name="license" description="Subject to the terms of the LICENSE file in the project root"/>
      <tag line="3" name="version" description="0.1"/>
      <tag line="3" name="since" description="0.1"/>
    </docblock>
    <class final="false" abstract="false" namespace="SprayFire\Factory\Exception" line="20" package="SprayFire\Factory\Exception">
      <extends>\InvalidArgumentException</extends>
      <name>TypeNotFound</name>
      <full_name>\SprayFire\Factory\Exception\TypeNotFound</full_name>
      <docblock line="16">
        <description/>
        <long-description/>
        <tag line="16" name="package" description="SprayFire"/>
        <tag line="16" name="subpackage" description="Factory.Exception"/>
      </docblock>
    </class>
    <parse_markers>
      <critical line="16" code="50005">No short description for class \SprayFire\Factory\Exception\TypeNotFound</critical>
    </parse_markers>
  </file>
  <file path="Factory/Factory.php" hash="6a6126d477cfb21e9afe650db9d146a5" package="Default">
    <docblock line="3">
      <description>Interface to allow the dynamic creation of objects and to retrieve information
about the type of objects created by the implementation.</description>
      <long-description/>
      <tag line="3" name="author" description="Charles Sprayberry"/>
      <tag line="3" name="license" description="Subject to the terms of the LICENSE file in the project root"/>
      <tag line="3" name="version" description="0.1"/>
      <tag line="3" name="since" description="0.1"/>
    </docblock>
    <interface namespace="SprayFire\Factory" line="21" package="SprayFire\Factory">
      <name>Factory</name>
      <full_name>\SprayFire\Factory\Factory</full_name>
      <extends>\SprayFire\Object</extends>
      <docblock line="17">
        <description/>
        <long-description/>
        <tag line="17" name="package" description="SprayFire"/>
        <tag line="17" name="subpackage" description="Factory"/>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="SprayFire\Factory" line="33" package="SprayFire\Factory">
        <name>makeObject</name>
        <full_name>makeObject</full_name>
        <docblock line="23">
          <description>If the appropriate object could not be successfully created we should return
a Null Object implementation or throw an exception, at no point should a
value be returned from this method that cannot be invoked as if it were
an object.</description>
          <long-description/>
          <tag line="23" name="param" description="" type="string" variable="$objectName">
            <type by_reference="false">string</type>
          </tag>
          <tag line="23" name="param" description="" type="array" variable="$options">
            <type by_reference="false">array</type>
          </tag>
          <tag line="23" name="return" description="" type="object">
            <type by_reference="false">object</type>
          </tag>
        </docblock>
        <argument line="33">
          <name>$objectName</name>
          <default/>
          <type/>
        </argument>
        <argument line="33">
          <name>$options</name>
          <default>array()</default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="SprayFire\Factory" line="41" package="SprayFire\Factory">
        <name>getObjectType</name>
        <full_name>getObjectType</full_name>
        <docblock line="35">
          <description>Should return the Java or PHP style name for the type of object the factory
creates.</description>
          <long-description/>
          <tag line="35" name="return" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="SprayFire\Factory" line="49" package="SprayFire\Factory">
        <name>getNullObjectType</name>
        <full_name>getNullObjectType</full_name>
        <docblock line="43">
          <description>Should return the specific type for the object returned if an error was
encountered creating the requested object.</description>
          <long-description/>
          <tag line="43" name="return" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </method>
    </interface>
  </file>
  <file path="Factory/FireFactory/Base.php" hash="e58bf1ebf526652e8ee9691a1d7fec94" package="Default">
    <docblock line="3">
      <description>Abstract implementation of SprayFire.Factory.Factory that will allow for the
creation of generic SprayFire objects.</description>
      <long-description/>
      <tag line="3" name="author" description="Charles Sprayberry"/>
      <tag line="3" name="license" description="Subject to the terms of the LICENSE file in the project root"/>
      <tag line="3" name="version" description="0.1"/>
      <tag line="3" name="since" description="0.1"/>
    </docblock>
    <class final="false" abstract="true" namespace="SprayFire\Factory\FireFactory" line="32" package="SprayFire\Factory\FireFactory">
      <extends>\SprayFire\CoreObject</extends>
      <implements>\SprayFire\Factory\Factory</implements>
      <name>Base</name>
      <full_name>\SprayFire\Factory\FireFactory\Base</full_name>
      <docblock line="22">
        <description>All Factory implementations provided by the default SprayFire install will
extend from this Factory.</description>
        <long-description/>
        <tag line="22" name="package" description="SprayFire"/>
        <tag line="22" name="subpackage" description="Factory.FireFactory"/>
        <tag line="22" name="todo" description="Look at implementing a strategy pattern for dealing with Factory error handling."/>
      </docblock>
      <property final="false" static="false" visibility="protected" line="38" namespace="SprayFire\Factory\FireFactory" package="Default">
        <name>$ReflectionCache</name>
        <default/>
        <docblock line="33">
          <description>Cache to help prevent unneeded ReflectionClass from being created.</description>
          <long-description/>
          <tag line="33" name="property" description="" type="\SprayFire\ReflectionCache" variable="">
            <type by_reference="false">\SprayFire\ReflectionCache</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="45" namespace="SprayFire\Factory\FireFactory" package="Default">
        <name>$LogOverseer</name>
        <default/>
        <docblock line="40">
          <description>Ensures that we can log messages about failed object creation.</description>
          <long-description/>
          <tag line="40" name="property" description="" type="\SprayFire\Logging\LogOverseer" variable="">
            <type by_reference="false">\SprayFire\Logging\LogOverseer</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="53" namespace="SprayFire\Factory\FireFactory" package="Default">
        <name>$NullObject</name>
        <default/>
        <docblock line="47">
          <description>The type of object that should be returned if an error is encountered with
the creation of the requested object.</description>
          <long-description/>
          <tag line="47" name="property" description="" type="Object" variable="">
            <type by_reference="false">Object</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="61" namespace="SprayFire\Factory\FireFactory" package="Default">
        <name>$TypeValidator</name>
        <default/>
        <docblock line="55">
          <description>A helper object to ensure that the appropriate types are returned from
Base::makeObject</description>
          <long-description/>
          <tag line="55" name="property" description="" type="\SprayFire\Core\Util\ObjectTypeValidator" variable="">
            <type by_reference="false">\SprayFire\Core\Util\ObjectTypeValidator</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="SprayFire\Factory\FireFactory" line="70" package="SprayFire\Factory\FireFactory">
        <name>__construct</name>
        <full_name>__construct</full_name>
        <docblock line="63">
          <description/>
          <long-description/>
          <tag line="63" name="param" description="" type="\SprayFire\Utils\ReflectionCache" variable="$Cache">
            <type by_reference="false">\SprayFire\Utils\ReflectionCache</type>
          </tag>
          <tag line="63" name="param" description="" type="\SprayFire\Logging\LogOverseer" variable="$LogOverseer">
            <type by_reference="false">\SprayFire\Logging\LogOverseer</type>
          </tag>
          <tag line="63" name="param" description="" type="string" variable="$returnTypeRestriction">
            <type by_reference="false">string</type>
          </tag>
          <tag line="63" name="param" description="" type="string" variable="$nullObject">
            <type by_reference="false">string</type>
          </tag>
          <tag line="63" name="throws" description="" type="\SprayFire\Factory\Exception\TypeNotFound">
            <type by_reference="false">\SprayFire\Factory\Exception\TypeNotFound</type>
          </tag>
        </docblock>
        <argument line="70">
          <name>$Cache</name>
          <default/>
          <type>\SprayFire\Utils\ReflectionCache</type>
        </argument>
        <argument line="70">
          <name>$LogOverseer</name>
          <default/>
          <type>\SprayFire\Logging\LogOverseer</type>
        </argument>
        <argument line="70">
          <name>$returnTypeRestriction</name>
          <default/>
          <type/>
        </argument>
        <argument line="70">
          <name>$nullObject</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="SprayFire\Factory\FireFactory" line="88" package="SprayFire\Factory\FireFactory">
        <name>createTypeValidator</name>
        <full_name>createTypeValidator</full_name>
        <docblock line="77">
          <description>Ensures that the appropriate type validator is created for this factory.</description>
          <long-description>&lt;p&gt;We are not injecting this as a dependency because this is really an implementation
detail and shouldn't be exposed to the outside world, we just care about
validating types correctly.&lt;/p&gt;</long-description>
          <tag line="77" name="param" description="" type="string" variable="$objectType">
            <type by_reference="false">string</type>
          </tag>
          <tag line="77" name="return" description="" type="\SprayFire\ObjectTypeValidator">
            <type by_reference="false">\SprayFire\ObjectTypeValidator</type>
          </tag>
          <tag line="77" name="throws" description="" type="\SprayFire\Factory\Exception\TypeNotFound">
            <type by_reference="false">\SprayFire\Factory\Exception\TypeNotFound</type>
          </tag>
        </docblock>
        <argument line="88">
          <name>$objectType</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="SprayFire\Factory\FireFactory" line="106" package="SprayFire\Factory\FireFactory">
        <name>createNullObject</name>
        <full_name>createNullObject</full_name>
        <docblock line="98">
          <description>Creates a Null Object implementation and ensures that the implementation
is of the appropriate type for the factory.</description>
          <long-description/>
          <tag line="98" name="param" description="" type="string" variable="$nullObjectType">
            <type by_reference="false">string</type>
          </tag>
          <tag line="98" name="return" description="instanceof $this-&gt;nullObjectType" type="Object">
            <type by_reference="false">Object</type>
          </tag>
          <tag line="98" name="throws" description="" type="\SprayFire\Factory\Exception\TypeNotFound">
            <type by_reference="false">\SprayFire\Factory\Exception\TypeNotFound</type>
          </tag>
        </docblock>
        <argument line="106">
          <name>$nullObjectType</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="SprayFire\Factory\FireFactory" line="129" package="SprayFire\Factory\FireFactory">
        <name>makeObject</name>
        <full_name>makeObject</full_name>
        <docblock line="121">
          <description>If there is a problem creating the given object a clone of the NullObject
prototype for this factory will be returned.</description>
          <long-description/>
          <tag line="121" name="param" description="" type="string" variable="$className">
            <type by_reference="false">string</type>
          </tag>
          <tag line="121" name="param" description="" type="array" variable="$parameters">
            <type by_reference="false">array</type>
          </tag>
          <tag line="121" name="return" description="Type restricted by Factory constructor parameters" type="Object">
            <type by_reference="false">Object</type>
          </tag>
        </docblock>
        <argument line="129">
          <name>$className</name>
          <default/>
          <type/>
        </argument>
        <argument line="129">
          <name>$parameters</name>
          <default>array()</default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="SprayFire\Factory\FireFactory" line="152" package="SprayFire\Factory\FireFactory">
        <name>getObjectType</name>
        <full_name>getObjectType</full_name>
        <docblock line="147">
          <description>Will return the type created by the factory as a PHP namespaced type.</description>
          <long-description/>
          <tag line="147" name="return" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="SprayFire\Factory\FireFactory" line="162" package="SprayFire\Factory\FireFactory">
        <name>getNullObjectType</name>
        <full_name>getNullObjectType</full_name>
        <docblock line="156">
          <description>Will return the type of Null Object used by the factory as a PHP namespaced
type.</description>
          <long-description/>
          <tag line="156" name="return" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </method>
    </class>
    <parse_markers>
      <error line="63" code="50012">No short description for method __construct()</error>
    </parse_markers>
  </file>
  <file path="Factory/FireFactory/ObjectTypeValidator.php" hash="5e5e9ab59745c60db0b573834438de60" package="Default">
    <docblock line="3">
      <description>Class used to validate object types to be the same as a constructor injection.</description>
      <long-description/>
      <tag line="3" name="author" description="Charles Sprayberry"/>
      <tag line="3" name="license" description="Subject to the terms of the LICENSE file in the project root"/>
      <tag line="3" name="version" description="0.1"/>
      <tag line="3" name="since" description="0.1"/>
    </docblock>
    <class final="false" abstract="false" namespace="SprayFire\Factory\FireFactory" line="24" package="SprayFire\Factory\FireFactory">
      <extends/>
      <name>ObjectTypeValidator</name>
      <full_name>\SprayFire\Factory\FireFactory\ObjectTypeValidator</full_name>
      <docblock line="17">
        <description>This is a package private class and is intended to be used only by implementations
in module SprayFire.Factory.FireFactory</description>
        <long-description/>
        <tag line="17" name="package" description="SprayFire"/>
        <tag line="17" name="subpackage" description="Factory.FireFactory"/>
      </docblock>
      <property final="false" static="false" visibility="protected" line="31" namespace="SprayFire\Factory\FireFactory" package="Default">
        <name>$ReflectedParentType</name>
        <default/>
        <docblock line="26">
          <description>A ReflectionClass of the data type that should be implemented by objects.</description>
          <long-description/>
          <tag line="26" name="property" description="" type="\ReflectionClass" variable="">
            <type by_reference="false">\ReflectionClass</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="SprayFire\Factory\FireFactory" line="36" package="SprayFire\Factory\FireFactory">
        <name>__construct</name>
        <full_name>__construct</full_name>
        <docblock line="33">
          <description/>
          <long-description/>
          <tag line="33" name="param" description="" type="\ReflectionClass" variable="$ReflectedType">
            <type by_reference="false">\ReflectionClass</type>
          </tag>
        </docblock>
        <argument line="36">
          <name>$ReflectedType</name>
          <default/>
          <type>\ReflectionClass</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="SprayFire\Factory\FireFactory" line="44" package="SprayFire\Factory\FireFactory">
        <name>throwExceptionIfObjectNotParentType</name>
        <full_name>throwExceptionIfObjectNotParentType</full_name>
        <docblock line="40">
          <description/>
          <long-description/>
          <tag line="40" name="param" description="" type="Object" variable="$Object">
            <type by_reference="false">Object</type>
          </tag>
          <tag line="40" name="throws" description="" type="\InvalidArgumentException">
            <type by_reference="false">\InvalidArgumentException</type>
          </tag>
        </docblock>
        <argument line="44">
          <name>$Object</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="SprayFire\Factory\FireFactory" line="57" package="SprayFire\Factory\FireFactory">
        <name>getType</name>
        <full_name>getType</full_name>
        <docblock line="51">
          <description>Will return the name of the type this instance will validate on in a
PHP namespaced format.</description>
          <long-description/>
          <tag line="51" name="return" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </method>
    </class>
    <parse_markers>
      <error line="33" code="50012">No short description for method __construct()</error>
      <error line="40" code="50012">No short description for method throwExceptionIfObjectNotParentType()</error>
    </parse_markers>
  </file>
  <file path="FileSys/FireFileSys/Paths.php" hash="0ab99714f585b129639c7185c0fe0afd" package="Default">
    <docblock line="3">
      <description>Implementation of SprayFire.FileSys.Paths to create absolute paths to various
directories in SprayFire.</description>
      <long-description/>
      <tag line="3" name="author" description="Charles Sprayberry"/>
      <tag line="3" name="license" description="Subject to the terms of the LICENSE file in the project root"/>
      <tag line="3" name="version" description="0.1"/>
      <tag line="3" name="since" description="0.1"/>
    </docblock>
    <class final="false" abstract="false" namespace="SprayFire\FileSys\FireFileSys" line="33" package="SprayFire\FileSys\FireFileSys">
      <extends>\SprayFire\CoreObject</extends>
      <implements>\SprayFire\FileSys\PathGenerator</implements>
      <name>Paths</name>
      <full_name>\SprayFire\FileSys\FireFileSys\Paths</full_name>
      <docblock line="18">
        <description>All of the getter methods in this class allow a variable number of parameters
passed to it.</description>
        <long-description>&lt;h2&gt;Method 1 - parameters&lt;/h2&gt;

&lt;p&gt;Paths::getInstallPath('path', 'to', 'your', 'file');&lt;/p&gt;

&lt;h2&gt;Method 2 - array&lt;/h2&gt;

&lt;p&gt;Paths::getInstallPath(array('path', 'to', 'your', 'file'));&lt;/p&gt;</long-description>
        <tag line="18" name="package" description="SprayFire"/>
        <tag line="18" name="subpackage" description="FileSys.FireFileSys"/>
      </docblock>
      <property final="false" static="false" visibility="protected" line="44" namespace="SprayFire\FileSys\FireFileSys" package="Default">
        <name>$installPath</name>
        <default/>
        <docblock line="35">
          <description>The full, absolute path to the directory the SprayFire source was installed
in.</description>
          <long-description>&lt;p&gt;Relative to this directory the framework API and implementations should
be in ./libs/SprayFire.&lt;/p&gt;</long-description>
          <tag line="35" name="property" description="" type="string" variable="">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="52" namespace="SprayFire\FileSys\FireFileSys" package="Default">
        <name>$libsPath</name>
        <default/>
        <docblock line="46">
          <description>The full, absolute path to the directory the SprayFire API and implementations
are stored in.</description>
          <long-description/>
          <tag line="46" name="property" description="" type="string" variable="">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="59" namespace="SprayFire\FileSys\FireFileSys" package="Default">
        <name>$appPath</name>
        <default/>
        <docblock line="54">
          <description>The full absolute path to the directory holding application API and implementations.</description>
          <long-description/>
          <tag line="54" name="property" description="" type="string" variable="">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="67" namespace="SprayFire\FileSys\FireFileSys" package="Default">
        <name>$configPath</name>
        <default/>
        <docblock line="61">
          <description>The full, absolute path to the directory holding configuration values for
SprayFire and your applications.</description>
          <long-description/>
          <tag line="61" name="property" description="" type="string" variable="">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="74" namespace="SprayFire\FileSys\FireFileSys" package="Default">
        <name>$logsPath</name>
        <default/>
        <docblock line="69">
          <description>The full, absolute path to store logs written to files.</description>
          <long-description/>
          <tag line="69" name="property" description="" type="string" variable="">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="82" namespace="SprayFire\FileSys\FireFileSys" package="Default">
        <name>$webPath</name>
        <default/>
        <docblock line="76">
          <description>The full, absolute path to the web accessible folder for the framework
and your applications.</description>
          <long-description/>
          <tag line="76" name="property" description="" type="string" variable="">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="89" namespace="SprayFire\FileSys\FireFileSys" package="Default">
        <name>$virtualHost</name>
        <default/>
        <docblock line="84">
          <description>Determines whether or not the SprayFire installation is setup to use VirtualHosts.</description>
          <long-description/>
          <tag line="84" name="property" description="" type="boolean" variable="">
            <type by_reference="false">boolean</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="SprayFire\FileSys\FireFileSys" line="94" package="SprayFire\FileSys\FireFileSys">
        <name>__construct</name>
        <full_name>__construct</full_name>
        <docblock line="91">
          <description/>
          <long-description/>
          <tag line="91" name="param" description="" type="\SprayFire\FileSys\FireFileSys\RootPaths" variable="$RootPaths">
            <type by_reference="false">\SprayFire\FileSys\FireFileSys\RootPaths</type>
          </tag>
        </docblock>
        <argument line="94">
          <name>$RootPaths</name>
          <default/>
          <type>\SprayFire\FileSys\FireFileSys\RootPaths</type>
        </argument>
        <argument line="94">
          <name>$virtualHost</name>
          <default>false</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="SprayFire\FileSys\FireFileSys" line="107" package="SprayFire\FileSys\FireFileSys">
        <name>getInstallPath</name>
        <full_name>getInstallPath</full_name>
        <docblock line="104">
          <description/>
          <long-description/>
          <tag line="104" name="return" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="SprayFire\FileSys\FireFileSys" line="114" package="SprayFire\FileSys\FireFileSys">
        <name>getLibsPath</name>
        <full_name>getLibsPath</full_name>
        <docblock line="111">
          <description/>
          <long-description/>
          <tag line="111" name="return" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="SprayFire\FileSys\FireFileSys" line="121" package="SprayFire\FileSys\FireFileSys">
        <name>getAppPath</name>
        <full_name>getAppPath</full_name>
        <docblock line="118">
          <description/>
          <long-description/>
          <tag line="118" name="return" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="SprayFire\FileSys\FireFileSys" line="128" package="SprayFire\FileSys\FireFileSys">
        <name>getConfigPath</name>
        <full_name>getConfigPath</full_name>
        <docblock line="125">
          <description/>
          <long-description/>
          <tag line="125" name="return" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="SprayFire\FileSys\FireFileSys" line="135" package="SprayFire\FileSys\FireFileSys">
        <name>getLogsPath</name>
        <full_name>getLogsPath</full_name>
        <docblock line="132">
          <description/>
          <long-description/>
          <tag line="132" name="return" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="SprayFire\FileSys\FireFileSys" line="144" package="SprayFire\FileSys\FireFileSys">
        <name>getWebPath</name>
        <full_name>getWebPath</full_name>
        <docblock line="139">
          <description>Path suitable for back-end file system access to the web directory</description>
          <long-description/>
          <tag line="139" name="return" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="SprayFire\FileSys\FireFileSys" line="153" package="SprayFire\FileSys\FireFileSys">
        <name>getUrlPath</name>
        <full_name>getUrlPath</full_name>
        <docblock line="148">
          <description>Path suitable for front-end HTML linking to files in the web directory.</description>
          <long-description/>
          <tag line="148" name="return" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="SprayFire\FileSys\FireFileSys" line="173" package="SprayFire\FileSys\FireFileSys">
        <name>generateFullPath</name>
        <full_name>generateFullPath</full_name>
        <docblock line="168">
          <description/>
          <long-description/>
          <tag line="168" name="param" description="" type="string" variable="$property">
            <type by_reference="false">string</type>
          </tag>
          <tag line="168" name="param" description="" type="array" variable="$subDir">
            <type by_reference="false">array</type>
          </tag>
          <tag line="168" name="return" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="173">
          <name>$property</name>
          <default/>
          <type/>
        </argument>
        <argument line="173">
          <name>$subDir</name>
          <default/>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="SprayFire\FileSys\FireFileSys" line="184" package="SprayFire\FileSys\FireFileSys">
        <name>generateSubDirectoryPath</name>
        <full_name>generateSubDirectoryPath</full_name>
        <docblock line="180">
          <description/>
          <long-description/>
          <tag line="180" name="param" description="" type="array" variable="$subDir">
            <type by_reference="false">array</type>
          </tag>
          <tag line="180" name="return" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="184">
          <name>$subDir</name>
          <default/>
          <type>array</type>
        </argument>
      </method>
    </class>
    <parse_markers>
      <error line="91" code="50012">No short description for method __construct()</error>
      <error line="91" code="50015">Argument $virtualHost is missing from the Docblock of __construct()</error>
      <error line="104" code="50012">No short description for method getInstallPath()</error>
      <error line="111" code="50012">No short description for method getLibsPath()</error>
      <error line="118" code="50012">No short description for method getAppPath()</error>
      <error line="125" code="50012">No short description for method getConfigPath()</error>
      <error line="132" code="50012">No short description for method getLogsPath()</error>
      <error line="168" code="50012">No short description for method generateFullPath()</error>
      <error line="180" code="50012">No short description for method generateSubDirectoryPath()</error>
    </parse_markers>
  </file>
  <file path="FileSys/FireFileSys/RootPaths.php" hash="eb77b1a6d2d6776a5df23de839a56a31" package="Default">
    <docblock line="3">
      <description>Implementation of \SprayFire\ValueObject that allows the storing of paths used
by \SprayFire\FileSys\FireFileSys\Paths</description>
      <long-description/>
      <tag line="3" name="author" description="Charles Sprayberry"/>
      <tag line="3" name="license" description="Subject to the terms of the LICENSE file in the project root"/>
      <tag line="3" name="version" description="0.1"/>
      <tag line="3" name="since" description="0.1"/>
    </docblock>
    <class final="false" abstract="false" namespace="SprayFire\FileSys\FireFileSys" line="24" package="SprayFire\FileSys\FireFileSys">
      <extends>\SprayFire\ValueObject</extends>
      <name>RootPaths</name>
      <full_name>\SprayFire\FileSys\FireFileSys\RootPaths</full_name>
      <docblock line="17">
        <description>This is a package private implementation and is intended to be used by
\SprayFire\FileSys\FireFileSys module.</description>
        <long-description/>
        <tag line="17" name="package" description="SprayFire"/>
        <tag line="17" name="subpackage" description="FileSys.FireFileSys"/>
      </docblock>
      <property final="false" static="false" visibility="protected" line="31" namespace="SprayFire\FileSys\FireFileSys" package="Default">
        <name>$install</name>
        <default/>
        <docblock line="26">
          <description>The full, absolute path to the directory holding SprayFire source.</description>
          <long-description/>
          <tag line="26" name="property" description="" type="string" variable="">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="38" namespace="SprayFire\FileSys\FireFileSys" package="Default">
        <name>$libs</name>
        <default/>
        <docblock line="33">
          <description>The full, absolute path to the directory holding SprayFire API and implementations.</description>
          <long-description/>
          <tag line="33" name="property" description="" type="string" variable="">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="45" namespace="SprayFire\FileSys\FireFileSys" package="Default">
        <name>$app</name>
        <default/>
        <docblock line="40">
          <description>The full, absolute path to the directory holding SprayFire driven applications.</description>
          <long-description/>
          <tag line="40" name="property" description="" type="string" variable="">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="52" namespace="SprayFire\FileSys\FireFileSys" package="Default">
        <name>$web</name>
        <default/>
        <docblock line="47">
          <description>The full, absolute path to the directory holding web accessible files.</description>
          <long-description/>
          <tag line="47" name="property" description="" type="string" variable="">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="59" namespace="SprayFire\FileSys\FireFileSys" package="Default">
        <name>$config</name>
        <default/>
        <docblock line="54">
          <description>The full, absolute path to the directory holding framework and app config files.</description>
          <long-description/>
          <tag line="54" name="property" description="" type="string" variable="">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="66" namespace="SprayFire\FileSys\FireFileSys" package="Default">
        <name>$logs</name>
        <default/>
        <docblock line="61">
          <description>The full, absolute path to the directory holding logs written to file.</description>
          <long-description/>
          <tag line="61" name="property" description="" type="string" variable="">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="SprayFire\FileSys\FireFileSys" line="76" package="SprayFire\FileSys\FireFileSys">
        <name>__construct</name>
        <full_name>__construct</full_name>
        <docblock line="68">
          <description/>
          <long-description/>
          <tag line="68" name="param" description="" type="string" variable="$install">
            <type by_reference="false">string</type>
          </tag>
          <tag line="68" name="param" description="" type="string" variable="$libs">
            <type by_reference="false">string</type>
          </tag>
          <tag line="68" name="param" description="" type="string" variable="$app">
            <type by_reference="false">string</type>
          </tag>
          <tag line="68" name="param" description="" type="string" variable="$web">
            <type by_reference="false">string</type>
          </tag>
          <tag line="68" name="param" description="" type="string" variable="$config">
            <type by_reference="false">string</type>
          </tag>
          <tag line="68" name="param" description="" type="string" variable="$logs">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="76">
          <name>$install</name>
          <default/>
          <type/>
        </argument>
        <argument line="76">
          <name>$libs</name>
          <default>null</default>
          <type/>
        </argument>
        <argument line="76">
          <name>$app</name>
          <default>null</default>
          <type/>
        </argument>
        <argument line="76">
          <name>$web</name>
          <default>null</default>
          <type/>
        </argument>
        <argument line="76">
          <name>$config</name>
          <default>null</default>
          <type/>
        </argument>
        <argument line="76">
          <name>$logs</name>
          <default>null</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="SprayFire\FileSys\FireFileSys" line="91" package="SprayFire\FileSys\FireFileSys">
        <name>replaceNullWithDefault</name>
        <full_name>replaceNullWithDefault</full_name>
        <docblock line="84">
          <description>Will replace any paths that aren't provided with the default path being
$install/path_name.</description>
          <long-description/>
          <tag line="84" name="param" description="&amp;$paths" type="array" variable="$paths">
            <type by_reference="false">array</type>
          </tag>
          <tag line="84" name="param" description="" type="string" variable="$install">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="91">
          <name>$paths</name>
          <default/>
          <type>array</type>
        </argument>
        <argument line="91">
          <name>$install</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="SprayFire\FileSys\FireFileSys" line="105" package="SprayFire\FileSys\FireFileSys">
        <name>toArray</name>
        <full_name>toArray</full_name>
        <docblock line="99">
          <description>Required from \SprayFire\ValueObject, required in case PHP array functions
are needed to be performed on the value object.</description>
          <long-description/>
          <tag line="99" name="return" description="" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="SprayFire\FileSys\FireFileSys" line="123" package="SprayFire\FileSys\FireFileSys">
        <name>getAccessibleProperties</name>
        <full_name>getAccessibleProperties</full_name>
        <docblock line="116">
          <description>Required from \SprayFire\ValueObject, provides the parent implementation
with details about what properties are allowed to be accessed by the
outside world.</description>
          <long-description/>
          <tag line="116" name="return" description="" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </method>
    </class>
    <parse_markers>
      <error line="68" code="50012">No short description for method __construct()</error>
    </parse_markers>
  </file>
  <file path="FileSys/PathGenerator.php" hash="0eb7183f0cc22666267391c4735626b9" package="Default">
    <docblock line="3">
      <description>Interface to create absolute paths to various SprayFire directories.</description>
      <long-description/>
      <tag line="3" name="author" description="Charles Sprayberry"/>
      <tag line="3" name="license" description="Subject to the terms of the LICENSE file in the project root"/>
      <tag line="3" name="version" description="0.1"/>
      <tag line="3" name="since" description="0.1"/>
    </docblock>
    <interface namespace="SprayFire\FileSys" line="25" package="SprayFire">
      <name>PathGenerator</name>
      <full_name>\SprayFire\FileSys\PathGenerator</full_name>
      <extends>\SprayFire\Object</extends>
      <docblock line="16">
        <description>It is expected that implementations of this interface will accept a variety of
arguments for each method; it is intended that implementations will determine
the appropriate way to allow the passing of sub-directory paths needed to
each method.</description>
        <long-description/>
        <tag line="16" name="package" description="SprayFire"/>
        <tag line="16" name="package" description="FileSys"/>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="SprayFire\FileSys" line="35" package="SprayFire">
        <name>getInstallPath</name>
        <full_name>getInstallPath</full_name>
        <docblock line="27">
          <description>Should return the root path that the app and framework is installed in;
should also accept either an array or a variable number of arguments to be
interpreted as the sub directories and/or files to append to the install
path.</description>
          <long-description/>
          <tag line="27" name="return" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="SprayFire\FileSys" line="45" package="SprayFire">
        <name>getLibsPath</name>
        <full_name>getLibsPath</full_name>
        <docblock line="37">
          <description>Should return the libs path that SprayFire and third-party libs are installed
in; should also accept either an array or a variable number of arguments
to be interpreted as the sub directories and/or files to append to the libs
path.</description>
          <long-description/>
          <tag line="37" name="return" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="SprayFire\FileSys" line="54" package="SprayFire">
        <name>getAppPath</name>
        <full_name>getAppPath</full_name>
        <docblock line="47">
          <description>Should return the app path that the app is installed in should also accept
either an array or a variable number of arguments to be interpreted as the
sub directories and/or files to append to the app path.</description>
          <long-description/>
          <tag line="47" name="return" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="SprayFire\FileSys" line="63" package="SprayFire">
        <name>getLogsPath</name>
        <full_name>getLogsPath</full_name>
        <docblock line="56">
          <description>Should return the logs path that error and stats logs should be stored in;
should also accept either an array or a variable number of arguments to be
interpreted as the sub directories and/or files to append to the logs path.</description>
          <long-description/>
          <tag line="56" name="return" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="SprayFire\FileSys" line="72" package="SprayFire">
        <name>getConfigPath</name>
        <full_name>getConfigPath</full_name>
        <docblock line="65">
          <description>Should return the config path that the configuration files are stored in;
should also accept either an array or a variable number of arguments to be
interpreted as the sub directories and/or files to append to the config path.</description>
          <long-description/>
          <tag line="65" name="return" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="SprayFire\FileSys" line="81" package="SprayFire">
        <name>getWebPath</name>
        <full_name>getWebPath</full_name>
        <docblock line="74">
          <description>Should return the web path that the web accessible files are stored in;
should also accept either an array or a variable number of arguments to be
interpreted as the sub directories and/or files to append to the web path.</description>
          <long-description/>
          <tag line="74" name="return" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="SprayFire\FileSys" line="94" package="SprayFire">
        <name>getUrlPath</name>
        <full_name>getUrlPath</full_name>
        <docblock line="83">
          <description>Should return a relative path suitable for use in HTML templates; should
also accept either an array or a variable number of arguments to be interpreted
as the sub directories and/or files to append to the web $path.</description>
          <long-description>&lt;p&gt;Ultimately this means that this function will need to return the basename
of the install path appended to the web path without the root directory
attached.&lt;/p&gt;</long-description>
          <tag line="83" name="return" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </method>
    </interface>
  </file>
  <file path="Handler.php" hash="62ecee194311fd9364ae7ef7987a5f1e" package="Default">
    <docblock line="3">
      <description>Class responsible for logging and keeping track of errors triggered.</description>
      <long-description/>
      <tag line="3" name="author" description="Charles Sprayberry"/>
      <tag line="3" name="license" description="Subject to the terms of the LICENSE file in the project root"/>
      <tag line="3" name="version" description="0.1"/>
      <tag line="3" name="since" description="0.1"/>
    </docblock>
    <class final="false" abstract="false" namespace="SprayFire" line="24" package="SprayFire">
      <extends>\SprayFire\CoreObject</extends>
      <name>Handler</name>
      <full_name>\SprayFire\Handler</full_name>
      <docblock line="18">
        <description>A universal error and exception handler designed to log various error messages and
display the appropriate 500 response when an uncaught exception occurs.</description>
        <long-description/>
        <tag line="18" name="package" description="SprayFire"/>
      </docblock>
      <property final="false" static="false" visibility="protected" line="31" namespace="SprayFire" package="Default">
        <name>$Logger</name>
        <default/>
        <docblock line="26">
          <description>Provides facilities to log error messages that are trapped.</description>
          <long-description/>
          <tag line="26" name="property" description="" type="\SprayFire\SprayFire.Logging.LogOverseer" variable="">
            <type by_reference="false">\SprayFire\SprayFire.Logging.LogOverseer</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="39" namespace="SprayFire" package="Default">
        <name>$developmentMode</name>
        <default/>
        <docblock line="33">
          <description>Used to determine whether we should log uncaught exception messages
or simply var_dump the exception out to the user.</description>
          <long-description/>
          <tag line="33" name="property" description="" type="boolean" variable="">
            <type by_reference="false">boolean</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="SprayFire" line="45" package="SprayFire">
        <name>__construct</name>
        <full_name>__construct</full_name>
        <docblock line="41">
          <description/>
          <long-description/>
          <tag line="41" name="param" description="" type="\SprayFire\Logging\LogOverseer" variable="$Log">
            <type by_reference="false">\SprayFire\Logging\LogOverseer</type>
          </tag>
          <tag line="41" name="param" description="" type="boolean" variable="$developmentModeOn">
            <type by_reference="false">boolean</type>
          </tag>
        </docblock>
        <argument line="45">
          <name>$Log</name>
          <default/>
          <type>\SprayFire\Logging\LogOverseer</type>
        </argument>
        <argument line="45">
          <name>$developmentModeOn</name>
          <default>false</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="SprayFire" line="58" package="SprayFire">
        <name>trapError</name>
        <full_name>trapError</full_name>
        <docblock line="50">
          <description/>
          <long-description/>
          <tag line="50" name="param" description="int representing an error level constant" type="int" variable="$severity">
            <type by_reference="false">int</type>
          </tag>
          <tag line="50" name="param" description="string representing an error message" type="string" variable="$message">
            <type by_reference="false">string</type>
          </tag>
          <tag line="50" name="param" description="string representing the file the error occurred in" type="string" variable="$file">
            <type by_reference="false">string</type>
          </tag>
          <tag line="50" name="param" description="int the line that triggered the error in $file" type="int" variable="$line">
            <type by_reference="false">int</type>
          </tag>
          <tag line="50" name="param" description="an array of variables available at time of error" type="array" variable="$context">
            <type by_reference="false">array</type>
          </tag>
          <tag line="50" name="return" description="" type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
        </docblock>
        <argument line="58">
          <name>$severity</name>
          <default/>
          <type/>
        </argument>
        <argument line="58">
          <name>$message</name>
          <default/>
          <type/>
        </argument>
        <argument line="58">
          <name>$file</name>
          <default>null</default>
          <type/>
        </argument>
        <argument line="58">
          <name>$line</name>
          <default>null</default>
          <type/>
        </argument>
        <argument line="58">
          <name>$context</name>
          <default>null</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="SprayFire" line="87" package="SprayFire">
        <name>trapException</name>
        <full_name>trapException</full_name>
        <docblock line="74">
          <description>Traps uncaught exceptions and spits out an appropriate 500 response.</description>
          <long-description>&lt;p&gt;All script execution is halted after this function is invoked.&lt;/p&gt;</long-description>
          <tag line="74" name="param" description="" type="\Exception" variable="$Exception">
            <type by_reference="false">\Exception</type>
          </tag>
          <tag line="74" name="codeCoverageIgnore" description=""/>
          <tag line="74" name="todo" description="We need to take a look at some way we can allow custom 500 responses to&#10;be sent."/>
        </docblock>
        <argument line="87">
          <name>$Exception</name>
          <default/>
          <type>\Exception</type>
        </argument>
      </method>
    </class>
    <parse_markers>
      <error line="41" code="50012">No short description for method __construct()</error>
      <error line="50" code="50012">No short description for method trapError()</error>
    </parse_markers>
  </file>
  <file path="Http/FireHttp/Request.php" hash="4501dd24f6df7d4afdd5714f4490cf66" package="Default">
    <docblock line="3">
      <description>Implementation of SprayFire.Http.Request designed to work with an Apache server.</description>
      <long-description/>
      <tag line="3" name="author" description="Charles Sprayberry"/>
      <tag line="3" name="license" description="Subject to the terms of the LICENSE file in the project root"/>
      <tag line="3" name="version" description="0.1"/>
      <tag line="3" name="since" description="0.1"/>
    </docblock>
    <class final="false" abstract="false" namespace="SprayFire\Http\FireHttp" line="27" package="SprayFire\Http\FireHttp">
      <extends>\SprayFire\CoreObject</extends>
      <implements>\SprayFire\Http\Request</implements>
      <name>Request</name>
      <full_name>\SprayFire\Http\FireHttp\Request</full_name>
      <docblock line="17">
        <description>This implementation is specifically designed to work with common indexes available
to the superglobal $_SERVER.</description>
        <long-description>&lt;p&gt;This superglobal is known to be populated with the appropriate values on Apache
servers but has not been tested on other servers.&lt;/p&gt;</long-description>
        <tag line="17" name="package" description="SprayFire"/>
        <tag line="17" name="subpackage" description="Http.FireHttp"/>
      </docblock>
      <property final="false" static="false" visibility="protected" line="32" namespace="SprayFire\Http\FireHttp" package="Default">
        <name>$Uri</name>
        <default/>
        <docblock line="29">
          <description/>
          <long-description/>
          <tag line="29" name="property" description="" type="\SprayFire\Http\FireHttp\SprayFire.Http.Uri" variable="">
            <type by_reference="false">\SprayFire\Http\FireHttp\SprayFire.Http.Uri</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="37" namespace="SprayFire\Http\FireHttp" package="Default">
        <name>$Headers</name>
        <default/>
        <docblock line="34">
          <description/>
          <long-description/>
          <tag line="34" name="property" description="" type="\SprayFire\Http\FireHttp\SprayFire.Http.RequestHeaders" variable="">
            <type by_reference="false">\SprayFire\Http\FireHttp\SprayFire.Http.RequestHeaders</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="42" namespace="SprayFire\Http\FireHttp" package="Default">
        <name>$method</name>
        <default/>
        <docblock line="39">
          <description/>
          <long-description/>
          <tag line="39" name="property" description="" type="string" variable="">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="47" namespace="SprayFire\Http\FireHttp" package="Default">
        <name>$version</name>
        <default/>
        <docblock line="44">
          <description/>
          <long-description/>
          <tag line="44" name="property" description="" type="string" variable="">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="SprayFire\Http\FireHttp" line="54" package="SprayFire\Http\FireHttp">
        <name>__construct</name>
        <full_name>__construct</full_name>
        <docblock line="49">
          <description/>
          <long-description/>
          <tag line="49" name="param" description="" type="\SprayFire\Http\Uri" variable="$Uri">
            <type by_reference="false">\SprayFire\Http\Uri</type>
          </tag>
          <tag line="49" name="param" description="" type="\SprayFire\Http\RequestHeaders" variable="$Headers">
            <type by_reference="false">\SprayFire\Http\RequestHeaders</type>
          </tag>
          <tag line="49" name="param" description="" type="array" variable="$_server">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
        <argument line="54">
          <name>$Uri</name>
          <default/>
          <type>\SprayFire\Http\Uri</type>
        </argument>
        <argument line="54">
          <name>$Headers</name>
          <default/>
          <type>\SprayFire\Http\RequestHeaders</type>
        </argument>
        <argument line="54">
          <name>$_server</name>
          <default>null</default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="SprayFire\Http\FireHttp" line="68" package="SprayFire\Http\FireHttp">
        <name>parseMethodAndVersion</name>
        <full_name>parseMethodAndVersion</full_name>
        <docblock line="61">
          <description>Will set the appropriate $version and $method based on the values from the
passed configuration, if the values could not be found then the method is
defaulted to GET and the HTTP version is set to a blank value.</description>
          <long-description/>
          <tag line="61" name="param" description="" type="array" variable="$_server">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
        <argument line="68">
          <name>$_server</name>
          <default/>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="SprayFire\Http\FireHttp" line="80" package="SprayFire\Http\FireHttp">
        <name>getHeaders</name>
        <full_name>getHeaders</full_name>
        <docblock line="77">
          <description/>
          <long-description/>
          <tag line="77" name="return" description="" type="\SprayFire\Http\RequestHeaders">
            <type by_reference="false">\SprayFire\Http\RequestHeaders</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="SprayFire\Http\FireHttp" line="89" package="SprayFire\Http\FireHttp">
        <name>getMethod</name>
        <full_name>getMethod</full_name>
        <docblock line="84">
          <description>The string returned will always be in UPPER CASE letters</description>
          <long-description/>
          <tag line="84" name="return" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="SprayFire\Http\FireHttp" line="96" package="SprayFire\Http\FireHttp">
        <name>getUri</name>
        <full_name>getUri</full_name>
        <docblock line="93">
          <description/>
          <long-description/>
          <tag line="93" name="return" description="" type="\SprayFire\Http\Uri">
            <type by_reference="false">\SprayFire\Http\Uri</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="SprayFire\Http\FireHttp" line="105" package="SprayFire\Http\FireHttp">
        <name>getVersion</name>
        <full_name>getVersion</full_name>
        <docblock line="100">
          <description>This string will be returned as a string with a x.x decimal format.</description>
          <long-description/>
          <tag line="100" name="return" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </method>
    </class>
    <parse_markers>
      <critical line="29" code="50019">No short description for property $Uri</critical>
      <critical line="34" code="50019">No short description for property $Headers</critical>
      <critical line="39" code="50019">No short description for property $method</critical>
      <critical line="44" code="50019">No short description for property $version</critical>
      <error line="49" code="50012">No short description for method __construct()</error>
      <error line="77" code="50012">No short description for method getHeaders()</error>
      <error line="93" code="50012">No short description for method getUri()</error>
    </parse_markers>
  </file>
  <file path="Http/FireHttp/RequestHeaders.php" hash="9739fc04089b6798403dad0798e8482a" package="Default">
    <docblock line="3">
      <description>Implementation of SprayFire.Http.RequestHeaders designed to work with an
Apache server.</description>
      <long-description/>
      <tag line="3" name="author" description="Charles Sprayberry"/>
      <tag line="3" name="license" description="Subject to the terms of the LICENSE file in the project root"/>
      <tag line="3" name="version" description="0.1"/>
      <tag line="3" name="since" description="0.1"/>
    </docblock>
    <class final="false" abstract="false" namespace="SprayFire\Http\FireHttp" line="30" package="SprayFire\Http\FireHttp">
      <extends>\SprayFire\CoreObject</extends>
      <implements>\SprayFire\Http\RequestHeaders</implements>
      <name>RequestHeaders</name>
      <full_name>\SprayFire\Http\FireHttp\RequestHeaders</full_name>
      <docblock line="18">
        <description>Will determine the appropriate HTTP request headers based on common indices
found in the superglobal $_SERVER.</description>
        <long-description>&lt;p&gt;This implementation is known to work with Apache servers but may not work with
others if that server does not properly populate the $_SERVER superglobal with
the appropriate indices.&lt;/p&gt;</long-description>
        <tag line="18" name="package" description="SprayFire"/>
        <tag line="18" name="subpackage" description="Http.FireHttp"/>
      </docblock>
      <property final="false" static="false" visibility="protected" line="35" namespace="SprayFire\Http\FireHttp" package="Default">
        <name>$acceptCharset</name>
        <default>''</default>
        <docblock line="32">
          <description/>
          <long-description/>
          <tag line="32" name="property" description="" type="string" variable="">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="40" namespace="SprayFire\Http\FireHttp" package="Default">
        <name>$acceptEncoding</name>
        <default>''</default>
        <docblock line="37">
          <description/>
          <long-description/>
          <tag line="37" name="property" description="" type="string" variable="">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="45" namespace="SprayFire\Http\FireHttp" package="Default">
        <name>$acceptLanguage</name>
        <default>''</default>
        <docblock line="42">
          <description/>
          <long-description/>
          <tag line="42" name="property" description="" type="string" variable="">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="50" namespace="SprayFire\Http\FireHttp" package="Default">
        <name>$acceptType</name>
        <default>''</default>
        <docblock line="47">
          <description/>
          <long-description/>
          <tag line="47" name="property" description="" type="string" variable="">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="55" namespace="SprayFire\Http\FireHttp" package="Default">
        <name>$cacheControl</name>
        <default>''</default>
        <docblock line="52">
          <description/>
          <long-description/>
          <tag line="52" name="property" description="" type="string" variable="">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="60" namespace="SprayFire\Http\FireHttp" package="Default">
        <name>$connectionType</name>
        <default>''</default>
        <docblock line="57">
          <description/>
          <long-description/>
          <tag line="57" name="property" description="" type="string" variable="">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="65" namespace="SprayFire\Http\FireHttp" package="Default">
        <name>$host</name>
        <default>''</default>
        <docblock line="62">
          <description/>
          <long-description/>
          <tag line="62" name="property" description="" type="string" variable="">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="70" namespace="SprayFire\Http\FireHttp" package="Default">
        <name>$referer</name>
        <default>''</default>
        <docblock line="67">
          <description/>
          <long-description/>
          <tag line="67" name="property" description="" type="string" variable="">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="75" namespace="SprayFire\Http\FireHttp" package="Default">
        <name>$userAgent</name>
        <default>''</default>
        <docblock line="72">
          <description/>
          <long-description/>
          <tag line="72" name="property" description="" type="string" variable="">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="80" namespace="SprayFire\Http\FireHttp" package="Default">
        <name>$xRequestedWith</name>
        <default>''</default>
        <docblock line="77">
          <description/>
          <long-description/>
          <tag line="77" name="property" description="" type="string" variable="">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="85" namespace="SprayFire\Http\FireHttp" package="Default">
        <name>$serverToHeadersMap</name>
        <default>array('HTTP_HOST' =&gt; 'host', 'HTTP_CONNECTION' =&gt; 'connectionType', 'HTTP_CACHE_CONTROL' =&gt; 'cacheControl', 'HTTP_USER_AGENT' =&gt; 'userAgent', 'HTTP_ACCEPT' =&gt; 'acceptType', 'HTTP_ACCEPT_CHARSET' =&gt; 'acceptCharset', 'HTTP_ACCEPT_ENCODING' =&gt; 'acceptEncoding', 'HTTP_ACCEPT_LANGUAGE' =&gt; 'acceptLanguage', 'HTTP_REFERER' =&gt; 'referer', 'HTTP_X_REQUESTED_WITH' =&gt; 'xRequestedWith')</default>
        <docblock line="82">
          <description/>
          <long-description/>
          <tag line="82" name="property" description="" type="array" variable="">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="SprayFire\Http\FireHttp" line="105" package="SprayFire\Http\FireHttp">
        <name>__construct</name>
        <full_name>__construct</full_name>
        <docblock line="99">
          <description>The $_server parameter is optional, if it is not provided the superglobal
$_SERVER will be used to parse the various pieces of information.</description>
          <long-description/>
          <tag line="99" name="param" description="" type="array" variable="$_server">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
        <argument line="105">
          <name>$_server</name>
          <default>null</default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="SprayFire\Http\FireHttp" line="119" package="SprayFire\Http\FireHttp">
        <name>getAcceptCharset</name>
        <full_name>getAcceptCharset</full_name>
        <docblock line="116">
          <description/>
          <long-description/>
          <tag line="116" name="return" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="SprayFire\Http\FireHttp" line="126" package="SprayFire\Http\FireHttp">
        <name>getAcceptEncoding</name>
        <full_name>getAcceptEncoding</full_name>
        <docblock line="123">
          <description/>
          <long-description/>
          <tag line="123" name="return" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="SprayFire\Http\FireHttp" line="133" package="SprayFire\Http\FireHttp">
        <name>getAcceptLanguage</name>
        <full_name>getAcceptLanguage</full_name>
        <docblock line="130">
          <description/>
          <long-description/>
          <tag line="130" name="return" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="SprayFire\Http\FireHttp" line="140" package="SprayFire\Http\FireHttp">
        <name>getAcceptType</name>
        <full_name>getAcceptType</full_name>
        <docblock line="137">
          <description/>
          <long-description/>
          <tag line="137" name="return" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="SprayFire\Http\FireHttp" line="147" package="SprayFire\Http\FireHttp">
        <name>getCacheControl</name>
        <full_name>getCacheControl</full_name>
        <docblock line="144">
          <description/>
          <long-description/>
          <tag line="144" name="return" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="SprayFire\Http\FireHttp" line="154" package="SprayFire\Http\FireHttp">
        <name>getConnectionType</name>
        <full_name>getConnectionType</full_name>
        <docblock line="151">
          <description/>
          <long-description/>
          <tag line="151" name="return" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="SprayFire\Http\FireHttp" line="161" package="SprayFire\Http\FireHttp">
        <name>getHost</name>
        <full_name>getHost</full_name>
        <docblock line="158">
          <description/>
          <long-description/>
          <tag line="158" name="return" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="SprayFire\Http\FireHttp" line="168" package="SprayFire\Http\FireHttp">
        <name>getReferer</name>
        <full_name>getReferer</full_name>
        <docblock line="165">
          <description/>
          <long-description/>
          <tag line="165" name="return" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="SprayFire\Http\FireHttp" line="175" package="SprayFire\Http\FireHttp">
        <name>getUserAgent</name>
        <full_name>getUserAgent</full_name>
        <docblock line="172">
          <description/>
          <long-description/>
          <tag line="172" name="return" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="SprayFire\Http\FireHttp" line="182" package="SprayFire\Http\FireHttp">
        <name>isAjaxRequest</name>
        <full_name>isAjaxRequest</full_name>
        <docblock line="179">
          <description/>
          <long-description/>
          <tag line="179" name="return" description="" type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
        </docblock>
      </method>
    </class>
    <parse_markers>
      <critical line="32" code="50019">No short description for property $acceptCharset</critical>
      <critical line="37" code="50019">No short description for property $acceptEncoding</critical>
      <critical line="42" code="50019">No short description for property $acceptLanguage</critical>
      <critical line="47" code="50019">No short description for property $acceptType</critical>
      <critical line="52" code="50019">No short description for property $cacheControl</critical>
      <critical line="57" code="50019">No short description for property $connectionType</critical>
      <critical line="62" code="50019">No short description for property $host</critical>
      <critical line="67" code="50019">No short description for property $referer</critical>
      <critical line="72" code="50019">No short description for property $userAgent</critical>
      <critical line="77" code="50019">No short description for property $xRequestedWith</critical>
      <critical line="82" code="50019">No short description for property $serverToHeadersMap</critical>
      <error line="116" code="50012">No short description for method getAcceptCharset()</error>
      <error line="123" code="50012">No short description for method getAcceptEncoding()</error>
      <error line="130" code="50012">No short description for method getAcceptLanguage()</error>
      <error line="137" code="50012">No short description for method getAcceptType()</error>
      <error line="144" code="50012">No short description for method getCacheControl()</error>
      <error line="151" code="50012">No short description for method getConnectionType()</error>
      <error line="158" code="50012">No short description for method getHost()</error>
      <error line="165" code="50012">No short description for method getReferer()</error>
      <error line="172" code="50012">No short description for method getUserAgent()</error>
      <error line="179" code="50012">No short description for method isAjaxRequest()</error>
    </parse_markers>
  </file>
  <file path="Http/FireHttp/Uri.php" hash="7141dbd7d9f3efde84ef8738cb75a68e" package="Default">
    <docblock line="3">
      <description>Implementation of SprayFire.Http.Uri provided by the default SprayFire install.</description>
      <long-description/>
      <tag line="3" name="author" description="Charles Sprayberry"/>
      <tag line="3" name="license" description="Subject to the terms of the LICENSE file in the project root"/>
      <tag line="3" name="version" description="0.1"/>
      <tag line="3" name="since" description="0.1"/>
    </docblock>
    <class final="false" abstract="false" namespace="SprayFire\Http\FireHttp" line="29" package="SprayFire\Http\FireHttp">
      <extends>\SprayFire\CoreObject</extends>
      <implements>\SprayFire\Http\Uri</implements>
      <name>Uri</name>
      <full_name>\SprayFire\Http\FireHttp\Uri</full_name>
      <docblock line="18">
        <description>This implementation is designed to gather information about the HTTP URI from
the superglobal $_SERVER variable.</description>
        <long-description>&lt;p&gt;This implementation is known to work with Apache servers but may not work on
servers that do not properly populate the $_SERVER superglobal with the appropriate
values.&lt;/p&gt;</long-description>
        <tag line="18" name="package" description="SprayFire"/>
        <tag line="18" name="subpackage" description="Http.FireHttp"/>
      </docblock>
      <property final="false" static="false" visibility="protected" line="34" namespace="SprayFire\Http\FireHttp" package="Default">
        <name>$authority</name>
        <default>''</default>
        <docblock line="31">
          <description/>
          <long-description/>
          <tag line="31" name="property" description="" type="string" variable="">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="39" namespace="SprayFire\Http\FireHttp" package="Default">
        <name>$path</name>
        <default>''</default>
        <docblock line="36">
          <description/>
          <long-description/>
          <tag line="36" name="property" description="" type="string" variable="">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="44" namespace="SprayFire\Http\FireHttp" package="Default">
        <name>$port</name>
        <default>80</default>
        <docblock line="41">
          <description/>
          <long-description/>
          <tag line="41" name="property" description="" type="int" variable="">
            <type by_reference="false">int</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="49" namespace="SprayFire\Http\FireHttp" package="Default">
        <name>$query</name>
        <default>''</default>
        <docblock line="46">
          <description/>
          <long-description/>
          <tag line="46" name="property" description="" type="string" variable="">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="54" namespace="SprayFire\Http\FireHttp" package="Default">
        <name>$scheme</name>
        <default>''</default>
        <docblock line="51">
          <description/>
          <long-description/>
          <tag line="51" name="property" description="" type="string" variable="">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="SprayFire\Http\FireHttp" line="62" package="SprayFire\Http\FireHttp">
        <name>__construct</name>
        <full_name>__construct</full_name>
        <docblock line="56">
          <description>If $_server is null then the $_SERVER superglobal will be used to parse the
URI fragments.</description>
          <long-description/>
          <tag line="56" name="param" description="" type="array" variable="$_server">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
        <argument line="62">
          <name>$_server</name>
          <default>null</default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="SprayFire\Http\FireHttp" line="73" package="SprayFire\Http\FireHttp">
        <name>parseParameters</name>
        <full_name>parseParameters</full_name>
        <docblock line="67">
          <description>After calling this method all class properties will be properly set to the
values, if present, in $_server.</description>
          <long-description/>
          <tag line="67" name="param" description="" type="array" variable="$_server">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
        <argument line="73">
          <name>$_server</name>
          <default/>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="SprayFire\Http\FireHttp" line="105" package="SprayFire\Http\FireHttp">
        <name>getAuthority</name>
        <full_name>getAuthority</full_name>
        <docblock line="102">
          <description/>
          <long-description/>
          <tag line="102" name="return" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="SprayFire\Http\FireHttp" line="112" package="SprayFire\Http\FireHttp">
        <name>getPath</name>
        <full_name>getPath</full_name>
        <docblock line="109">
          <description/>
          <long-description/>
          <tag line="109" name="return" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="SprayFire\Http\FireHttp" line="119" package="SprayFire\Http\FireHttp">
        <name>getPort</name>
        <full_name>getPort</full_name>
        <docblock line="116">
          <description/>
          <long-description/>
          <tag line="116" name="return" description="" type="int">
            <type by_reference="false">int</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="SprayFire\Http\FireHttp" line="126" package="SprayFire\Http\FireHttp">
        <name>getQuery</name>
        <full_name>getQuery</full_name>
        <docblock line="123">
          <description/>
          <long-description/>
          <tag line="123" name="return" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="SprayFire\Http\FireHttp" line="133" package="SprayFire\Http\FireHttp">
        <name>getScheme</name>
        <full_name>getScheme</full_name>
        <docblock line="130">
          <description/>
          <long-description/>
          <tag line="130" name="return" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="SprayFire\Http\FireHttp" line="143" package="SprayFire\Http\FireHttp">
        <name>__toString</name>
        <full_name>__toString</full_name>
        <docblock line="137">
          <description>Overridden from SprayFire.CoreObject to ensure that the string version of
the parsed HTTP URI is returned and not an object hash code.</description>
          <long-description/>
          <tag line="137" name="return" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="SprayFire\Http\FireHttp" line="160" package="SprayFire\Http\FireHttp">
        <name>equals</name>
        <full_name>equals</full_name>
        <docblock line="151">
          <description>Overrides \SprayFire\CoreObject to ensure that objects compared to this
implementation for equality does not care if they are the same object
but whether or not the appropriate stringified URI is the same as the object
being compared to.</description>
          <long-description/>
          <tag line="151" name="param" description="" type="\SprayFire\Object" variable="$Object">
            <type by_reference="false">\SprayFire\Object</type>
          </tag>
          <tag line="151" name="return" description="" type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
        </docblock>
        <argument line="160">
          <name>$Object</name>
          <default/>
          <type>\SprayFire\Object</type>
        </argument>
      </method>
    </class>
    <parse_markers>
      <critical line="31" code="50019">No short description for property $authority</critical>
      <critical line="36" code="50019">No short description for property $path</critical>
      <critical line="41" code="50019">No short description for property $port</critical>
      <critical line="46" code="50019">No short description for property $query</critical>
      <critical line="51" code="50019">No short description for property $scheme</critical>
      <error line="102" code="50012">No short description for method getAuthority()</error>
      <error line="109" code="50012">No short description for method getPath()</error>
      <error line="116" code="50012">No short description for method getPort()</error>
      <error line="123" code="50012">No short description for method getQuery()</error>
      <error line="130" code="50012">No short description for method getScheme()</error>
    </parse_markers>
  </file>
  <file path="Http/Request.php" hash="9e34694b95cdd6afa72cfd05507a2efe" package="Default">
    <docblock line="3">
      <description>Interface that represents an HTTP request provided by the user to retrieve a
specific resource.</description>
      <long-description/>
      <tag line="3" name="author" description="Charles Sprayberry"/>
      <tag line="3" name="license" description="Subject to the terms of the LICENSE file in the project root"/>
      <tag line="3" name="version" description="0.1"/>
      <tag line="3" name="since" description="0.1"/>
    </docblock>
    <interface namespace="SprayFire\Http" line="25" package="SprayFire\Http">
      <name>Request</name>
      <full_name>\SprayFire\Http\Request</full_name>
      <extends>\SprayFire\Object</extends>
      <docblock line="17">
        <description>It is important to note that implementations of this interface need to return
other interfaces in the SprayFire.Http module; please check out the rest of
this module if you intend on implementing this interface yourself.</description>
        <long-description/>
        <tag line="17" name="package" description="SprayFire"/>
        <tag line="17" name="subpackage" description="Http"/>
      </docblock>
      <constant namespace="SprayFire\Http" line="27" package="SprayFire\Http">
        <name>METHOD_OPTIONS</name>
        <full_name>METHOD_OPTIONS</full_name>
        <value>'OPTIONS'</value>
      </constant>
      <constant namespace="SprayFire\Http" line="29" package="SprayFire\Http">
        <name>METHOD_GET</name>
        <full_name>METHOD_GET</full_name>
        <value>'GET'</value>
      </constant>
      <constant namespace="SprayFire\Http" line="31" package="SprayFire\Http">
        <name>METHOD_HEAD</name>
        <full_name>METHOD_HEAD</full_name>
        <value>'HEAD'</value>
      </constant>
      <constant namespace="SprayFire\Http" line="33" package="SprayFire\Http">
        <name>METHOD_POST</name>
        <full_name>METHOD_POST</full_name>
        <value>'POST'</value>
      </constant>
      <constant namespace="SprayFire\Http" line="35" package="SprayFire\Http">
        <name>METHOD_PUT</name>
        <full_name>METHOD_PUT</full_name>
        <value>'PUT'</value>
      </constant>
      <constant namespace="SprayFire\Http" line="37" package="SprayFire\Http">
        <name>METHOD_DELETE</name>
        <full_name>METHOD_DELETE</full_name>
        <value>'DELETE'</value>
      </constant>
      <constant namespace="SprayFire\Http" line="39" package="SprayFire\Http">
        <name>METHOD_TRACE</name>
        <full_name>METHOD_TRACE</full_name>
        <value>'TRACE'</value>
      </constant>
      <method final="false" abstract="false" static="false" visibility="public" namespace="SprayFire\Http" line="44" package="SprayFire\Http">
        <name>getUri</name>
        <full_name>getUri</full_name>
        <docblock line="41">
          <description/>
          <long-description/>
          <tag line="41" name="return" description="" type="\SprayFire\Http\Uri">
            <type by_reference="false">\SprayFire\Http\Uri</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="SprayFire\Http" line="49" package="SprayFire\Http">
        <name>getHeaders</name>
        <full_name>getHeaders</full_name>
        <docblock line="46">
          <description/>
          <long-description/>
          <tag line="46" name="return" description="" type="\SprayFire\Http\RequestHeaders">
            <type by_reference="false">\SprayFire\Http\RequestHeaders</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="SprayFire\Http" line="54" package="SprayFire\Http">
        <name>getMethod</name>
        <full_name>getMethod</full_name>
        <docblock line="51">
          <description/>
          <long-description/>
          <tag line="51" name="return" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="SprayFire\Http" line="59" package="SprayFire\Http">
        <name>getVersion</name>
        <full_name>getVersion</full_name>
        <docblock line="56">
          <description/>
          <long-description/>
          <tag line="56" name="return" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </method>
    </interface>
    <parse_markers>
      <error line="41" code="50012">No short description for method getUri()</error>
      <error line="46" code="50012">No short description for method getHeaders()</error>
      <error line="51" code="50012">No short description for method getMethod()</error>
      <error line="56" code="50012">No short description for method getVersion()</error>
    </parse_markers>
  </file>
  <file path="Http/RequestHeaders.php" hash="4142098816ed54dde190261a05abee8c" package="Default">
    <docblock line="3">
      <description>Interface representing data in the HTTP request headers.</description>
      <long-description/>
      <tag line="3" name="author" description="Charles Sprayberry"/>
      <tag line="3" name="license" description="Subject to the terms of the LICENSE file in the project root"/>
      <tag line="3" name="version" description="0.1"/>
      <tag line="3" name="since" description="0.1"/>
    </docblock>
    <interface namespace="SprayFire\Http" line="23" package="SprayFire\Http">
      <name>RequestHeaders</name>
      <full_name>\SprayFire\Http\RequestHeaders</full_name>
      <extends>\SprayFire\Object</extends>
      <docblock line="16">
        <description>Implementations of this interface should be returned from
SprayFire.Http.Request::getHeaders.</description>
        <long-description/>
        <tag line="16" name="package" description="SprayFire"/>
        <tag line="16" name="subpackage" description="Http"/>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="SprayFire\Http" line="28" package="SprayFire\Http">
        <name>getHost</name>
        <full_name>getHost</full_name>
        <docblock line="25">
          <description/>
          <long-description/>
          <tag line="25" name="return" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="SprayFire\Http" line="33" package="SprayFire\Http">
        <name>getConnectionType</name>
        <full_name>getConnectionType</full_name>
        <docblock line="30">
          <description/>
          <long-description/>
          <tag line="30" name="return" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="SprayFire\Http" line="38" package="SprayFire\Http">
        <name>getCacheControl</name>
        <full_name>getCacheControl</full_name>
        <docblock line="35">
          <description/>
          <long-description/>
          <tag line="35" name="return" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="SprayFire\Http" line="43" package="SprayFire\Http">
        <name>getUserAgent</name>
        <full_name>getUserAgent</full_name>
        <docblock line="40">
          <description/>
          <long-description/>
          <tag line="40" name="return" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="SprayFire\Http" line="48" package="SprayFire\Http">
        <name>getAcceptType</name>
        <full_name>getAcceptType</full_name>
        <docblock line="45">
          <description/>
          <long-description/>
          <tag line="45" name="return" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="SprayFire\Http" line="53" package="SprayFire\Http">
        <name>getAcceptEncoding</name>
        <full_name>getAcceptEncoding</full_name>
        <docblock line="50">
          <description/>
          <long-description/>
          <tag line="50" name="return" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="SprayFire\Http" line="58" package="SprayFire\Http">
        <name>getAcceptLanguage</name>
        <full_name>getAcceptLanguage</full_name>
        <docblock line="55">
          <description/>
          <long-description/>
          <tag line="55" name="return" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="SprayFire\Http" line="63" package="SprayFire\Http">
        <name>getAcceptCharset</name>
        <full_name>getAcceptCharset</full_name>
        <docblock line="60">
          <description/>
          <long-description/>
          <tag line="60" name="return" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="SprayFire\Http" line="68" package="SprayFire\Http">
        <name>getReferer</name>
        <full_name>getReferer</full_name>
        <docblock line="65">
          <description/>
          <long-description/>
          <tag line="65" name="return" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="SprayFire\Http" line="73" package="SprayFire\Http">
        <name>isAjaxRequest</name>
        <full_name>isAjaxRequest</full_name>
        <docblock line="70">
          <description/>
          <long-description/>
          <tag line="70" name="return" description="" type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
        </docblock>
      </method>
    </interface>
    <parse_markers>
      <error line="25" code="50012">No short description for method getHost()</error>
      <error line="30" code="50012">No short description for method getConnectionType()</error>
      <error line="35" code="50012">No short description for method getCacheControl()</error>
      <error line="40" code="50012">No short description for method getUserAgent()</error>
      <error line="45" code="50012">No short description for method getAcceptType()</error>
      <error line="50" code="50012">No short description for method getAcceptEncoding()</error>
      <error line="55" code="50012">No short description for method getAcceptLanguage()</error>
      <error line="60" code="50012">No short description for method getAcceptCharset()</error>
      <error line="65" code="50012">No short description for method getReferer()</error>
      <error line="70" code="50012">No short description for method isAjaxRequest()</error>
    </parse_markers>
  </file>
  <file path="Http/Routing/Exception/DuplicateRouteAdded.php" hash="50eea60df87693ba8af70f8b1b286e6c" package="Default">
    <docblock line="3">
      <description>Exception thrown if a Route pattern has already been added to the bag.</description>
      <long-description/>
      <tag line="3" name="author" description="Charles Sprayberry"/>
      <tag line="3" name="license" description="Subject to the terms of the LICENSE file in the project root"/>
      <tag line="3" name="version" description="0.1"/>
      <tag line="3" name="since" description="0.1"/>
    </docblock>
    <class final="false" abstract="false" namespace="SprayFire\Http\Routing\Exception" line="19" package="SprayFire\Http\Routing\Exception">
      <extends>\RuntimeException</extends>
      <name>DuplicateRouteAdded</name>
      <full_name>\SprayFire\Http\Routing\Exception\DuplicateRouteAdded</full_name>
      <docblock line="15">
        <description/>
        <long-description/>
        <tag line="15" name="package" description="SprayFire"/>
        <tag line="15" name="subpackage" description="Http.Routing.Exception"/>
      </docblock>
    </class>
    <parse_markers>
      <critical line="15" code="50005">No short description for class \SprayFire\Http\Routing\Exception\DuplicateRouteAdded</critical>
    </parse_markers>
  </file>
  <file path="Http/Routing/FireRouting/ConfigurationMatchStrategy.php" hash="562f34e1c452ee3a9a5216904b55e717" package="Default">
    <docblock line="3">
      <description>An implementation of \SprayFire\Http\Routing\FireRouting\MatchStrategy that
will only match a route based on a configuration.</description>
      <long-description/>
      <tag line="3" name="author" description="Charles Sprayberry"/>
      <tag line="3" name="license" description="Subject to the terms of the LICENSE file in the project root"/>
      <tag line="3" name="version" description="0.1"/>
      <tag line="3" name="since" description="0.1"/>
    </docblock>
    <class final="false" abstract="false" namespace="SprayFire\Http\Routing\FireRouting" line="28" package="SprayFire\Http\Routing\FireRouting">
      <extends>\SprayFire\Http\Routing\FireRouting\MatchStrategy</extends>
      <name>ConfigurationMatchStrategy</name>
      <full_name>\SprayFire\Http\Routing\FireRouting\ConfigurationMatchStrategy</full_name>
      <docblock line="17">
        <description>If a $Route is not matched to the request's URI path the default $Route for the
bag passed will be used.</description>
        <long-description>&lt;p&gt;A $Route is considered matched to a request's URI path with a regular expression
check. The pattern from the $Route is checked against the string strictly ensuring
that the beginning and end of the path matches the pattern exactly.&lt;/p&gt;</long-description>
        <tag line="17" name="package" description="SprayFire"/>
        <tag line="17" name="subpackage" description="Http.Routing.FireRouting"/>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="SprayFire\Http\Routing\FireRouting" line="35" package="SprayFire\Http\Routing\FireRouting">
        <name>getRouteAndParameters</name>
        <full_name>getRouteAndParameters</full_name>
        <docblock line="30">
          <description/>
          <long-description/>
          <tag line="30" name="param" description="" type="\SprayFire\Http\Routing\RouteBag" variable="$Bag">
            <type by_reference="false">\SprayFire\Http\Routing\RouteBag</type>
          </tag>
          <tag line="30" name="param" description="" type="\SprayFire\Http\Request" variable="$Request">
            <type by_reference="false">\SprayFire\Http\Request</type>
          </tag>
          <tag line="30" name="return" description="" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
        <argument line="35">
          <name>$Bag</name>
          <default/>
          <type>\SprayFire\Http\Routing\RouteBag</type>
        </argument>
        <argument line="35">
          <name>$Request</name>
          <default/>
          <type>\SprayFire\Http\Request</type>
        </argument>
      </method>
    </class>
    <parse_markers>
      <error line="30" code="50012">No short description for method getRouteAndParameters()</error>
    </parse_markers>
  </file>
  <file path="Http/Routing/FireRouting/ConventionMatchStrategy.php" hash="60015ce74d87464ed6866009d1829906" package="Default">
    <docblock line="3">
      <description>Implementation of \SprayFire\Http\Routing\MatchStrategy that will determine a
Route based on a convention of how to parse a pretty URL.</description>
      <long-description/>
      <tag line="3" name="author" description="Charles Sprayberry"/>
      <tag line="3" name="license" description="Subject to the terms of the LICENSE file in the project root"/>
      <tag line="3" name="version" description="0.1"/>
      <tag line="3" name="since" description="0.1"/>
    </docblock>
    <class final="false" abstract="false" namespace="SprayFire\Http\Routing\FireRouting" line="42" package="SprayFire\Http\Routing\FireRouting">
      <extends>\SprayFire\Http\Routing\FireRouting\MatchStrategy</extends>
      <name>ConventionMatchStrategy</name>
      <full_name>\SprayFire\Http\Routing\FireRouting\ConventionMatchStrategy</full_name>
      <docblock line="17">
        <description>This implementation will take a pretty URL and split it into the appropriate
controller, action and parameters to use for a returned \SprayFire\Http\Routing\Route.</description>
        <long-description>&lt;p&gt;The format of pretty URLs mapping to the appropriate information is below. It
is fairly common in the web framework world:&lt;/p&gt;

&lt;p&gt;/controller/action/param1/param2&lt;/p&gt;

&lt;p&gt;Optionally parameters can be named by separating the parameter key and the value
by a colon:&lt;/p&gt;

&lt;p&gt;/controller/action/named:param/other:param&lt;/p&gt;

&lt;p&gt;Some information needed to complete Route contract is not provided by the path,
namely the namespace for the controller. Potentially the controller and action
itself could be unknown based on the path so a series of options are used. You
can configure the options used for the namespace and defaulted values when none
could be determined from the path by passing an associative array to the class
constructor. Please review the docs for that method to see what options are
made available to you.&lt;/p&gt;</long-description>
        <tag line="17" name="package" description="SprayFire"/>
        <tag line="17" name="subpackage" description="Http.Routing.FireRouting"/>
      </docblock>
      <property final="false" static="false" visibility="protected" line="50" namespace="SprayFire\Http\Routing\FireRouting" package="Default">
        <name>$options</name>
        <default>array()</default>
        <docblock line="44">
          <description>The actual array of options used by the algorithm to populate the appropriate
information for the Route object.</description>
          <long-description/>
          <tag line="44" name="property" description="" type="array" variable="">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="private" line="58" namespace="SprayFire\Http\Routing\FireRouting" package="Default">
        <name>$defaultOptions</name>
        <default>array('namespace' =&gt; 'SprayFire.Controller.FireController', 'controller' =&gt; 'Pages', 'action' =&gt; 'index', 'installDirectory' =&gt; '')</default>
        <docblock line="52">
          <description>A set of options that are used as default values if they aren't provided
in the constructor parameter.</description>
          <long-description/>
          <tag line="52" name="property" description="" type="array" variable="">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="SprayFire\Http\Routing\FireRouting" line="81" package="SprayFire\Http\Routing\FireRouting">
        <name>__construct</name>
        <full_name>__construct</full_name>
        <docblock line="65">
          <description>The set of options passed will replace any default options if the appropriate
keys are set.</description>
          <long-description>&lt;h2&gt;Options available:&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;namespace = The Java or PHP style namespace for the controller&lt;/li&gt;
&lt;li&gt;controller = The name of the controller to use, if non-special characters
           are used the name will be normalized to be an expected PascalCased
           class name.&lt;/li&gt;
&lt;li&gt;action = The name of the controller method to invoke&lt;/li&gt;
&lt;li&gt;installDirectory = The name of the install directory that should be removed
                 from the request path&lt;/li&gt;
&lt;/ul&gt;</long-description>
          <tag line="65" name="param" description="" type="array" variable="$options">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
        <argument line="81">
          <name>$options</name>
          <default>array()</default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="SprayFire\Http\Routing\FireRouting" line="101" package="SprayFire\Http\Routing\FireRouting">
        <name>getRouteAndParameters</name>
        <full_name>getRouteAndParameters</full_name>
        <docblock line="86">
          <description>Matches a $Request to a \SprayFire\Http\Routing\Route stored in the $Bag
or otherwise creates a Route implementation to be used during routing.</description>
          <long-description>&lt;p&gt;Please note that the array returned should have 2 keys:
- MatchStrategy::ROUTE_KEY =&gt; The Route object matched
- MatchStrategy::PARAMETER_KEY =&gt; an array of parameters to pass to the action&lt;/p&gt;

&lt;p&gt;It is strongly recommended that you use the constants provided by this
interface when setting the keys in the array returned from this method.&lt;/p&gt;</long-description>
          <tag line="86" name="param" description="" type="\SprayFire\Http\Routing\RouteBag" variable="$Bag">
            <type by_reference="false">\SprayFire\Http\Routing\RouteBag</type>
          </tag>
          <tag line="86" name="param" description="" type="\SprayFire\Http\Request" variable="$Request">
            <type by_reference="false">\SprayFire\Http\Request</type>
          </tag>
          <tag line="86" name="return" description="" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
        <argument line="101">
          <name>$Bag</name>
          <default/>
          <type>\SprayFire\Http\Routing\RouteBag</type>
        </argument>
        <argument line="101">
          <name>$Request</name>
          <default/>
          <type>\SprayFire\Http\Request</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="SprayFire\Http\Routing\FireRouting" line="127" package="SprayFire\Http\Routing\FireRouting">
        <name>parsePath</name>
        <full_name>parsePath</full_name>
        <docblock line="120">
          <description>Will parse a pretty URL path into an array with the appropriate controller,
action and parameters that should be used for the returned data.</description>
          <long-description/>
          <tag line="120" name="param" description="" type="string" variable="$path">
            <type by_reference="false">string</type>
          </tag>
          <tag line="120" name="return" description="" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
        <argument line="127">
          <name>$path</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="SprayFire\Http\Routing\FireRouting" line="160" package="SprayFire\Http\Routing\FireRouting">
        <name>isMarkedParameter</name>
        <full_name>isMarkedParameter</full_name>
        <docblock line="153">
          <description>Determines whether the $param is a marked parameter by checking that the
parameter separator, ':', is present in the string.</description>
          <long-description/>
          <tag line="153" name="param" description="" type="string" variable="$param">
            <type by_reference="false">string</type>
          </tag>
          <tag line="153" name="return" description="" type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
        </docblock>
        <argument line="160">
          <name>$param</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="SprayFire\Http\Routing\FireRouting" line="174" package="SprayFire\Http\Routing\FireRouting">
        <name>parseParameters</name>
        <full_name>parseParameters</full_name>
        <docblock line="164">
          <description>Will parse a numeric-indexed array into an array of fragments that are
to be considered parameters.</description>
          <long-description>&lt;p&gt;The parsing will take into account whether each parameter is a marked parameter
or not and whether that parameter should be considered a named parameter.&lt;/p&gt;</long-description>
          <tag line="164" name="param" description="" type="array" variable="$params">
            <type by_reference="false">array</type>
          </tag>
          <tag line="164" name="return" description="" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
        <argument line="174">
          <name>$params</name>
          <default/>
          <type>array</type>
        </argument>
      </method>
    </class>
  </file>
  <file path="Http/Routing/FireRouting/MatchStrategy.php" hash="cbe8ca1b86625e4e16ae6a525d71eaf6" package="Default">
    <docblock line="3">
      <description>Abstract implementation of \SprayFire\Http\Routing\MatchStrategy that enables
framework installation directories to be removed from a request's path.</description>
      <long-description/>
      <tag line="3" name="author" description="Charles Sprayberry"/>
      <tag line="3" name="license" description="Subject to the terms of the LICENSE file in the project root"/>
      <tag line="3" name="version" description="0.1"/>
      <tag line="3" name="since" description="0.1"/>
    </docblock>
    <class final="false" abstract="true" namespace="SprayFire\Http\Routing\FireRouting" line="21" package="SprayFire\Http\Routing\FireRouting">
      <extends>\SprayFire\CoreObject</extends>
      <implements>\SprayFire\Http\Routing\MatchStrategy</implements>
      <name>MatchStrategy</name>
      <full_name>\SprayFire\Http\Routing\FireRouting\MatchStrategy</full_name>
      <docblock line="17">
        <description/>
        <long-description/>
        <tag line="17" name="package" description="SprayFire"/>
        <tag line="17" name="subpackage" description="Http.Routing.FireRouting"/>
      </docblock>
      <property final="false" static="false" visibility="protected" line="26" namespace="SprayFire\Http\Routing\FireRouting" package="Default">
        <name>$installDirectory</name>
        <default/>
        <docblock line="23">
          <description/>
          <long-description/>
          <tag line="23" name="property" description="" type="string" variable="">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="SprayFire\Http\Routing\FireRouting" line="31" package="SprayFire\Http\Routing\FireRouting">
        <name>__construct</name>
        <full_name>__construct</full_name>
        <docblock line="28">
          <description/>
          <long-description/>
          <tag line="28" name="param" description="" type="string|null" variable="$installDirectory">
            <type by_reference="false">string</type>
            <type by_reference="false">null</type>
          </tag>
        </docblock>
        <argument line="31">
          <name>$installDirectory</name>
          <default>null</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="SprayFire\Http\Routing\FireRouting" line="39" package="SprayFire\Http\Routing\FireRouting">
        <name>removeInstallDirectory</name>
        <full_name>removeInstallDirectory</full_name>
        <docblock line="35">
          <description/>
          <long-description/>
          <tag line="35" name="param" description="" type="string" variable="$uriPath">
            <type by_reference="false">string</type>
          </tag>
          <tag line="35" name="return" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="39">
          <name>$uriPath</name>
          <default/>
          <type/>
        </argument>
      </method>
    </class>
    <parse_markers>
      <critical line="17" code="50005">No short description for class \SprayFire\Http\Routing\FireRouting\MatchStrategy</critical>
      <critical line="23" code="50019">No short description for property $installDirectory</critical>
      <error line="28" code="50012">No short description for method __construct()</error>
      <error line="35" code="50012">No short description for method removeInstallDirectory()</error>
    </parse_markers>
  </file>
  <file path="Http/Routing/FireRouting/Normalizer.php" hash="be9d1626a3421d6b0c35f33169d3eb14" package="Default">
    <docblock line="3">
      <description>Implementation to normalize class and method names into something that fits
the SprayFire coding standards.</description>
      <long-description/>
      <tag line="3" name="author" description="Charles Sprayberry"/>
      <tag line="3" name="license" description="Subject to the terms of the LICENSE file in the project root"/>
      <tag line="3" name="version" description="0.1"/>
      <tag line="3" name="since" description="0.1"/>
    </docblock>
    <class final="false" abstract="false" namespace="SprayFire\Http\Routing\FireRouting" line="24" package="SprayFire\Http\Routing\FireRouting">
      <extends>\SprayFire\CoreObject</extends>
      <name>Normalizer</name>
      <full_name>\SprayFire\Http\Routing\FireRouting\Normalizer</full_name>
      <docblock line="17">
        <description>This is a package private class and is intended to be used by other implementations
in the SprayFire.Http.Routing.FireRouting module.</description>
        <long-description/>
        <tag line="17" name="package" description="SprayFire"/>
        <tag line="17" name="subpackage" description="Http.Routing.FireRouting"/>
      </docblock>
      <property final="false" static="false" visibility="protected" line="31" namespace="SprayFire\Http\Routing\FireRouting" package="Default">
        <name>$characterRegex</name>
        <default>'/[^A-Za-z\s]/'</default>
        <docblock line="26">
          <description>PCRE regex pattern used to remove all non-alphabetic/space characters</description>
          <long-description/>
          <tag line="26" name="property" description="" type="string" variable="">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="SprayFire\Http\Routing\FireRouting" line="41" package="SprayFire\Http\Routing\FireRouting">
        <name>normalizeController</name>
        <full_name>normalizeController</full_name>
        <docblock line="33">
          <description>Will replace dashes and underscores with spaces, remove anything that isn't
a letter and finally return a string with resulting fragments converted to
a pascal cased string.</description>
          <long-description/>
          <tag line="33" name="param" description="" type="string" variable="$controller">
            <type by_reference="false">string</type>
          </tag>
          <tag line="33" name="return" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="41">
          <name>$controller</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="SprayFire\Http\Routing\FireRouting" line="61" package="SprayFire\Http\Routing\FireRouting">
        <name>normalizeAction</name>
        <full_name>normalizeAction</full_name>
        <docblock line="49">
          <description>Will replace dashes and underscores with spaces, remove anything that isn't a
letter or a number and return a string with resulting fragments converted
to a camel cased string.</description>
          <long-description/>
          <tag line="49" name="param" description="" type="\SprayFire\Http\Routing\FireRouting\strubg" variable="$action">
            <type by_reference="false">\SprayFire\Http\Routing\FireRouting\strubg</type>
          </tag>
          <tag line="49" name="return" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
          <tag line="49" name="todo" description="We need to make a test to normalize an action with a number in it.  This&#10;is not robust enough to ship with version 0.1"/>
        </docblock>
        <argument line="61">
          <name>$action</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="SprayFire\Http\Routing\FireRouting" line="73" package="SprayFire\Http\Routing\FireRouting">
        <name>replaceUnderscoresWithSpaces</name>
        <full_name>replaceUnderscoresWithSpaces</full_name>
        <docblock line="69">
          <description/>
          <long-description/>
          <tag line="69" name="param" description="" type="string" variable="$string">
            <type by_reference="false">string</type>
          </tag>
          <tag line="69" name="return" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="73">
          <name>$string</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="SprayFire\Http\Routing\FireRouting" line="82" package="SprayFire\Http\Routing\FireRouting">
        <name>replaceDashesWithSpaces</name>
        <full_name>replaceDashesWithSpaces</full_name>
        <docblock line="78">
          <description/>
          <long-description/>
          <tag line="78" name="param" description="" type="string" variable="$string">
            <type by_reference="false">string</type>
          </tag>
          <tag line="78" name="return" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="82">
          <name>$string</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="SprayFire\Http\Routing\FireRouting" line="92" package="SprayFire\Http\Routing\FireRouting">
        <name>replaceCharacterWithSpaces</name>
        <full_name>replaceCharacterWithSpaces</full_name>
        <docblock line="87">
          <description/>
          <long-description/>
          <tag line="87" name="param" description="" type="string" variable="$string">
            <type by_reference="false">string</type>
          </tag>
          <tag line="87" name="param" description="" type="string" variable="$character">
            <type by_reference="false">string</type>
          </tag>
          <tag line="87" name="return" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="92">
          <name>$string</name>
          <default/>
          <type/>
        </argument>
        <argument line="92">
          <name>$character</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="SprayFire\Http\Routing\FireRouting" line="104" package="SprayFire\Http\Routing\FireRouting">
        <name>removeInvalidCharacters</name>
        <full_name>removeInvalidCharacters</full_name>
        <docblock line="100">
          <description/>
          <long-description/>
          <tag line="100" name="param" description="" type="string" variable="$string">
            <type by_reference="false">string</type>
          </tag>
          <tag line="100" name="return" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="104">
          <name>$string</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="SprayFire\Http\Routing\FireRouting" line="112" package="SprayFire\Http\Routing\FireRouting">
        <name>makePascalCased</name>
        <full_name>makePascalCased</full_name>
        <docblock line="108">
          <description/>
          <long-description/>
          <tag line="108" name="param" description="" type="string" variable="$string">
            <type by_reference="false">string</type>
          </tag>
          <tag line="108" name="return" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="112">
          <name>$string</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="SprayFire\Http\Routing\FireRouting" line="122" package="SprayFire\Http\Routing\FireRouting">
        <name>makeCamelCased</name>
        <full_name>makeCamelCased</full_name>
        <docblock line="118">
          <description/>
          <long-description/>
          <tag line="118" name="param" description="" type="string" variable="$string">
            <type by_reference="false">string</type>
          </tag>
          <tag line="118" name="return" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="122">
          <name>$string</name>
          <default/>
          <type/>
        </argument>
      </method>
    </class>
    <parse_markers>
      <error line="69" code="50012">No short description for method replaceUnderscoresWithSpaces()</error>
      <error line="78" code="50012">No short description for method replaceDashesWithSpaces()</error>
      <error line="87" code="50012">No short description for method replaceCharacterWithSpaces()</error>
      <error line="100" code="50012">No short description for method removeInvalidCharacters()</error>
      <error line="108" code="50012">No short description for method makePascalCased()</error>
      <error line="118" code="50012">No short description for method makeCamelCased()</error>
    </parse_markers>
  </file>
  <file path="Http/Routing/FireRouting/Route.php" hash="8fd246f53743c43710ce6be483528993" package="Default">
    <docblock line="3">
      <description>Implementation of \SprayFire\Http\Routing\Route provided by the default SprayFire
install.</description>
      <long-description/>
      <tag line="3" name="author" description="Charles Sprayberry"/>
      <tag line="3" name="license" description="Subject to the terms of the LICENSE file in the project root"/>
      <tag line="3" name="version" description="0.1"/>
      <tag line="3" name="since" description="0.1"/>
    </docblock>
    <class final="false" abstract="false" namespace="SprayFire\Http\Routing\FireRouting" line="22" package="SprayFire\Http\Routing\FireRouting">
      <extends>\SprayFire\CoreObject</extends>
      <implements>\SprayFire\Http\Routing\Route</implements>
      <name>Route</name>
      <full_name>\SprayFire\Http\Routing\FireRouting\Route</full_name>
      <docblock line="18">
        <description/>
        <long-description/>
        <tag line="18" name="package" description="SprayFire"/>
        <tag line="18" name="subpackage" description="Http.Routing.FireRouting"/>
      </docblock>
      <property final="false" static="false" visibility="protected" line="29" namespace="SprayFire\Http\Routing\FireRouting" package="Default">
        <name>$regexPattern</name>
        <default/>
        <docblock line="24">
          <description>Stores the pattern used to match against an HTTP URI query path</description>
          <long-description/>
          <tag line="24" name="property" description="" type="string" variable="">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="36" namespace="SprayFire\Http\Routing\FireRouting" package="Default">
        <name>$namespace</name>
        <default/>
        <docblock line="31">
          <description>Java or PHP namespace that the controller exists in.</description>
          <long-description/>
          <tag line="31" name="property" description="" type="string" variable="">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="43" namespace="SprayFire\Http\Routing\FireRouting" package="Default">
        <name>$class</name>
        <default/>
        <docblock line="38">
          <description>The name of the class to invoke, it should exist in Route::namespace</description>
          <long-description/>
          <tag line="38" name="property" description="" type="string" variable="">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="50" namespace="SprayFire\Http\Routing\FireRouting" package="Default">
        <name>$action</name>
        <default/>
        <docblock line="45">
          <description>The name of the action to invoke on the namespaced controller.</description>
          <long-description/>
          <tag line="45" name="property" description="" type="string" variable="">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="56" namespace="SprayFire\Http\Routing\FireRouting" package="Default">
        <name>$httpMethod</name>
        <default/>
        <docblock line="52">
          <description/>
          <long-description/>
          <tag line="52" name="property" description="" type="mixed" variable="">
            <type by_reference="false">mixed</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="SprayFire\Http\Routing\FireRouting" line="67" package="SprayFire\Http\Routing\FireRouting">
        <name>__construct</name>
        <full_name>__construct</full_name>
        <docblock line="58">
          <description/>
          <long-description/>
          <tag line="58" name="param" description="" type="string" variable="$regexPattern">
            <type by_reference="false">string</type>
          </tag>
          <tag line="58" name="param" description="" type="string" variable="$namespace">
            <type by_reference="false">string</type>
          </tag>
          <tag line="58" name="param" description="" type="string" variable="$class">
            <type by_reference="false">string</type>
          </tag>
          <tag line="58" name="param" description="" type="string" variable="$action">
            <type by_reference="false">string</type>
          </tag>
          <tag line="58" name="param" description="" type="mixed" variable="$httpMethod">
            <type by_reference="false">mixed</type>
          </tag>
        </docblock>
        <argument line="67">
          <name>$regexPattern</name>
          <default/>
          <type/>
        </argument>
        <argument line="67">
          <name>$namespace</name>
          <default/>
          <type/>
        </argument>
        <argument line="67">
          <name>$class</name>
          <default>'Pages'</default>
          <type/>
        </argument>
        <argument line="67">
          <name>$action</name>
          <default>'index'</default>
          <type/>
        </argument>
        <argument line="67">
          <name>$httpMethod</name>
          <default>null</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="SprayFire\Http\Routing\FireRouting" line="79" package="SprayFire\Http\Routing\FireRouting">
        <name>getPattern</name>
        <full_name>getPattern</full_name>
        <docblock line="75">
          <description/>
          <long-description/>
          <tag line="75" name="return" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="SprayFire\Http\Routing\FireRouting" line="87" package="SprayFire\Http\Routing\FireRouting">
        <name>getMethod</name>
        <full_name>getMethod</full_name>
        <docblock line="83">
          <description/>
          <long-description/>
          <tag line="83" name="return" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="SprayFire\Http\Routing\FireRouting" line="95" package="SprayFire\Http\Routing\FireRouting">
        <name>getControllerNamespace</name>
        <full_name>getControllerNamespace</full_name>
        <docblock line="91">
          <description/>
          <long-description/>
          <tag line="91" name="return" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="SprayFire\Http\Routing\FireRouting" line="103" package="SprayFire\Http\Routing\FireRouting">
        <name>getControllerClass</name>
        <full_name>getControllerClass</full_name>
        <docblock line="99">
          <description/>
          <long-description/>
          <tag line="99" name="return" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="SprayFire\Http\Routing\FireRouting" line="111" package="SprayFire\Http\Routing\FireRouting">
        <name>getAction</name>
        <full_name>getAction</full_name>
        <docblock line="107">
          <description/>
          <long-description/>
          <tag line="107" name="return" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </method>
    </class>
    <parse_markers>
      <critical line="18" code="50005">No short description for class \SprayFire\Http\Routing\FireRouting\Route</critical>
      <critical line="52" code="50019">No short description for property $httpMethod</critical>
      <error line="58" code="50012">No short description for method __construct()</error>
      <error line="75" code="50012">No short description for method getPattern()</error>
      <error line="83" code="50012">No short description for method getMethod()</error>
      <error line="91" code="50012">No short description for method getControllerNamespace()</error>
      <error line="99" code="50012">No short description for method getControllerClass()</error>
      <error line="107" code="50012">No short description for method getAction()</error>
    </parse_markers>
  </file>
  <file path="Http/Routing/FireRouting/RouteBag.php" hash="676b3e23ae282b7d911cb59ab4868717" package="Default">
    <docblock line="3">
      <description/>
      <long-description/>
      <tag line="3" name="author" description="Charles Sprayberry"/>
      <tag line="3" name="license" description="Subject to the terms of the LICENSE file in the project root"/>
      <tag line="3" name="version" description="0.1"/>
      <tag line="3" name="since" description="0.1"/>
    </docblock>
    <class final="false" abstract="false" namespace="SprayFire\Http\Routing\FireRouting" line="22" package="SprayFire\Http\Routing\FireRouting">
      <extends>\SprayFire\CoreObject</extends>
      <implements>\SprayFire\Http\Routing\RouteBag</implements>
      <name>RouteBag</name>
      <full_name>\SprayFire\Http\Routing\FireRouting\RouteBag</full_name>
      <docblock line="17">
        <description/>
        <long-description/>
        <tag line="17" name="package" description="SprayFire"/>
        <tag line="17" name="subpackage" description="Http.Routing.FireRouting"/>
      </docblock>
      <property final="false" static="false" visibility="protected" line="29" namespace="SprayFire\Http\Routing\FireRouting" package="Default">
        <name>$routes</name>
        <default>array()</default>
        <docblock line="24">
          <description>Stores a collection of routes [$routePattern =&gt; SprayFire.Http.Routing.Route]</description>
          <long-description/>
          <tag line="24" name="property" description="" type="array" variable="">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="37" namespace="SprayFire\Http\Routing\FireRouting" package="Default">
        <name>$NoMatchRoute</name>
        <default/>
        <docblock line="31">
          <description>Stores a route that is returned if a route is attempted to be retrieved
and there is no match.</description>
          <long-description/>
          <tag line="31" name="property" description="" type="\SprayFire\Http\Routing\Route" variable="">
            <type by_reference="false">\SprayFire\Http\Routing\Route</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="SprayFire\Http\Routing\FireRouting" line="39" package="SprayFire\Http\Routing\FireRouting">
        <name>__construct</name>
        <full_name>__construct</full_name>
        <argument line="39">
          <name>$NoMatchRoute</name>
          <default>null</default>
          <type>\SprayFire\Http\Routing\Route</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="SprayFire\Http\Routing\FireRouting" line="52" package="SprayFire\Http\Routing\FireRouting">
        <name>addRoute</name>
        <full_name>addRoute</full_name>
        <docblock line="46">
          <description>Will store a $Route with the pattern for that route as the given key.</description>
          <long-description/>
          <tag line="46" name="param" description="" type="\SprayFire\Http\Routing\Route" variable="$Route">
            <type by_reference="false">\SprayFire\Http\Routing\Route</type>
          </tag>
          <tag line="46" name="throws" description="" type="\SprayFire\Http\Routing\Exception\DuplicateRouteAdded">
            <type by_reference="false">\SprayFire\Http\Routing\Exception\DuplicateRouteAdded</type>
          </tag>
        </docblock>
        <argument line="52">
          <name>$Route</name>
          <default/>
          <type>\SprayFire\Http\Routing\Route</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="SprayFire\Http\Routing\FireRouting" line="66" package="SprayFire\Http\Routing\FireRouting">
        <name>getRoute</name>
        <full_name>getRoute</full_name>
        <docblock line="62">
          <description/>
          <long-description/>
          <tag line="62" name="param" description="" type="string" variable="$pattern">
            <type by_reference="false">string</type>
          </tag>
          <tag line="62" name="return" description="" type="\SprayFire\Http\Routing\Route">
            <type by_reference="false">\SprayFire\Http\Routing\Route</type>
          </tag>
        </docblock>
        <argument line="66">
          <name>$pattern</name>
          <default>null</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="SprayFire\Http\Routing\FireRouting" line="79" package="SprayFire\Http\Routing\FireRouting">
        <name>removeRouteWithPattern</name>
        <full_name>removeRouteWithPattern</full_name>
        <docblock line="73">
          <description>Will remove a \SprayFire\Http\Routing\Route from the collection that matches
$pattern if it has been added.</description>
          <long-description/>
          <tag line="73" name="param" description="" type="string" variable="$pattern">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="79">
          <name>$pattern</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="SprayFire\Http\Routing\FireRouting" line="89" package="SprayFire\Http\Routing\FireRouting">
        <name>hasRouteWithPattern</name>
        <full_name>hasRouteWithPattern</full_name>
        <docblock line="85">
          <description/>
          <long-description/>
          <tag line="85" name="param" description="" type="string" variable="$pattern">
            <type by_reference="false">string</type>
          </tag>
          <tag line="85" name="return" description="" type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
        </docblock>
        <argument line="89">
          <name>$pattern</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="SprayFire\Http\Routing\FireRouting" line="96" package="SprayFire\Http\Routing\FireRouting">
        <name>count</name>
        <full_name>count</full_name>
        <docblock line="93">
          <description/>
          <long-description/>
          <tag line="93" name="return" description="" type="int">
            <type by_reference="false">int</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="SprayFire\Http\Routing\FireRouting" line="103" package="SprayFire\Http\Routing\FireRouting">
        <name>getIterator</name>
        <full_name>getIterator</full_name>
        <docblock line="100">
          <description/>
          <long-description/>
          <tag line="100" name="return" description="" type="\SprayFire\Http\Routing\FireRouting\ArrayIterator">
            <type by_reference="false">\SprayFire\Http\Routing\FireRouting\ArrayIterator</type>
          </tag>
        </docblock>
      </method>
    </class>
    <parse_markers>
      <critical line="3" code="50008">No short description for file Http/Routing/FireRouting/RouteBag.php</critical>
      <critical line="17" code="50005">No short description for class \SprayFire\Http\Routing\FireRouting\RouteBag</critical>
      <error line="39" code="50010">No DocBlock was found for method __construct()</error>
      <error line="62" code="50012">No short description for method getRoute()</error>
      <error line="85" code="50012">No short description for method hasRouteWithPattern()</error>
      <error line="93" code="50012">No short description for method count()</error>
      <error line="100" code="50012">No short description for method getIterator()</error>
    </parse_markers>
  </file>
  <file path="Http/Routing/FireRouting/RoutedRequest.php" hash="cf6388bc0d2d208e0f58e7c7d387780b" package="Default">
    <docblock line="3">
      <description>Implementation of SprayFire.Http.Routing.RoutedRequest provided with the default
SprayFire install.</description>
      <long-description/>
      <tag line="3" name="author" description="Charles Sprayberry"/>
      <tag line="3" name="license" description="Subject to the terms of the LICENSE file in the project root"/>
      <tag line="3" name="version" description="0.1"/>
      <tag line="3" name="since" description="0.1"/>
    </docblock>
    <class final="false" abstract="false" namespace="SprayFire\Http\Routing\FireRouting" line="33" package="SprayFire\Http\Routing\FireRouting">
      <extends>\SprayFire\CoreObject</extends>
      <implements>\SprayFire\Http\Routing\RoutedRequest</implements>
      <name>RoutedRequest</name>
      <full_name>\SprayFire\Http\Routing\FireRouting\RoutedRequest</full_name>
      <docblock line="18">
        <description>This implementation is a Data Transfer Object to provide data from the
SprayFire.Http.Routing to the SprayFire.Dispatcher module.</description>
        <long-description>&lt;p&gt;Although this object is not package private it is highly recommended that you
do not manually create a RoutedRequest object, instead letting the
SprayFire.Http.Routing.FireRouting.Router implement the appropriate RoutedRequest.&lt;/p&gt;

&lt;p&gt;Ultimately the only functionality provided by this object is parsing the
top level namespace from a controller.  This functionality is only provided
internally and can be "used" when passing a constructor value.&lt;/p&gt;</long-description>
        <tag line="18" name="package" description="SprayFire"/>
        <tag line="18" name="subpackage" description="Http.Routing.FireRouting"/>
      </docblock>
      <property final="false" static="false" visibility="protected" line="38" namespace="SprayFire\Http\Routing\FireRouting" package="Default">
        <name>$appNamespace</name>
        <default>''</default>
        <docblock line="35">
          <description/>
          <long-description/>
          <tag line="35" name="property" description="" type="string" variable="">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="43" namespace="SprayFire\Http\Routing\FireRouting" package="Default">
        <name>$controller</name>
        <default>''</default>
        <docblock line="40">
          <description/>
          <long-description/>
          <tag line="40" name="property" description="" type="string" variable="">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="48" namespace="SprayFire\Http\Routing\FireRouting" package="Default">
        <name>$action</name>
        <default>''</default>
        <docblock line="45">
          <description/>
          <long-description/>
          <tag line="45" name="property" description="" type="string" variable="">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="53" namespace="SprayFire\Http\Routing\FireRouting" package="Default">
        <name>$parameters</name>
        <default>array()</default>
        <docblock line="50">
          <description/>
          <long-description/>
          <tag line="50" name="property" description="" type="array" variable="">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="SprayFire\Http\Routing\FireRouting" line="63" package="SprayFire\Http\Routing\FireRouting">
        <name>__construct</name>
        <full_name>__construct</full_name>
        <docblock line="55">
          <description>Will parse the app namespace for this RoutedRequest based on the top level
of the controller namespace passed.</description>
          <long-description/>
          <tag line="55" name="param" description="" type="string" variable="$controller">
            <type by_reference="false">string</type>
          </tag>
          <tag line="55" name="param" description="" type="string" variable="$action">
            <type by_reference="false">string</type>
          </tag>
          <tag line="55" name="param" description="" type="array" variable="$parameters">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
        <argument line="63">
          <name>$controller</name>
          <default/>
          <type/>
        </argument>
        <argument line="63">
          <name>$action</name>
          <default/>
          <type/>
        </argument>
        <argument line="63">
          <name>$parameters</name>
          <default>array()</default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="SprayFire\Http\Routing\FireRouting" line="77" package="SprayFire\Http\Routing\FireRouting">
        <name>getTopLevelNamespace</name>
        <full_name>getTopLevelNamespace</full_name>
        <docblock line="70">
          <description>Will return the top level namespace for a class, when the namespace is
separated by dots.</description>
          <long-description/>
          <tag line="70" name="param" description="" type="string" variable="$controller">
            <type by_reference="false">string</type>
          </tag>
          <tag line="70" name="return" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="77">
          <name>$controller</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="SprayFire\Http\Routing\FireRouting" line="88" package="SprayFire\Http\Routing\FireRouting">
        <name>getAppNamespace</name>
        <full_name>getAppNamespace</full_name>
        <docblock line="85">
          <description/>
          <long-description/>
          <tag line="85" name="return" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="SprayFire\Http\Routing\FireRouting" line="95" package="SprayFire\Http\Routing\FireRouting">
        <name>getAction</name>
        <full_name>getAction</full_name>
        <docblock line="92">
          <description/>
          <long-description/>
          <tag line="92" name="return" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="SprayFire\Http\Routing\FireRouting" line="102" package="SprayFire\Http\Routing\FireRouting">
        <name>getController</name>
        <full_name>getController</full_name>
        <docblock line="99">
          <description/>
          <long-description/>
          <tag line="99" name="return" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="SprayFire\Http\Routing\FireRouting" line="109" package="SprayFire\Http\Routing\FireRouting">
        <name>getParameters</name>
        <full_name>getParameters</full_name>
        <docblock line="106">
          <description/>
          <long-description/>
          <tag line="106" name="return" description="" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </method>
    </class>
    <parse_markers>
      <critical line="35" code="50019">No short description for property $appNamespace</critical>
      <critical line="40" code="50019">No short description for property $controller</critical>
      <critical line="45" code="50019">No short description for property $action</critical>
      <critical line="50" code="50019">No short description for property $parameters</critical>
      <error line="85" code="50012">No short description for method getAppNamespace()</error>
      <error line="92" code="50012">No short description for method getAction()</error>
      <error line="99" code="50012">No short description for method getController()</error>
      <error line="106" code="50012">No short description for method getParameters()</error>
    </parse_markers>
  </file>
  <file path="Http/Routing/FireRouting/Router.php" hash="a3d4a343fc9ec47d3ce1f62c89bb9084" package="Default">
    <docblock line="3">
      <description>Implementation of \SprayFire\Http\Routing\Router provided by the default SprayFire
install.</description>
      <long-description/>
      <tag line="3" name="author" description="Charles Sprayberry"/>
      <tag line="3" name="license" description="Subject to the terms of the LICENSE file in the project root"/>
      <tag line="3" name="version" description="0.1"/>
      <tag line="3" name="since" description="0.1"/>
    </docblock>
    <class final="false" abstract="false" namespace="SprayFire\Http\Routing\FireRouting" line="32" package="SprayFire\Http\Routing\FireRouting">
      <extends>\SprayFire\CoreObject</extends>
      <implements>\SprayFire\Http\Routing\Router</implements>
      <name>Router</name>
      <full_name>\SprayFire\Http\Routing\FireRouting\Router</full_name>
      <docblock line="20">
        <description>At the moment this implementation is a configuration strict implementation,
meaning that if the route requested is not in the configuration passed to the
router then a \SprayFire\Http\Routing\RoutedRequest representing a 404 response
will be returned.</description>
        <long-description>&lt;p&gt;The routing configuration passed is expected to be of a specific format that
is detailed at https://github.com/cspray/SprayFire/wiki/HTTP-and-Routing.&lt;/p&gt;</long-description>
        <tag line="20" name="package" description="SprayFire"/>
        <tag line="20" name="subpackage" description="Http.Routing.FireRouting"/>
      </docblock>
      <property final="false" static="false" visibility="protected" line="37" namespace="SprayFire\Http\Routing\FireRouting" package="Default">
        <name>$MatchStrategy</name>
        <default/>
        <docblock line="34">
          <description/>
          <long-description/>
          <tag line="34" name="property" description="" type="\SprayFire\Http\Routing\MatchStrategy" variable="">
            <type by_reference="false">\SprayFire\Http\Routing\MatchStrategy</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="44" namespace="SprayFire\Http\Routing\FireRouting" package="Default">
        <name>$RouteBag</name>
        <default/>
        <docblock line="39">
          <description>Holds the routes that we can match against SprayFire.Http.Request.</description>
          <long-description/>
          <tag line="39" name="property" description="" type="\SprayFire\Http\Routing\RouteBag" variable="">
            <type by_reference="false">\SprayFire\Http\Routing\RouteBag</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="52" namespace="SprayFire\Http\Routing\FireRouting" package="Default">
        <name>$Normalizer</name>
        <default/>
        <docblock line="46">
          <description>Ensures that the appropriate controller and action name are passed to the
SprayFire.Http.Routing.RoutedRequest.</description>
          <long-description/>
          <tag line="46" name="property" description="" type="\SprayFire\Http\Routing\FireRouting\Normalizer" variable="">
            <type by_reference="false">\SprayFire\Http\Routing\FireRouting\Normalizer</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="60" namespace="SprayFire\Http\Routing\FireRouting" package="Default">
        <name>$RoutedRequestCache</name>
        <default/>
        <docblock line="54">
          <description>Stores \SprayFire\Http\Routing\RoutedRequest objects against \SprayFire\Http\Request
objects used to create them.</description>
          <long-description/>
          <tag line="54" name="property" description="" type="\SplObjectStorage" variable="">
            <type by_reference="false">\SplObjectStorage</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="SprayFire\Http\Routing\FireRouting" line="70" package="SprayFire\Http\Routing\FireRouting">
        <name>__construct</name>
        <full_name>__construct</full_name>
        <docblock line="62">
          <description>Please see the documentation on routing configurations at
https://github.com/cspray/SprayFire/wiki/HTTP-and-Routing</description>
          <long-description/>
          <tag line="62" name="param" description="" type="\SprayFire\Http\Routing\MatchStrategy" variable="$Strategy">
            <type by_reference="false">\SprayFire\Http\Routing\MatchStrategy</type>
          </tag>
          <tag line="62" name="param" description="" type="\SprayFire\Http\Routing\RouteBag" variable="$RouteBag">
            <type by_reference="false">\SprayFire\Http\Routing\RouteBag</type>
          </tag>
          <tag line="62" name="param" description="" type="\SprayFire\Http\Routing\FireRouting\Normalizer" variable="$Normalizer">
            <type by_reference="false">\SprayFire\Http\Routing\FireRouting\Normalizer</type>
          </tag>
        </docblock>
        <argument line="70">
          <name>$Strategy</name>
          <default/>
          <type>\SprayFire\Http\Routing\MatchStrategy</type>
        </argument>
        <argument line="70">
          <name>$RouteBag</name>
          <default/>
          <type>\SprayFire\Http\Routing\RouteBag</type>
        </argument>
        <argument line="70">
          <name>$Normalizer</name>
          <default/>
          <type>\SprayFire\Http\Routing\FireRouting\Normalizer</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="SprayFire\Http\Routing\FireRouting" line="85" package="SprayFire\Http\Routing\FireRouting">
        <name>getRoutedRequest</name>
        <full_name>getRoutedRequest</full_name>
        <docblock line="77">
          <description>Based on the URI path and HTTP method passed in the given \SprayFire\Http\Request
will return an appropriate \SprayFire\Http\Routing\FireRouting\RoutedRequest
configured for the appropriate resource.</description>
          <long-description/>
          <tag line="77" name="param" description="" type="\SprayFire\Http\Request" variable="$Request">
            <type by_reference="false">\SprayFire\Http\Request</type>
          </tag>
          <tag line="77" name="return" description="" type="\SprayFire\Http\Routing\FireRouting\RoutedRequest">
            <type by_reference="false">\SprayFire\Http\Routing\FireRouting\RoutedRequest</type>
          </tag>
        </docblock>
        <argument line="85">
          <name>$Request</name>
          <default/>
          <type>\SprayFire\Http\Request</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="SprayFire\Http\Routing\FireRouting" line="110" package="SprayFire\Http\Routing\FireRouting">
        <name>normalizeController</name>
        <full_name>normalizeController</full_name>
        <docblock line="104">
          <description>Will normalize the controller if any non-alphanumeric characters are found</description>
          <long-description/>
          <tag line="104" name="param" description="" type="string" variable="$controller">
            <type by_reference="false">string</type>
          </tag>
          <tag line="104" name="return" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="110">
          <name>$controller</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="SprayFire\Http\Routing\FireRouting" line="124" package="SprayFire\Http\Routing\FireRouting">
        <name>normalizeAction</name>
        <full_name>normalizeAction</full_name>
        <docblock line="118">
          <description>Will normalize the action if any non-alphanumeric characters are found</description>
          <long-description/>
          <tag line="118" name="param" description="" type="string" variable="$action">
            <type by_reference="false">string</type>
          </tag>
          <tag line="118" name="return" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="124">
          <name>$action</name>
          <default/>
          <type/>
        </argument>
      </method>
    </class>
    <parse_markers>
      <critical line="34" code="50019">No short description for property $MatchStrategy</critical>
    </parse_markers>
  </file>
  <file path="Http/Routing/MatchStrategy.php" hash="690f648759cec5d096d8e45db0bd355e" package="Default">
    <docblock line="3">
      <description>Interface to allow the algorithm to use for matching a route to a request
be flexible and dynamic.</description>
      <long-description/>
      <tag line="3" name="author" description="Charles Sprayberry"/>
      <tag line="3" name="license" description="Subject to the terms of the LICENSE file in the project root"/>
      <tag line="3" name="version" description="0.1"/>
      <tag line="3" name="since" description="0.1"/>
    </docblock>
    <interface namespace="SprayFire\Http\Routing" line="21" package="SprayFire\Http\Routing">
      <name>MatchStrategy</name>
      <full_name>\SprayFire\Http\Routing\MatchStrategy</full_name>
      <extends>\SprayFire\Object</extends>
      <docblock line="17">
        <description/>
        <long-description/>
        <tag line="17" name="package" description="SprayFire"/>
        <tag line="17" name="subpackage" description="Http.Routing"/>
      </docblock>
      <constant namespace="SprayFire\Http\Routing" line="27" package="SprayFire\Http\Routing">
        <name>ROUTE_KEY</name>
        <full_name>ROUTE_KEY</full_name>
        <value>'Route'</value>
        <docblock line="23">
          <description>A value that should be used as the array key for the Route object in return
values from the getRouteAndParameters method.</description>
          <long-description/>
        </docblock>
      </constant>
      <constant namespace="SprayFire\Http\Routing" line="33" package="SprayFire\Http\Routing">
        <name>PARAMETER_KEY</name>
        <full_name>PARAMETER_KEY</full_name>
        <value>'parameters'</value>
        <docblock line="29">
          <description>A value that should be used as the array key for the parameters in return
values from the getRouteAndParameters method.</description>
          <long-description/>
        </docblock>
      </constant>
      <method final="false" abstract="false" static="false" visibility="public" namespace="SprayFire\Http\Routing" line="50" package="SprayFire\Http\Routing">
        <name>getRouteAndParameters</name>
        <full_name>getRouteAndParameters</full_name>
        <docblock line="35">
          <description>Matches a $Request to a \SprayFire\Http\Routing\Route stored in the $Bag
or otherwise creates a Route implementation to be used during routing.</description>
          <long-description>&lt;p&gt;Please note that the array returned should have 2 keys:
- MatchStrategy::ROUTE_KEY =&gt; The Route object matched
- MatchStrategy::PARAMETER_KEY =&gt; an array of parameters to pass to the action&lt;/p&gt;

&lt;p&gt;It is strongly recommended that you use the constants provided by this
interface when setting the keys in the array returned from this method.&lt;/p&gt;</long-description>
          <tag line="35" name="param" description="" type="\SprayFire\Http\Routing\RouteBag" variable="$Bag">
            <type by_reference="false">\SprayFire\Http\Routing\RouteBag</type>
          </tag>
          <tag line="35" name="param" description="" type="\SprayFire\Http\Request" variable="$Request">
            <type by_reference="false">\SprayFire\Http\Request</type>
          </tag>
          <tag line="35" name="return" description="" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
        <argument line="50">
          <name>$Bag</name>
          <default/>
          <type>\SprayFire\Http\Routing\RouteBag</type>
        </argument>
        <argument line="50">
          <name>$Request</name>
          <default/>
          <type>\SprayFire\Http\Request</type>
        </argument>
      </method>
    </interface>
  </file>
  <file path="Http/Routing/Route.php" hash="381c2a2b7d787b51511b1082489d3c66" package="Default">
    <docblock line="3">
      <description>Interface representing a HTTP URI route that can be matched against an HTTP
request to determine what resources are used to generate the response.</description>
      <long-description/>
      <tag line="3" name="author" description="Charles Sprayberry"/>
      <tag line="3" name="license" description="https://github.com/cspray/SprayFire/blob/master/config/SprayFire/routes.php"/>
      <tag line="3" name="version" description="0.1"/>
      <tag line="3" name="since" description="0.1"/>
    </docblock>
    <interface namespace="SprayFire\Http\Routing" line="22" package="SprayFire\Http\Routing">
      <name>Route</name>
      <full_name>\SprayFire\Http\Routing\Route</full_name>
      <extends>\SprayFire\Object</extends>
      <docblock line="18">
        <description/>
        <long-description/>
        <tag line="18" name="package" description="SprayFire"/>
        <tag line="18" name="subpackage" description="Http.Routing"/>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="SprayFire\Http\Routing" line="30" package="SprayFire\Http\Routing">
        <name>getPattern</name>
        <full_name>getPattern</full_name>
        <docblock line="24">
          <description>Return the pattern, presumably regex, that will be used to match against
the given HTTP request URI.</description>
          <long-description/>
          <tag line="24" name="return" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="SprayFire\Http\Routing" line="37" package="SprayFire\Http\Routing">
        <name>getMethod</name>
        <full_name>getMethod</full_name>
        <docblock line="32">
          <description>Return an HTTP method that the Route should restrict requests against.</description>
          <long-description/>
          <tag line="32" name="return" description="" type="mixed">
            <type by_reference="false">mixed</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="SprayFire\Http\Routing" line="47" package="SprayFire\Http\Routing">
        <name>getControllerNamespace</name>
        <full_name>getControllerNamespace</full_name>
        <docblock line="39">
          <description>The namespace that the controller belongs to.</description>
          <long-description>&lt;p&gt;For example, if you were going to return the namespace for all SprayFire
provided controllers you would return 'SprayFire.Controller.FireController'&lt;/p&gt;</long-description>
          <tag line="39" name="return" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="SprayFire\Http\Routing" line="56" package="SprayFire\Http\Routing">
        <name>getControllerClass</name>
        <full_name>getControllerClass</full_name>
        <docblock line="49">
          <description>Returns the name of the controller that we should instantiate, it should
exist in the namespace returned by Route::getControllerNamespace();</description>
          <long-description/>
          <tag line="49" name="return" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="SprayFire\Http\Routing" line="63" package="SprayFire\Http\Routing">
        <name>getAction</name>
        <full_name>getAction</full_name>
        <docblock line="58">
          <description>The name of the action to invoke on the controller.</description>
          <long-description/>
          <tag line="58" name="return" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </method>
    </interface>
  </file>
  <file path="Http/Routing/RouteBag.php" hash="6d6c745524981992eecb50da3b695d0f" package="Default">
    <docblock line="3">
      <description>Interface for a data structure object that allows storing and retrieving of
\SprayFire\Http\Routing\Route objects.</description>
      <long-description/>
      <tag line="3" name="author" description="Charles Sprayberry"/>
      <tag line="3" name="license" description="Subject to the terms of the LICENSE file in the project root"/>
      <tag line="3" name="version" description="0.1"/>
      <tag line="3" name="since" description="0.1"/>
    </docblock>
    <interface namespace="SprayFire\Http\Routing" line="22" package="SprayFire\Http\Routing">
      <name>RouteBag</name>
      <full_name>\SprayFire\Http\Routing\RouteBag</full_name>
      <extends>\SprayFire\Object</extends>
      <extends>\Countable</extends>
      <extends>\IteratorAggregate</extends>
      <docblock line="18">
        <description/>
        <long-description/>
        <tag line="18" name="package" description="SprayFire"/>
        <tag line="18" name="subpackage" description="Http.Routing"/>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="SprayFire\Http\Routing" line="33" package="SprayFire\Http\Routing">
        <name>addRoute</name>
        <full_name>addRoute</full_name>
        <docblock line="24">
          <description>Add a $Route implementation to the bag, if the $Route has already been added
throw an exception as this would result in various functionality not working
properly.</description>
          <long-description/>
          <tag line="24" name="param" description="" type="\SprayFire\Http\Routing\Route" variable="$Route">
            <type by_reference="false">\SprayFire\Http\Routing\Route</type>
          </tag>
          <tag line="24" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
          <tag line="24" name="throws" description="" type="\SprayFire\Http\Routing\Exception\DuplicateRouteAdded">
            <type by_reference="false">\SprayFire\Http\Routing\Exception\DuplicateRouteAdded</type>
          </tag>
        </docblock>
        <argument line="33">
          <name>$Route</name>
          <default/>
          <type>\SprayFire\Http\Routing\Route</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="SprayFire\Http\Routing" line="46" package="SprayFire\Http\Routing">
        <name>getRoute</name>
        <full_name>getRoute</full_name>
        <docblock line="35">
          <description>Get the $Route added to the bag matching the given pattern, if the pattern
is not matched or null is passed then the bag should return a default
\SprayFire\Http\Routing\Route implementation.</description>
          <long-description>&lt;p&gt;Please note that this method must always return \SprayFire\Http\Routing\Route
or terrible, awful things are bound to happen.&lt;/p&gt;</long-description>
          <tag line="35" name="param" description="" type="string|null" variable="$pattern">
            <type by_reference="false">string</type>
            <type by_reference="false">null</type>
          </tag>
          <tag line="35" name="return" description="" type="\SprayFire\Http\Routing\Route">
            <type by_reference="false">\SprayFire\Http\Routing\Route</type>
          </tag>
        </docblock>
        <argument line="46">
          <name>$pattern</name>
          <default>null</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="SprayFire\Http\Routing" line="54" package="SprayFire\Http\Routing">
        <name>removeRouteWithPattern</name>
        <full_name>removeRouteWithPattern</full_name>
        <docblock line="48">
          <description>Remove any $Route associated to a matched pattern.</description>
          <long-description/>
          <tag line="48" name="param" description="" type="string" variable="$pattern">
            <type by_reference="false">string</type>
          </tag>
          <tag line="48" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
        <argument line="54">
          <name>$pattern</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="SprayFire\Http\Routing" line="62" package="SprayFire\Http\Routing">
        <name>hasRouteWithPattern</name>
        <full_name>hasRouteWithPattern</full_name>
        <docblock line="56">
          <description>Determines if a $Route was added that would match a given pattern.</description>
          <long-description/>
          <tag line="56" name="param" description="" type="string" variable="$pattern">
            <type by_reference="false">string</type>
          </tag>
          <tag line="56" name="return" description="" type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
        </docblock>
        <argument line="62">
          <name>$pattern</name>
          <default/>
          <type/>
        </argument>
      </method>
    </interface>
  </file>
  <file path="Http/Routing/RoutedRequest.php" hash="e26944cf0ef59bc30f037f4e67c66c63" package="Default">
    <docblock line="3">
      <description>Interface that represents data about the requested resource after the
SprayFire.Http.Routing.Router has routed a SprayFire.Http.Request</description>
      <long-description/>
      <tag line="3" name="author" description="Charles Sprayberry"/>
      <tag line="3" name="license" description="Subject to the terms of the LICENSE file in the project root"/>
      <tag line="3" name="version" description="0.1"/>
      <tag line="3" name="since" description="0.1"/>
    </docblock>
    <interface namespace="SprayFire\Http\Routing" line="22" package="SprayFire\Http\Routing">
      <name>RoutedRequest</name>
      <full_name>\SprayFire\Http\Routing\RoutedRequest</full_name>
      <docblock line="15">
        <description>This is, in effect, a Data Transfer Object intended to provide pertinent information
about the routed resource to SprayFire.Dispatcher.Dispatcher implementations.</description>
        <long-description/>
        <tag line="15" name="package" description="SprayFire"/>
        <tag line="15" name="subpackage" description="Http.Routing"/>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="SprayFire\Http\Routing" line="29" package="SprayFire\Http\Routing">
        <name>getAppNamespace</name>
        <full_name>getAppNamespace</full_name>
        <docblock line="24">
          <description>Should return the top level namespace for the routed request.</description>
          <long-description/>
          <tag line="24" name="return" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="SprayFire\Http\Routing" line="37" package="SprayFire\Http\Routing">
        <name>getController</name>
        <full_name>getController</full_name>
        <docblock line="31">
          <description>The full namespaced name of the class to use; can be Java or PHP style
syntax.</description>
          <long-description/>
          <tag line="31" name="return" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="SprayFire\Http\Routing" line="44" package="SprayFire\Http\Routing">
        <name>getAction</name>
        <full_name>getAction</full_name>
        <docblock line="39">
          <description>The name of the method or action to invoke on the controller.</description>
          <long-description/>
          <tag line="39" name="return" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="SprayFire\Http\Routing" line="51" package="SprayFire\Http\Routing">
        <name>getParameters</name>
        <full_name>getParameters</full_name>
        <docblock line="46">
          <description>An array of string values that should be passed to the invoked action.</description>
          <long-description/>
          <tag line="46" name="return" description="" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </method>
    </interface>
  </file>
  <file path="Http/Routing/Router.php" hash="a33df6f1881f1404f7ef446e426c425e" package="Default">
    <docblock line="3">
      <description>Interface to determine the appropriate resource to provide to the user based
off of a given SprayFire.Http.Request</description>
      <long-description/>
      <tag line="3" name="author" description="Charles Sprayberry"/>
      <tag line="3" name="license" description="Subject to the terms of the LICENSE file in the project root"/>
      <tag line="3" name="version" description="0.1"/>
      <tag line="3" name="since" description="0.1"/>
    </docblock>
    <interface namespace="SprayFire\Http\Routing" line="25" package="SprayFire\Http\Routing">
      <name>Router</name>
      <full_name>\SprayFire\Http\Routing\Router</full_name>
      <docblock line="17">
        <description>Implementations should accept some configuration that dictates what information
should be passed in a \SprayFire\Http\Routing\RoutedRequest when routing is
processed.</description>
        <long-description/>
        <tag line="17" name="package" description="SprayFire"/>
        <tag line="17" name="subpackage" description="Http.Routing"/>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="SprayFire\Http\Routing" line="35" package="SprayFire\Http\Routing">
        <name>getRoutedRequest</name>
        <full_name>getRoutedRequest</full_name>
        <docblock line="27">
          <description>By matching various pieces of information from the $Request should return
a \SprayFire\Http\Routing\RoutedRequest based on some configuration passed
to the implementation.</description>
          <long-description/>
          <tag line="27" name="param" description="" type="\SprayFire\Http\Request" variable="$Request">
            <type by_reference="false">\SprayFire\Http\Request</type>
          </tag>
          <tag line="27" name="return" description="" type="\SprayFire\Http\Routing\RoutedRequest">
            <type by_reference="false">\SprayFire\Http\Routing\RoutedRequest</type>
          </tag>
        </docblock>
        <argument line="35">
          <name>$Request</name>
          <default/>
          <type>\SprayFire\Http\Request</type>
        </argument>
      </method>
    </interface>
  </file>
  <file path="Http/Uri.php" hash="fa65dd6fd11e2c56ead3f9bf014e03e6" package="Default">
    <docblock line="3">
      <description>Interface representing an HTTP URI as dictated in http://tools.ietf.org/html/rfc3986.</description>
      <long-description/>
      <tag line="3" name="author" description="Charles Sprayberry"/>
      <tag line="3" name="license" description="Subject to the terms of the LICENSE file in the project root"/>
      <tag line="3" name="version" description="0.1"/>
      <tag line="3" name="since" description="0.1"/>
    </docblock>
    <interface namespace="SprayFire\Http" line="20" package="SprayFire\Http">
      <name>Uri</name>
      <full_name>\SprayFire\Http\Uri</full_name>
      <extends>\SprayFire\Object</extends>
      <docblock line="16">
        <description/>
        <long-description/>
        <tag line="16" name="package" description="SprayFire"/>
        <tag line="16" name="subpackage" description="Http"/>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="SprayFire\Http" line="27" package="SprayFire\Http">
        <name>getScheme</name>
        <full_name>getScheme</full_name>
        <docblock line="22">
          <description>Will return the HTTP protocol for the given request</description>
          <long-description/>
          <tag line="22" name="return" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="SprayFire\Http" line="34" package="SprayFire\Http">
        <name>getAuthority</name>
        <full_name>getAuthority</full_name>
        <docblock line="29">
          <description>Will return the HTTP host and port used for the given request.</description>
          <long-description/>
          <tag line="29" name="return" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="SprayFire\Http" line="42" package="SprayFire\Http">
        <name>getPort</name>
        <full_name>getPort</full_name>
        <docblock line="36">
          <description>Returns the port used for the request, a convenience method to easily
gather the port without having to parse the authority.</description>
          <long-description/>
          <tag line="36" name="return" description="" type="int">
            <type by_reference="false">int</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="SprayFire\Http" line="49" package="SprayFire\Http">
        <name>getPath</name>
        <full_name>getPath</full_name>
        <docblock line="44">
          <description>Returns any path associated with the URI</description>
          <long-description/>
          <tag line="44" name="return" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="SprayFire\Http" line="56" package="SprayFire\Http">
        <name>getQuery</name>
        <full_name>getQuery</full_name>
        <docblock line="51">
          <description>Returns any query string associated with the URI</description>
          <long-description/>
          <tag line="51" name="return" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </method>
    </interface>
  </file>
  <file path="Logging/Exception/FileNotWritable.php" hash="b4123396ce323fd810b2ef49e3389a46" package="Default">
    <docblock line="3">
      <description>Exception thrown if a file passed to a log could not be properly written to.</description>
      <long-description/>
      <tag line="3" name="author" description="Charles Sprayberry"/>
      <tag line="3" name="license" description="Subject to the terms of the LICENSE file in the project root"/>
      <tag line="3" name="version" description="0.1"/>
      <tag line="3" name="since" description="0.1"/>
    </docblock>
    <class final="false" abstract="false" namespace="SprayFire\Logging\Exception" line="21" package="SprayFire\Logging\Exception">
      <extends>\InvalidArgumentException</extends>
      <name>FileNotWritable</name>
      <full_name>\SprayFire\Logging\Exception\FileNotWritable</full_name>
      <docblock line="15">
        <description/>
        <long-description/>
        <tag line="15" name="package" description="SprayFire"/>
        <tag line="15" name="subpackage" description="Logging.Exception"/>
      </docblock>
    </class>
    <parse_markers>
      <critical line="15" code="50005">No short description for class \SprayFire\Logging\Exception\FileNotWritable</critical>
    </parse_markers>
  </file>
  <file path="Logging/FireLogging/DevelopmentLogger.php" hash="0da89a2447c9ae0386db9784a6df97c0" package="Default">
    <docblock line="3">
      <description>Implementation of SprayFire.Logging.Logger intended to be used as a debug tool
during development.</description>
      <long-description/>
      <tag line="3" name="author" description="Charles Sprayberry"/>
      <tag line="3" name="license" description="Subject to the terms of the LICENSE file in the project root"/>
      <tag line="3" name="version" description="0.1"/>
      <tag line="3" name="since" description="0.1"/>
    </docblock>
    <class final="false" abstract="false" namespace="SprayFire\Logging\FireLogging" line="25" package="SprayFire\Logging\FireLogging">
      <extends>\SprayFire\CoreObject</extends>
      <implements>\SprayFire\Logging\Logger</implements>
      <name>DevelopmentLogger</name>
      <full_name>\SprayFire\Logging\FireLogging\DevelopmentLogger</full_name>
      <docblock line="18">
        <description>Be aware that this implementation does not persist the data and any messages
logged will be lost after the request is finished processing.</description>
        <long-description/>
        <tag line="18" name="package" description="SprayFire"/>
        <tag line="18" name="subpackage" description="Logging.FireLogging"/>
      </docblock>
      <property final="false" static="false" visibility="protected" line="32" namespace="SprayFire\Logging\FireLogging" package="Default">
        <name>$loggedMessages</name>
        <default>array()</default>
        <docblock line="27">
          <description>Stores the messages and options passed to DevelopmentLogger::log</description>
          <long-description/>
          <tag line="27" name="property" description="" type="array" variable="">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="SprayFire\Logging\FireLogging" line="45" package="SprayFire\Logging\FireLogging">
        <name>log</name>
        <full_name>log</full_name>
        <docblock line="34">
          <description>Will store the $message and $options passed to be retrieved later by
DevelopmentLogger::getLoggedMessages().</description>
          <long-description>&lt;p&gt;This method will not actually store the information to a persistent source,
the information will be lost after the request is finished.&lt;/p&gt;</long-description>
          <tag line="34" name="param" description="" type="string" variable="$message">
            <type by_reference="false">string</type>
          </tag>
          <tag line="34" name="param" description="" type="mixed" variable="$options">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="34" name="return" description="" type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
        </docblock>
        <argument line="45">
          <name>$message</name>
          <default/>
          <type/>
        </argument>
        <argument line="45">
          <name>$options</name>
          <default>null</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="SprayFire\Logging\FireLogging" line="58" package="SprayFire\Logging\FireLogging">
        <name>getLoggedMessages</name>
        <full_name>getLoggedMessages</full_name>
        <docblock line="53">
          <description>Returns the messages passed to DevelopmentLogger::log</description>
          <long-description/>
          <tag line="53" name="return" description="" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </method>
    </class>
  </file>
  <file path="Logging/FireLogging/ErrorLogLogger.php" hash="d8d343bfa74734322bfba785918473e6" package="Default">
    <docblock line="3">
      <description>Implementation of SprayFire.Logging.Logger</description>
      <long-description/>
      <tag line="3" name="author" description="Charles Sprayberry"/>
      <tag line="3" name="license" description="Subject to the terms of the LICENSE file in the project root"/>
      <tag line="3" name="version" description="0.1"/>
      <tag line="3" name="since" description="0.1"/>
    </docblock>
    <class final="false" abstract="false" namespace="SprayFire\Logging\FireLogging" line="25" package="SprayFire\Logging\FireLogging">
      <extends>\SprayFire\CoreObject</extends>
      <implements>\SprayFire\Logging\Logger</implements>
      <name>ErrorLogLogger</name>
      <full_name>\SprayFire\Logging\FireLogging\ErrorLogLogger</full_name>
      <docblock line="17">
        <description>This implementation will log messages to the PHP provided error_log function.</description>
        <long-description/>
        <tag line="17" name="package" description="SprayFire"/>
        <tag line="17" name="subpackage" description="Logging.FireLogging"/>
        <tag line="17" name="see" description="\SprayFire\Logging\FireLogging\http://us.php.net/manual/en/function.error-log.php" refers="\SprayFire\Logging\FireLogging\http://us.php.net/manual/en/function.error-log.php"/>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="SprayFire\Logging\FireLogging" line="32" package="SprayFire\Logging\FireLogging">
        <name>log</name>
        <full_name>log</full_name>
        <docblock line="27">
          <description/>
          <long-description/>
          <tag line="27" name="param" description="" type="string" variable="$message">
            <type by_reference="false">string</type>
          </tag>
          <tag line="27" name="param" description="" type="null" variable="$options">
            <type by_reference="false">null</type>
          </tag>
          <tag line="27" name="return" description="" type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
        </docblock>
        <argument line="32">
          <name>$message</name>
          <default/>
          <type/>
        </argument>
        <argument line="32">
          <name>$options</name>
          <default>null</default>
          <type/>
        </argument>
      </method>
    </class>
    <parse_markers>
      <error line="27" code="50012">No short description for method log()</error>
    </parse_markers>
  </file>
  <file path="Logging/FireLogging/FileLogger.php" hash="80217582b77f9d10096b3e2b2f0b345e" package="Default">
    <docblock line="3">
      <description>Implementation of SprayFire.Logging.Logger that will store information to a
specific file on disk.</description>
      <long-description/>
      <tag line="3" name="author" description="Charles Sprayberry"/>
      <tag line="3" name="license" description="Subject to the terms of the LICENSE file in the project root"/>
      <tag line="3" name="version" description="0.1"/>
      <tag line="3" name="since" description="0.1"/>
    </docblock>
    <class final="false" abstract="false" namespace="SprayFire\Logging\FireLogging" line="26" package="SprayFire\Logging\FireLogging">
      <extends>\SprayFire\CoreObject</extends>
      <implements>\SprayFire\Logging\Logger</implements>
      <name>FileLogger</name>
      <full_name>\SprayFire\Logging\FireLogging\FileLogger</full_name>
      <docblock line="21">
        <description/>
        <long-description/>
        <tag line="21" name="package" description="SprayFire"/>
        <tag line="21" name="subpackage" description="Logging.FireLogging"/>
      </docblock>
      <property final="false" static="false" visibility="protected" line="33" namespace="SprayFire\Logging\FireLogging" package="Default">
        <name>$LogFile</name>
        <default/>
        <docblock line="28">
          <description>Representation of the file we are writing to.</description>
          <long-description/>
          <tag line="28" name="property" description="" type="\SprayFire\Logging\FireLogging\SplFileObject" variable="">
            <type by_reference="false">\SprayFire\Logging\FireLogging\SplFileObject</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="SprayFire\Logging\FireLogging" line="50" package="SprayFire\Logging\FireLogging">
        <name>__construct</name>
        <full_name>__construct</full_name>
        <docblock line="35">
          <description/>
          <long-description/>
          <tag line="35" name="param" description="" type="\SplFileInfo" variable="$LogFile">
            <type by_reference="false">\SplFileInfo</type>
          </tag>
          <tag line="35" name="param" description="" type="string" variable="$openMode">
            <type by_reference="false">string</type>
          </tag>
          <tag line="35" name="todo" description="Perhaps the fact that we are using an SplFileInfo object is an implementation&#10;detail and not something we should force the user to provide?  We should&#10;take a look at changing $LogFile to a string and we'll take care of the&#10;rest of the stuff.&#10;Or perhaps we should let them provide this object and they can then read&#10;from it in some other code."/>
          <tag line="35" name="throws" description="" type="\InvalidArgumentException">
            <type by_reference="false">\InvalidArgumentException</type>
          </tag>
        </docblock>
        <argument line="50">
          <name>$LogFile</name>
          <default/>
          <type>\SplFileInfo</type>
        </argument>
        <argument line="50">
          <name>$openMode</name>
          <default>'a'</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="SprayFire\Logging\FireLogging" line="82" package="SprayFire\Logging\FireLogging">
        <name>log</name>
        <full_name>log</full_name>
        <docblock line="58">
          <description>Log a message to the \a $LogFile, returning the number of bytes written
or null if there was an error.</description>
          <long-description>&lt;p&gt;Please note that this implementation will lock the file before writing and
unlock the file afterwards.&lt;/p&gt;

&lt;p&gt;This logger accepts options in the form of an associative array with the
following keys:&lt;/p&gt;

&lt;pre&gt;
-------------------------------------------------------------------------
|  Key               |  Description              |  Default Value       |
-------------------------------------------------------------------------
|  'length'          | The # of bytes to write   | \strlen($message)    |
-------------------------------------------------------------------------
|  'timestampFormat' | The format for timestamp  | '[M-d-Y H:i:s]'      |
-------------------------------------------------------------------------
&lt;/pre&gt;</long-description>
          <tag line="58" name="param" description="" type="string" variable="$message">
            <type by_reference="false">string</type>
          </tag>
          <tag line="58" name="param" description="" type="array" variable="$options">
            <type by_reference="false">array</type>
          </tag>
          <tag line="58" name="return" description="" type="mixed">
            <type by_reference="false">mixed</type>
          </tag>
        </docblock>
        <argument line="82">
          <name>$message</name>
          <default/>
          <type/>
        </argument>
        <argument line="82">
          <name>$options</name>
          <default>array()</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="SprayFire\Logging\FireLogging" line="102" package="SprayFire\Logging\FireLogging">
        <name>getTimestampFormat</name>
        <full_name>getTimestampFormat</full_name>
        <docblock line="92">
          <description>Will return a format to be used when logging to a file, the format is
expected to be used with PHP's date() function.</description>
          <long-description>&lt;p&gt;If the $options array has a 'timestampFormat' option the format will be of
the chosen type, otherwise a default value will be returned.&lt;/p&gt;</long-description>
          <tag line="92" name="param" description="" type="array" variable="$options">
            <type by_reference="false">array</type>
          </tag>
          <tag line="92" name="return" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="102">
          <name>$options</name>
          <default/>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="SprayFire\Logging\FireLogging" line="119" package="SprayFire\Logging\FireLogging">
        <name>getTimestampedMessage</name>
        <full_name>getTimestampedMessage</full_name>
        <docblock line="111">
          <description>Will return a string with the timestamp of the creation and the $message
passed appended to one another.</description>
          <long-description/>
          <tag line="111" name="param" description="" type="string" variable="$message">
            <type by_reference="false">string</type>
          </tag>
          <tag line="111" name="param" description="" type="string" variable="$timestampFormat">
            <type by_reference="false">string</type>
          </tag>
          <tag line="111" name="return" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="119">
          <name>$message</name>
          <default/>
          <type/>
        </argument>
        <argument line="119">
          <name>$timestampFormat</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="SprayFire\Logging\FireLogging" line="138" package="SprayFire\Logging\FireLogging">
        <name>getWriteLength</name>
        <full_name>getWriteLength</full_name>
        <docblock line="129">
          <description>Returns the number of bytes that should be written to the file, if the
'length' attribute is set as an integer to $options this value will be
used otherwise the string length of the $message will be returned.</description>
          <long-description/>
          <tag line="129" name="param" description="" type="string" variable="$message">
            <type by_reference="false">string</type>
          </tag>
          <tag line="129" name="param" description="" type="array" variable="$options">
            <type by_reference="false">array</type>
          </tag>
          <tag line="129" name="return" description="" type="int">
            <type by_reference="false">int</type>
          </tag>
        </docblock>
        <argument line="138">
          <name>$message</name>
          <default/>
          <type/>
        </argument>
        <argument line="138">
          <name>$options</name>
          <default/>
          <type>array</type>
        </argument>
      </method>
    </class>
    <parse_markers>
      <critical line="21" code="50005">No short description for class \SprayFire\Logging\FireLogging\FileLogger</critical>
      <error line="35" code="50012">No short description for method __construct()</error>
    </parse_markers>
  </file>
  <file path="Logging/FireLogging/LogOverseer.php" hash="a5a83ed4ece4f5ad59bd7c57c7c98f1b" package="Default">
    <docblock line="3">
      <description>Implementation of SprayFire.Logging.LogOverseer that uses other FireLogging
implementations to provide functionality.</description>
      <long-description/>
      <tag line="3" name="author" description="Charles Sprayberry"/>
      <tag line="3" name="license" description="Subject to the terms of the LICENSE file in the project root"/>
      <tag line="3" name="version" description="0.1"/>
      <tag line="3" name="since" description="0.1"/>
    </docblock>
    <class final="false" abstract="false" namespace="SprayFire\Logging\FireLogging" line="28" package="SprayFire\Logging\FireLogging">
      <extends>\SprayFire\CoreObject</extends>
      <implements>\SprayFire\Logging\LogOverseer</implements>
      <name>LogOverseer</name>
      <full_name>\SprayFire\Logging\FireLogging\LogOverseer</full_name>
      <docblock line="18">
        <description>Provides the ability to log information at a variety of levels and sources.</description>
        <long-description/>
        <tag line="18" name="package" description="SprayFire"/>
        <tag line="18" name="subpackage" description="Logging.FireLogging"/>
        <tag line="18" name="todo" description="We need to create a test to test getting a logger and ensuring that the&#10;appropriate loggers are used for the appropriate calls."/>
      </docblock>
      <property final="false" static="false" visibility="protected" line="36" namespace="SprayFire\Logging\FireLogging" package="Default">
        <name>$EmergencyLogger</name>
        <default/>
        <docblock line="30">
          <description>This SprayFire.Logging.Logger can be retrieved from LogOverseer::getLogger()
by passing SprayFire.Logging.LogOverseer::EMERGENCY_LOGGER.</description>
          <long-description/>
          <tag line="30" name="property" description="" type="\SprayFire\Logging\FireLogging\SprayFire.Logging.Logger" variable="">
            <type by_reference="false">\SprayFire\Logging\FireLogging\SprayFire.Logging.Logger</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="44" namespace="SprayFire\Logging\FireLogging" package="Default">
        <name>$ErrorLogger</name>
        <default/>
        <docblock line="38">
          <description>This SprayFire.Logging.Logger can be retrieved from LogOverseer::getLogger()
by passing SprayFire.Logging.LogOverseer::ERROR_LOGGER.</description>
          <long-description/>
          <tag line="38" name="property" description="" type="\SprayFire\Logging\FireLogging\SprayFire.Logging.Logger" variable="">
            <type by_reference="false">\SprayFire\Logging\FireLogging\SprayFire.Logging.Logger</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="52" namespace="SprayFire\Logging\FireLogging" package="Default">
        <name>$DebugLogger</name>
        <default/>
        <docblock line="46">
          <description>This SprayFire.Logging.Logger can be retrieved from LogOverseer::getLogger()
by passing SprayFire.Logging.LogOverseer::DEBUG_LOGGER</description>
          <long-description/>
          <tag line="46" name="property" description="" type="\SprayFire\Logging\FireLogging\SprayFire.Logging.Logger" variable="">
            <type by_reference="false">\SprayFire\Logging\FireLogging\SprayFire.Logging.Logger</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="60" namespace="SprayFire\Logging\FireLogging" package="Default">
        <name>$InfoLogger</name>
        <default/>
        <docblock line="54">
          <description>This SprayFire.Logging.Logger can be retrieved from LogOverseer::getLogger()
by passing SprayFire.Logging.LogOverseer::INFO_LOGGER</description>
          <long-description/>
          <tag line="54" name="property" description="" type="\SprayFire\Logging\FireLogging\SprayFire.Logging.Logger" variable="">
            <type by_reference="false">\SprayFire\Logging\FireLogging\SprayFire.Logging.Logger</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="SprayFire\Logging\FireLogging" line="68" package="SprayFire\Logging\FireLogging">
        <name>__construct</name>
        <full_name>__construct</full_name>
        <docblock line="62">
          <description/>
          <long-description/>
          <tag line="62" name="param" description="" type="\SprayFire\Logging\Logger" variable="$Emergency">
            <type by_reference="false">\SprayFire\Logging\Logger</type>
          </tag>
          <tag line="62" name="param" description="" type="\SprayFire\Logging\Logger" variable="$Error">
            <type by_reference="false">\SprayFire\Logging\Logger</type>
          </tag>
          <tag line="62" name="param" description="" type="\SprayFire\Logging\Logger" variable="$Debug">
            <type by_reference="false">\SprayFire\Logging\Logger</type>
          </tag>
          <tag line="62" name="param" description="" type="\SprayFire\Logging\Logger" variable="$Info">
            <type by_reference="false">\SprayFire\Logging\Logger</type>
          </tag>
        </docblock>
        <argument line="69">
          <name>$Emergency</name>
          <default/>
          <type>\SprayFire\Logging\Logger</type>
        </argument>
        <argument line="70">
          <name>$Error</name>
          <default/>
          <type>\SprayFire\Logging\Logger</type>
        </argument>
        <argument line="71">
          <name>$Debug</name>
          <default/>
          <type>\SprayFire\Logging\Logger</type>
        </argument>
        <argument line="72">
          <name>$Info</name>
          <default/>
          <type>\SprayFire\Logging\Logger</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="SprayFire\Logging\FireLogging" line="85" package="SprayFire\Logging\FireLogging">
        <name>logDebug</name>
        <full_name>logDebug</full_name>
        <docblock line="80">
          <description/>
          <long-description/>
          <tag line="80" name="param" description="" type="string" variable="$message">
            <type by_reference="false">string</type>
          </tag>
          <tag line="80" name="param" description="" type="array" variable="$options">
            <type by_reference="false">array</type>
          </tag>
          <tag line="80" name="return" description="" type="mixed">
            <type by_reference="false">mixed</type>
          </tag>
        </docblock>
        <argument line="85">
          <name>$message</name>
          <default/>
          <type/>
        </argument>
        <argument line="85">
          <name>$options</name>
          <default>array()</default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="SprayFire\Logging\FireLogging" line="94" package="SprayFire\Logging\FireLogging">
        <name>logEmergency</name>
        <full_name>logEmergency</full_name>
        <docblock line="89">
          <description/>
          <long-description/>
          <tag line="89" name="param" description="" type="string" variable="$message">
            <type by_reference="false">string</type>
          </tag>
          <tag line="89" name="param" description="" type="array" variable="$options">
            <type by_reference="false">array</type>
          </tag>
          <tag line="89" name="return" description="" type="mixed">
            <type by_reference="false">mixed</type>
          </tag>
        </docblock>
        <argument line="94">
          <name>$message</name>
          <default/>
          <type/>
        </argument>
        <argument line="94">
          <name>$options</name>
          <default>array()</default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="SprayFire\Logging\FireLogging" line="103" package="SprayFire\Logging\FireLogging">
        <name>logError</name>
        <full_name>logError</full_name>
        <docblock line="98">
          <description/>
          <long-description/>
          <tag line="98" name="param" description="" type="string" variable="$message">
            <type by_reference="false">string</type>
          </tag>
          <tag line="98" name="param" description="" type="array" variable="$options">
            <type by_reference="false">array</type>
          </tag>
          <tag line="98" name="return" description="" type="mixed">
            <type by_reference="false">mixed</type>
          </tag>
        </docblock>
        <argument line="103">
          <name>$message</name>
          <default/>
          <type/>
        </argument>
        <argument line="103">
          <name>$options</name>
          <default>array()</default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="SprayFire\Logging\FireLogging" line="112" package="SprayFire\Logging\FireLogging">
        <name>logInfo</name>
        <full_name>logInfo</full_name>
        <docblock line="107">
          <description/>
          <long-description/>
          <tag line="107" name="param" description="" type="string" variable="$message">
            <type by_reference="false">string</type>
          </tag>
          <tag line="107" name="param" description="" type="array" variable="$options">
            <type by_reference="false">array</type>
          </tag>
          <tag line="107" name="return" description="" type="mixed">
            <type by_reference="false">mixed</type>
          </tag>
        </docblock>
        <argument line="112">
          <name>$message</name>
          <default/>
          <type/>
        </argument>
        <argument line="112">
          <name>$options</name>
          <default>array()</default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="SprayFire\Logging\FireLogging" line="123" package="SprayFire\Logging\FireLogging">
        <name>getLogger</name>
        <full_name>getLogger</full_name>
        <docblock line="116">
          <description>Will return a SprayFire.Logging.Logger if the passed $loggerType is valid
or null if an invalid type is passed to $loggerType.</description>
          <long-description/>
          <tag line="116" name="param" description="" type="string" variable="$loggerType">
            <type by_reference="false">string</type>
          </tag>
          <tag line="116" name="return" description="" type="mixed">
            <type by_reference="false">mixed</type>
          </tag>
        </docblock>
        <argument line="123">
          <name>$loggerType</name>
          <default/>
          <type/>
        </argument>
      </method>
    </class>
    <parse_markers>
      <error line="62" code="50012">No short description for method __construct()</error>
      <error line="80" code="50012">No short description for method logDebug()</error>
      <error line="89" code="50012">No short description for method logEmergency()</error>
      <error line="98" code="50012">No short description for method logError()</error>
      <error line="107" code="50012">No short description for method logInfo()</error>
    </parse_markers>
  </file>
  <file path="Logging/FireLogging/SysLogLogger.php" hash="e37797e4da2172cc317fbb2b6b5283ed" package="Default">
    <docblock line="3">
      <description>Implementation of SprayFire.Logging.Logger that logs information using syslog.</description>
      <long-description/>
      <tag line="3" name="author" description="Charles Sprayberry"/>
      <tag line="3" name="license" description="Subject to the terms of the LICENSE file in the project root"/>
      <tag line="3" name="version" description="0.1"/>
      <tag line="3" name="since" description="0.1"/>
    </docblock>
    <class final="false" abstract="false" namespace="SprayFire\Logging\FireLogging" line="30" package="SprayFire\Logging\FireLogging">
      <extends>\SprayFire\CoreObject</extends>
      <implements>\SprayFire\Logging\Logger</implements>
      <name>SysLogLogger</name>
      <full_name>\SprayFire\Logging\FireLogging\SysLogLogger</full_name>
      <docblock line="17">
        <description>There are a variety of options that can be passed to the constructor and
log() methods, these options are passed as PHP syslog constants.</description>
        <long-description>&lt;p&gt;The values for constructor options can be found at
http://us.php.net/manual/en/function.openlog.php&lt;/p&gt;

&lt;p&gt;The values for log() options can be found at
http://us.php.net/manual/en/function.syslog.php&lt;/p&gt;</long-description>
        <tag line="17" name="package" description="SprayFire"/>
        <tag line="17" name="subpackage" description="Logging.FireLogging"/>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="SprayFire\Logging\FireLogging" line="39" package="SprayFire\Logging\FireLogging">
        <name>__construct</name>
        <full_name>__construct</full_name>
        <docblock line="32">
          <description>Will open the syslog with the appropriate options, preparing it for use.</description>
          <long-description/>
          <tag line="32" name="param" description="" type="string" variable="$ident">
            <type by_reference="false">string</type>
          </tag>
          <tag line="32" name="param" description="" type="int" variable="$loggingOption">
            <type by_reference="false">int</type>
          </tag>
          <tag line="32" name="param" description="" type="int" variable="$facility">
            <type by_reference="false">int</type>
          </tag>
        </docblock>
        <argument line="39">
          <name>$ident</name>
          <default>'SprayFire'</default>
          <type/>
        </argument>
        <argument line="39">
          <name>$loggingOption</name>
          <default>\LOG_NDELAY</default>
          <type/>
        </argument>
        <argument line="39">
          <name>$facility</name>
          <default>\LOG_USER</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="SprayFire\Logging\FireLogging" line="50" package="SprayFire\Logging\FireLogging">
        <name>log</name>
        <full_name>log</full_name>
        <docblock line="43">
          <description>The options passed to this array should be one of the syslog constants.</description>
          <long-description/>
          <tag line="43" name="param" description="" type="string" variable="$message">
            <type by_reference="false">string</type>
          </tag>
          <tag line="43" name="param" description="" type="int|mixed|null" variable="$options">
            <type by_reference="false">int</type>
            <type by_reference="false">mixed</type>
            <type by_reference="false">null</type>
          </tag>
          <tag line="43" name="return" description="" type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
        </docblock>
        <argument line="50">
          <name>$message</name>
          <default/>
          <type/>
        </argument>
        <argument line="50">
          <name>$options</name>
          <default>\LOG_ERR</default>
          <type/>
        </argument>
      </method>
    </class>
  </file>
  <file path="Logging/Logger.php" hash="fec30b070d55760901b8cbce8dd0f486" package="Default">
    <docblock line="3">
      <description>Interface to facilitate storing log information to a specific source.</description>
      <long-description/>
      <tag line="3" name="author" description="Charles Sprayberry"/>
      <tag line="3" name="license" description="Subject to the terms of the LICENSE file in the project root"/>
      <tag line="3" name="version" description="0.1"/>
      <tag line="3" name="since" description="0.1"/>
    </docblock>
    <interface namespace="SprayFire\Logging" line="23" package="SprayFire\Logging">
      <name>Logger</name>
      <full_name>\SprayFire\Logging\Logger</full_name>
      <extends>\SprayFire\Object</extends>
      <docblock line="16">
        <description>Implementations should be used by SprayFire.Logging.LogOverseer to store information
to a specific source.</description>
        <long-description/>
        <tag line="16" name="package" description="SprayFire"/>
        <tag line="16" name="subpackage" description="Logging"/>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="SprayFire\Logging" line="30" package="SprayFire\Logging">
        <name>log</name>
        <full_name>log</full_name>
        <docblock line="25">
          <description/>
          <long-description/>
          <tag line="25" name="param" description="" type="string" variable="$message">
            <type by_reference="false">string</type>
          </tag>
          <tag line="25" name="param" description="" type="mixed" variable="$options">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="25" name="return" description="" type="mixed">
            <type by_reference="false">mixed</type>
          </tag>
        </docblock>
        <argument line="30">
          <name>$message</name>
          <default/>
          <type/>
        </argument>
        <argument line="30">
          <name>$options</name>
          <default>null</default>
          <type/>
        </argument>
      </method>
    </interface>
    <parse_markers>
      <error line="25" code="50012">No short description for method log()</error>
    </parse_markers>
  </file>
  <file path="Logging/LogOverseer.php" hash="6c46d8d28535f23e1dbf494b68676669" package="Default">
    <docblock line="3">
      <description>Interface to handle logging information to a variety of levels and resources.</description>
      <long-description/>
      <tag line="3" name="author" description="Charles Sprayberry"/>
      <tag line="3" name="license" description="Subject to the terms of the LICENSE file in the project root"/>
      <tag line="3" name="version" description="0.1"/>
      <tag line="3" name="since" description="0.1"/>
    </docblock>
    <interface namespace="SprayFire\Logging" line="24" package="SprayFire\Logging">
      <name>LogOverseer</name>
      <full_name>\SprayFire\Logging\LogOverseer</full_name>
      <extends>\SprayFire\Object</extends>
      <docblock line="16">
        <description>Implementations should use the SprayFire.Logging.Logger interface in some
capacity to provide the appropriate services for logging to at least 4 different
levels: Emergency, Error, Debug and Info.</description>
        <long-description/>
        <tag line="16" name="package" description="SprayFire"/>
        <tag line="16" name="subpackage" description="Logging"/>
      </docblock>
      <constant namespace="SprayFire\Logging" line="30" package="SprayFire\Logging">
        <name>EMERGENCY_LOGGER</name>
        <full_name>EMERGENCY_LOGGER</full_name>
        <value>'emerg'</value>
        <docblock line="26">
          <description>An internal ID of the Emergency logger, primary use case is an argument
to SprayFire.Logging.LogOverseer::getLogger</description>
          <long-description/>
        </docblock>
      </constant>
      <constant namespace="SprayFire\Logging" line="36" package="SprayFire\Logging">
        <name>ERROR_LOGGER</name>
        <full_name>ERROR_LOGGER</full_name>
        <value>'err'</value>
        <docblock line="32">
          <description>An internal ID of the Error logger, primary use case is an argument to
SprayFire.Logging.LogOverseer::getLogger</description>
          <long-description/>
        </docblock>
      </constant>
      <constant namespace="SprayFire\Logging" line="42" package="SprayFire\Logging">
        <name>DEBUG_LOGGER</name>
        <full_name>DEBUG_LOGGER</full_name>
        <value>'deb'</value>
        <docblock line="38">
          <description>An internal ID of the Debug logger, primary use case is an argument to
SprayFire.Logging.LogOverseer::getLogger</description>
          <long-description/>
        </docblock>
      </constant>
      <constant namespace="SprayFire\Logging" line="48" package="SprayFire\Logging">
        <name>INFO_LOGGER</name>
        <full_name>INFO_LOGGER</full_name>
        <value>'inf'</value>
        <docblock line="44">
          <description>An internal ID of the Info logger, primary use case is an argument to
SprayFire.Logging.LogOverseer::getLogger</description>
          <long-description/>
        </docblock>
      </constant>
      <method final="false" abstract="false" static="false" visibility="public" namespace="SprayFire\Logging" line="54" package="SprayFire\Logging">
        <name>logEmergency</name>
        <full_name>logEmergency</full_name>
        <docblock line="50">
          <description/>
          <long-description/>
          <tag line="50" name="param" description="" type="string" variable="$message">
            <type by_reference="false">string</type>
          </tag>
          <tag line="50" name="param" description="" type="array" variable="$options">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
        <argument line="54">
          <name>$message</name>
          <default/>
          <type/>
        </argument>
        <argument line="54">
          <name>$options</name>
          <default>array()</default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="SprayFire\Logging" line="60" package="SprayFire\Logging">
        <name>logError</name>
        <full_name>logError</full_name>
        <docblock line="56">
          <description/>
          <long-description/>
          <tag line="56" name="param" description="" type="string" variable="$message">
            <type by_reference="false">string</type>
          </tag>
          <tag line="56" name="param" description="" type="array" variable="$options">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
        <argument line="60">
          <name>$message</name>
          <default/>
          <type/>
        </argument>
        <argument line="60">
          <name>$options</name>
          <default>array()</default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="SprayFire\Logging" line="66" package="SprayFire\Logging">
        <name>logDebug</name>
        <full_name>logDebug</full_name>
        <docblock line="62">
          <description/>
          <long-description/>
          <tag line="62" name="param" description="" type="string" variable="$message">
            <type by_reference="false">string</type>
          </tag>
          <tag line="62" name="param" description="" type="array" variable="$options">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
        <argument line="66">
          <name>$message</name>
          <default/>
          <type/>
        </argument>
        <argument line="66">
          <name>$options</name>
          <default>array()</default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="SprayFire\Logging" line="72" package="SprayFire\Logging">
        <name>logInfo</name>
        <full_name>logInfo</full_name>
        <docblock line="68">
          <description/>
          <long-description/>
          <tag line="68" name="param" description="" type="string" variable="$message">
            <type by_reference="false">string</type>
          </tag>
          <tag line="68" name="param" description="" type="array" variable="$options">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
        <argument line="72">
          <name>$message</name>
          <default/>
          <type/>
        </argument>
        <argument line="72">
          <name>$options</name>
          <default>array()</default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="SprayFire\Logging" line="81" package="SprayFire\Logging">
        <name>getLogger</name>
        <full_name>getLogger</full_name>
        <docblock line="74">
          <description>For compatibility purposes you should implement this function to accept a
$loggerType using the constants provided by this interface.</description>
          <long-description/>
          <tag line="74" name="param" description="" type="string" variable="$loggerType">
            <type by_reference="false">string</type>
          </tag>
          <tag line="74" name="return" description="" type="\SprayFire\Logging\SprayFire.Logging.Logger">
            <type by_reference="false">\SprayFire\Logging\SprayFire.Logging.Logger</type>
          </tag>
        </docblock>
        <argument line="81">
          <name>$loggerType</name>
          <default/>
          <type/>
        </argument>
      </method>
    </interface>
    <parse_markers>
      <error line="50" code="50012">No short description for method logEmergency()</error>
      <error line="56" code="50012">No short description for method logError()</error>
      <error line="62" code="50012">No short description for method logDebug()</error>
      <error line="68" code="50012">No short description for method logInfo()</error>
    </parse_markers>
  </file>
  <file path="Logging/NullLogger.php" hash="4b3ac05e507dc461e47e0fdbdab5d1d5" package="Default">
    <docblock line="3">
      <description>Implementation of SprayFire.Logging.Logger designed to perform no operations.</description>
      <long-description/>
      <tag line="3" name="author" description="Charles Sprayberry"/>
      <tag line="3" name="license" description="Subject to the terms of the LICENSE file in the project root"/>
      <tag line="3" name="version" description="0.1"/>
      <tag line="3" name="since" description="0.1"/>
    </docblock>
    <class final="false" abstract="false" namespace="SprayFire\Logging" line="25" package="SprayFire\Logging">
      <extends>\SprayFire\CoreObject</extends>
      <implements>\SprayFire\Logging\Logger</implements>
      <name>NullLogger</name>
      <full_name>\SprayFire\Logging\NullLogger</full_name>
      <docblock line="16">
        <description>Primary use case for this object is as a return value to an implementation of
a Logger factory.</description>
        <long-description/>
        <tag line="16" name="package" description="SprayFire"/>
        <tag line="16" name="subpackage" description="Logging"/>
        <tag line="16" name="codeCoverageIgnore" description=""/>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="SprayFire\Logging" line="34" package="SprayFire\Logging">
        <name>log</name>
        <full_name>log</full_name>
        <docblock line="27">
          <description>Performs no operation, always returns true.</description>
          <long-description/>
          <tag line="27" name="param" description="" type="string" variable="$message">
            <type by_reference="false">string</type>
          </tag>
          <tag line="27" name="param" description="" type="mixed" variable="$options">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="27" name="return" description="" type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
        </docblock>
        <argument line="34">
          <name>$message</name>
          <default/>
          <type/>
        </argument>
        <argument line="34">
          <name>$options</name>
          <default>null</default>
          <type/>
        </argument>
      </method>
    </class>
  </file>
  <file path="Mediator/Callback.php" hash="ca4c2018c576b9f3cfdcbffe934c3abb" package="Default">
    <docblock line="3">
      <description>Interface to abstract the invocation of event callbacks by SprayFire.Mediator.Mediator</description>
      <long-description/>
      <tag line="3" name="author" description="Charles Sprayberry"/>
      <tag line="3" name="license" description="Subject to the terms of the LICENSE file in the project root"/>
      <tag line="3" name="version" description="0.1"/>
      <tag line="3" name="since" description="0.1"/>
    </docblock>
    <interface namespace="SprayFire\Mediator" line="21" package="SprayFire\Mediator">
      <name>Callback</name>
      <full_name>\SprayFire\Mediator\Callback</full_name>
      <extends>\SprayFire\Object</extends>
      <docblock line="16">
        <description/>
        <long-description/>
        <tag line="16" name="package" description="SprayFire"/>
        <tag line="16" name="subpackage" description="Mediator"/>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="SprayFire\Mediator" line="28" package="SprayFire\Mediator">
        <name>getEventName</name>
        <full_name>getEventName</full_name>
        <docblock line="23">
          <description>Should be the name of the event that this callback should be invoked for.</description>
          <long-description/>
          <tag line="23" name="return" description="" type="string|array">
            <type by_reference="false">string</type>
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="SprayFire\Mediator" line="36" package="SprayFire\Mediator">
        <name>invoke</name>
        <full_name>invoke</full_name>
        <docblock line="30">
          <description>Invoke whatever function is being stored in the callback</description>
          <long-description/>
          <tag line="30" name="param" description="" type="\SprayFire\Mediator\Event" variable="$Event">
            <type by_reference="false">\SprayFire\Mediator\Event</type>
          </tag>
          <tag line="30" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
        <argument line="36">
          <name>$Event</name>
          <default/>
          <type>\SprayFire\Mediator\Event</type>
        </argument>
      </method>
    </interface>
  </file>
  <file path="Mediator/Event.php" hash="ff11a720a67072d3d802404a09b2ee87" package="Default">
    <docblock line="3">
      <description>Interface representing an event that can be triggered by a SprayFire.Mediator.Mediator.</description>
      <long-description/>
      <tag line="3" name="author" description="Charles Sprayberry"/>
      <tag line="3" name="license" description="Subject to the terms of the LICENSE file in the project root"/>
      <tag line="3" name="version" description="0.1"/>
      <tag line="3" name="since" description="0.1"/>
    </docblock>
    <interface namespace="SprayFire\Mediator" line="20" package="SprayFire\Mediator">
      <name>Event</name>
      <full_name>\SprayFire\Mediator\Event</full_name>
      <extends>\SprayFire\Object</extends>
      <docblock line="16">
        <description/>
        <long-description/>
        <tag line="16" name="package" description="SprayFire"/>
        <tag line="16" name="subpackage" description="Mediator"/>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="SprayFire\Mediator" line="25" package="SprayFire\Mediator">
        <name>getEventName</name>
        <full_name>getEventName</full_name>
        <docblock line="22">
          <description/>
          <long-description/>
          <tag line="22" name="return" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="SprayFire\Mediator" line="32" package="SprayFire\Mediator">
        <name>getTarget</name>
        <full_name>getTarget</full_name>
        <docblock line="27">
          <description>Should return the object of the target for the event.</description>
          <long-description/>
          <tag line="27" name="return" description="" type="Object">
            <type by_reference="false">Object</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="SprayFire\Mediator" line="39" package="SprayFire\Mediator">
        <name>getArguments</name>
        <full_name>getArguments</full_name>
        <docblock line="34">
          <description>Should return an array of arguments passed to the event triggering.</description>
          <long-description/>
          <tag line="34" name="return" description="" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </method>
    </interface>
    <parse_markers>
      <error line="22" code="50012">No short description for method getEventName()</error>
    </parse_markers>
  </file>
  <file path="Mediator/Exception/DuplicateRegisteredEvent.php" hash="c0b0e65affec128d3c437859f3436a98" package="Default">
    <docblock line="3">
      <description>An exception is thrown if an event is attempted to be registered more than one
time.</description>
      <long-description/>
      <tag line="3" name="author" description="Charles Sprayberry"/>
      <tag line="3" name="license" description="Subject to the terms of the LICENSE file in the project root"/>
      <tag line="3" name="version" description="0.1"/>
      <tag line="3" name="since" description="0.1"/>
    </docblock>
    <class final="false" abstract="false" namespace="SprayFire\Mediator\Exception" line="20" package="SprayFire\Mediator\Exception">
      <extends>\InvalidArgumentException</extends>
      <name>DuplicateRegisteredEvent</name>
      <full_name>\SprayFire\Mediator\Exception\DuplicateRegisteredEvent</full_name>
      <docblock line="16">
        <description/>
        <long-description/>
        <tag line="16" name="package" description="SprayFire"/>
        <tag line="16" name="subpackage" description="Mediator.Exception"/>
      </docblock>
    </class>
    <parse_markers>
      <critical line="16" code="50005">No short description for class \SprayFire\Mediator\Exception\DuplicateRegisteredEvent</critical>
    </parse_markers>
  </file>
  <file path="Mediator/Exception/EventNotRegistered.php" hash="72dac36773b7b1435057eb568d600ab8" package="Default">
    <docblock line="3">
      <description>Exception thrown if an event is attempted to be triggered or have callbacks added
to that have not been registered with the \SprayFire\Mediator\FireMediator\EventRegistry
implementation.</description>
      <long-description/>
      <tag line="3" name="author" description="Charles Sprayberry"/>
      <tag line="3" name="license" description="Subject to the terms of the LICENSE file in the project root"/>
      <tag line="3" name="version" description="0.1"/>
      <tag line="3" name="since" description="0.1"/>
    </docblock>
    <class final="false" abstract="false" namespace="SprayFire\Mediator\Exception" line="23" package="SprayFire\Mediator\Exception">
      <extends>\RuntimeException</extends>
      <name>EventNotRegistered</name>
      <full_name>\SprayFire\Mediator\Exception\EventNotRegistered</full_name>
      <docblock line="17">
        <description/>
        <long-description/>
        <tag line="17" name="package" description="SprayFire"/>
        <tag line="17" name="subpackage" description="Mediator.Exception"/>
      </docblock>
    </class>
    <parse_markers>
      <critical line="17" code="50005">No short description for class \SprayFire\Mediator\Exception\EventNotRegistered</critical>
    </parse_markers>
  </file>
  <file path="Mediator/Exception/NotCallableCallback.php" hash="217105521255dc4a93979b93b5ce7749" package="Default">
    <docblock line="3">
      <description>An exception thrown if a not callable parameter is passed to a Callback object</description>
      <long-description/>
      <tag line="3" name="author" description="Charles Sprayberry"/>
      <tag line="3" name="license" description="Subject to the terms of the LICENSE file in the project root"/>
      <tag line="3" name="version" description="0.1"/>
      <tag line="3" name="since" description="0.1"/>
    </docblock>
    <class final="false" abstract="false" namespace="SprayFire\Mediator\Exception" line="21" package="SprayFire\Mediator\Exception">
      <extends>\InvalidArgumentException</extends>
      <name>NotCallableCallback</name>
      <full_name>\SprayFire\Mediator\Exception\NotCallableCallback</full_name>
      <docblock line="15">
        <description/>
        <long-description/>
        <tag line="15" name="package" description="SprayFire"/>
        <tag line="15" name="subpackage" description="Mediator.Exception"/>
      </docblock>
    </class>
    <parse_markers>
      <critical line="15" code="50005">No short description for class \SprayFire\Mediator\Exception\NotCallableCallback</critical>
    </parse_markers>
  </file>
  <file path="Mediator/FireMediator/Callback.php" hash="ed2d4a262e490d8334aff2da24cab75a" package="Default">
    <docblock line="3">
      <description>Implementation of SprayFire.Mediator.Callback that abstracts away the invoking
of various functions.</description>
      <long-description/>
      <tag line="3" name="author" description="Charles Sprayberry"/>
      <tag line="3" name="license" description="Subject to the terms of the LICENSE file in the project root"/>
      <tag line="3" name="version" description="0.1"/>
      <tag line="3" name="since" description="0.1"/>
    </docblock>
    <class final="false" abstract="false" namespace="SprayFire\Mediator\FireMediator" line="23" package="SprayFire\Mediator\FireMediator">
      <extends>\SprayFire\CoreObject</extends>
      <implements>\SprayFire\Mediator\Callback</implements>
      <name>Callback</name>
      <full_name>\SprayFire\Mediator\FireMediator\Callback</full_name>
      <docblock line="19">
        <description/>
        <long-description/>
        <tag line="19" name="package" description="SprayFire"/>
        <tag line="19" name="subpackage" description="Mediator.FireMediator"/>
      </docblock>
      <property final="false" static="false" visibility="protected" line="30" namespace="SprayFire\Mediator\FireMediator" package="Default">
        <name>$eventName</name>
        <default/>
        <docblock line="25">
          <description>Holds the name of the event that this function should be invoked for.</description>
          <long-description/>
          <tag line="25" name="property" description="" type="string" variable="">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="37" namespace="SprayFire\Mediator\FireMediator" package="Default">
        <name>$function</name>
        <default/>
        <docblock line="32">
          <description>Holds the callable function, in any of PHP's valid callable function syntaxes.</description>
          <long-description/>
          <tag line="32" name="property" description="" type="mixed" variable="">
            <type by_reference="false">mixed</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="SprayFire\Mediator\FireMediator" line="46" package="SprayFire\Mediator\FireMediator">
        <name>__construct</name>
        <full_name>__construct</full_name>
        <docblock line="39">
          <description>If the $function is not callable an exception will be thrown.</description>
          <long-description/>
          <tag line="39" name="param" description="" type="string" variable="$eventName">
            <type by_reference="false">string</type>
          </tag>
          <tag line="39" name="param" description="" type="callable" variable="$function">
            <type by_reference="false">callable</type>
          </tag>
          <tag line="39" name="throws" description="" type="\InvalidArgumentException">
            <type by_reference="false">\InvalidArgumentException</type>
          </tag>
        </docblock>
        <argument line="46">
          <name>$eventName</name>
          <default/>
          <type/>
        </argument>
        <argument line="46">
          <name>$function</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="SprayFire\Mediator\FireMediator" line="57" package="SprayFire\Mediator\FireMediator">
        <name>getEventName</name>
        <full_name>getEventName</full_name>
        <docblock line="54">
          <description/>
          <long-description/>
          <tag line="54" name="return" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="SprayFire\Mediator\FireMediator" line="68" package="SprayFire\Mediator\FireMediator">
        <name>invoke</name>
        <full_name>invoke</full_name>
        <docblock line="61">
          <description>Invokes the $function stored by the callback, passing along the $Event
object as the one and only parameter.</description>
          <long-description/>
          <tag line="61" name="param" description="" type="\SprayFire\Mediator\Event" variable="$Event">
            <type by_reference="false">\SprayFire\Mediator\Event</type>
          </tag>
          <tag line="61" name="return" description="" type="mixed">
            <type by_reference="false">mixed</type>
          </tag>
        </docblock>
        <argument line="68">
          <name>$Event</name>
          <default/>
          <type>\SprayFire\Mediator\Event</type>
        </argument>
      </method>
    </class>
    <parse_markers>
      <critical line="19" code="50005">No short description for class \SprayFire\Mediator\FireMediator\Callback</critical>
      <error line="54" code="50012">No short description for method getEventName()</error>
    </parse_markers>
  </file>
  <file path="Mediator/FireMediator/CallbackStorage.php" hash="fba69c57063aa5d4f255c740b1a50306" package="Default">
    <docblock line="3">
      <description>A module specific implementation used by the \SprayFire\Mediator\FireMediator\Mediator
to store and retrieve \SprayFire\Mediator\Event objects associated to the given
Event's name.</description>
      <long-description/>
      <tag line="3" name="author" description="Charles Sprayberry"/>
      <tag line="3" name="license" description="Subject to the terms of the LICENSE file in the project root"/>
      <tag line="3" name="version" description="0.1"/>
      <tag line="3" name="since" description="0.1"/>
    </docblock>
    <class final="false" abstract="false" namespace="SprayFire\Mediator\FireMediator" line="24" package="SprayFire\Mediator\FireMediator">
      <extends>\SprayFire\CoreObject</extends>
      <name>CallbackStorage</name>
      <full_name>\SprayFire\Mediator\FireMediator\CallbackStorage</full_name>
      <docblock line="18">
        <description/>
        <long-description/>
        <tag line="18" name="package" description="SprayFire"/>
        <tag line="18" name="subpackage" description="Mediator.FireMediator"/>
      </docblock>
      <property final="false" static="false" visibility="protected" line="32" namespace="SprayFire\Mediator\FireMediator" package="Default">
        <name>$callbackContainers</name>
        <default>array()</default>
        <docblock line="26">
          <description>Holds arrays of callbacks with each array associated to a key that is the
event's name.</description>
          <long-description/>
          <tag line="26" name="property" description="" type="array" variable="">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="SprayFire\Mediator\FireMediator" line="38" package="SprayFire\Mediator\FireMediator">
        <name>hasContainer</name>
        <full_name>hasContainer</full_name>
        <docblock line="34">
          <description/>
          <long-description/>
          <tag line="34" name="param" description="" type="string" variable="$eventName">
            <type by_reference="false">string</type>
          </tag>
          <tag line="34" name="return" description="" type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
        </docblock>
        <argument line="38">
          <name>$eventName</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="SprayFire\Mediator\FireMediator" line="46" package="SprayFire\Mediator\FireMediator">
        <name>createContainer</name>
        <full_name>createContainer</full_name>
        <docblock line="42">
          <description/>
          <long-description/>
          <tag line="42" name="param" description="" type="string" variable="$eventName">
            <type by_reference="false">string</type>
          </tag>
          <tag line="42" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
        <argument line="46">
          <name>$eventName</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="SprayFire\Mediator\FireMediator" line="56" package="SprayFire\Mediator\FireMediator">
        <name>addCallback</name>
        <full_name>addCallback</full_name>
        <docblock line="52">
          <description/>
          <long-description/>
          <tag line="52" name="param" description="" type="\SprayFire\Mediator\Callback" variable="$Callback">
            <type by_reference="false">\SprayFire\Mediator\Callback</type>
          </tag>
          <tag line="52" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
        <argument line="56">
          <name>$Callback</name>
          <default/>
          <type>\SprayFire\Mediator\Callback</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="SprayFire\Mediator\FireMediator" line="67" package="SprayFire\Mediator\FireMediator">
        <name>removeContainer</name>
        <full_name>removeContainer</full_name>
        <docblock line="60">
          <description>Note that this will remove the entire container and all callbacks associated
to the $eventName.</description>
          <long-description/>
          <tag line="60" name="param" description="" type="string" variable="$eventName">
            <type by_reference="false">string</type>
          </tag>
          <tag line="60" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
        <argument line="67">
          <name>$eventName</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="SprayFire\Mediator\FireMediator" line="79" package="SprayFire\Mediator\FireMediator">
        <name>removeCallback</name>
        <full_name>removeCallback</full_name>
        <docblock line="73">
          <description>Adding code to remove a specific callback associated to an event name.</description>
          <long-description/>
          <tag line="73" name="param" description="" type="\SprayFire\Mediator\Callback" variable="$Callback">
            <type by_reference="false">\SprayFire\Mediator\Callback</type>
          </tag>
          <tag line="73" name="return" description="" type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
        </docblock>
        <argument line="79">
          <name>$Callback</name>
          <default/>
          <type>\SprayFire\Mediator\Callback</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="SprayFire\Mediator\FireMediator" line="99" package="SprayFire\Mediator\FireMediator">
        <name>getCallbacks</name>
        <full_name>getCallbacks</full_name>
        <docblock line="92">
          <description>Will always return an array, if no container is found for the $eventName
an empty array will be returned.</description>
          <long-description/>
          <tag line="92" name="param" description="" type="string" variable="$eventName">
            <type by_reference="false">string</type>
          </tag>
          <tag line="92" name="return" description="" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
        <argument line="99">
          <name>$eventName</name>
          <default/>
          <type/>
        </argument>
      </method>
    </class>
    <parse_markers>
      <critical line="18" code="50005">No short description for class \SprayFire\Mediator\FireMediator\CallbackStorage</critical>
      <error line="34" code="50012">No short description for method hasContainer()</error>
      <error line="42" code="50012">No short description for method createContainer()</error>
      <error line="52" code="50012">No short description for method addCallback()</error>
    </parse_markers>
  </file>
  <file path="Mediator/FireMediator/Event.php" hash="91b2fab5713ffdfd2df00d2c2fe0ef61" package="Default">
    <docblock line="3">
      <description/>
      <long-description/>
      <tag line="3" name="author" description="Charles Sprayberry"/>
      <tag line="3" name="license" description="Governed by the LICENSE file found in the root directory of this source&#10;code"/>
    </docblock>
    <class final="false" abstract="false" namespace="SprayFire\Mediator\FireMediator" line="19" package="SprayFire\Mediator\FireMediator">
      <extends>\SprayFire\CoreObject</extends>
      <implements>\SprayFire\Mediator\Event</implements>
      <name>Event</name>
      <full_name>\SprayFire\Mediator\FireMediator\Event</full_name>
      <docblock line="15">
        <description/>
        <long-description/>
        <tag line="15" name="package" description="SprayFire"/>
        <tag line="15" name="subpackage" description="Mediator.FireMediator"/>
      </docblock>
      <property final="false" static="false" visibility="protected" line="21" namespace="SprayFire\Mediator\FireMediator" package="Default">
        <name>$event</name>
        <default/>
      </property>
      <property final="false" static="false" visibility="protected" line="23" namespace="SprayFire\Mediator\FireMediator" package="Default">
        <name>$Target</name>
        <default/>
      </property>
      <property final="false" static="false" visibility="protected" line="25" namespace="SprayFire\Mediator\FireMediator" package="Default">
        <name>$arguments</name>
        <default/>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="SprayFire\Mediator\FireMediator" line="27" package="SprayFire\Mediator\FireMediator">
        <name>__construct</name>
        <full_name>__construct</full_name>
        <argument line="27">
          <name>$event</name>
          <default/>
          <type/>
        </argument>
        <argument line="27">
          <name>$Target</name>
          <default/>
          <type/>
        </argument>
        <argument line="27">
          <name>$arguments</name>
          <default>array()</default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="SprayFire\Mediator\FireMediator" line="33" package="SprayFire\Mediator\FireMediator">
        <name>getEventName</name>
        <full_name>getEventName</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="SprayFire\Mediator\FireMediator" line="37" package="SprayFire\Mediator\FireMediator">
        <name>getTarget</name>
        <full_name>getTarget</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="SprayFire\Mediator\FireMediator" line="41" package="SprayFire\Mediator\FireMediator">
        <name>getArguments</name>
        <full_name>getArguments</full_name>
      </method>
    </class>
    <parse_markers>
      <critical line="3" code="50008">No short description for file Mediator/FireMediator/Event.php</critical>
      <critical line="15" code="50005">No short description for class \SprayFire\Mediator\FireMediator\Event</critical>
      <error line="21" code="50018">No DocBlock was found for property $event</error>
      <error line="23" code="50018">No DocBlock was found for property $Target</error>
      <error line="25" code="50018">No DocBlock was found for property $arguments</error>
      <error line="27" code="50010">No DocBlock was found for method __construct()</error>
      <error line="33" code="50010">No DocBlock was found for method getEventName()</error>
      <error line="37" code="50010">No DocBlock was found for method getTarget()</error>
      <error line="41" code="50010">No DocBlock was found for method getArguments()</error>
    </parse_markers>
  </file>
  <file path="Mediator/FireMediator/EventRegistry.php" hash="21afb813f203d6616d576134bac54217" package="Default">
    <docblock line="3">
      <description>A registry of events used by \SprayFire\Mediator\FireMediator\Mediator to determine
what events should store callbacks and trigger events.</description>
      <long-description/>
      <tag line="3" name="author" description="Charles Sprayberry"/>
      <tag line="3" name="license" description="Subject to the terms of the LICENSE file in the project root"/>
      <tag line="3" name="version" description="0.1"/>
      <tag line="3" name="since" description="0.1"/>
    </docblock>
    <class final="false" abstract="false" namespace="SprayFire\Mediator\FireMediator" line="30" package="SprayFire\Mediator\FireMediator">
      <extends>\SprayFire\CoreObject</extends>
      <implements>\IteratorAggregate</implements>
      <name>EventRegistry</name>
      <full_name>\SprayFire\Mediator\FireMediator\EventRegistry</full_name>
      <docblock line="20">
        <description>This is a private package implementation that is designed to be used by the
SprayFire.Mediator.FireMediator implementations.</description>
        <long-description>&lt;p&gt;This object is provided as a default service by SprayFire and you can add your
own custom events to this object in your application's bootstraps.&lt;/p&gt;</long-description>
        <tag line="20" name="package" description="SprayFire"/>
        <tag line="20" name="subpackage" description="Mediator.FireMediator"/>
      </docblock>
      <property final="false" static="false" visibility="protected" line="37" namespace="SprayFire\Mediator\FireMediator" package="Default">
        <name>$registry</name>
        <default>array()</default>
        <docblock line="32">
          <description>Key value array storing [$eventName =&gt; $targetType]</description>
          <long-description/>
          <tag line="32" name="property" description="" type="array" variable="">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="42" namespace="SprayFire\Mediator\FireMediator" package="Default">
        <name>$Storage</name>
        <default/>
        <docblock line="39">
          <description/>
          <long-description/>
          <tag line="39" name="property" description="" type="\SprayFire\Mediator\FireMediator\CallbackStorage" variable="">
            <type by_reference="false">\SprayFire\Mediator\FireMediator\CallbackStorage</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="SprayFire\Mediator\FireMediator" line="47" package="SprayFire\Mediator\FireMediator">
        <name>__construct</name>
        <full_name>__construct</full_name>
        <docblock line="44">
          <description/>
          <long-description/>
          <tag line="44" name="param" description="" type="\SprayFire\Mediator\FireMediator\CallbackStorage" variable="$Storage">
            <type by_reference="false">\SprayFire\Mediator\FireMediator\CallbackStorage</type>
          </tag>
        </docblock>
        <argument line="47">
          <name>$Storage</name>
          <default/>
          <type>\SprayFire\Mediator\FireMediator\CallbackStorage</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="SprayFire\Mediator\FireMediator" line="61" package="SprayFire\Mediator\FireMediator">
        <name>registerEvent</name>
        <full_name>registerEvent</full_name>
        <docblock line="51">
          <description>Adds an event and expected target type to the registry.</description>
          <long-description>&lt;p&gt;An exception is thrown if the $eventName has already been registered.&lt;/p&gt;</long-description>
          <tag line="51" name="param" description="" type="string" variable="$eventName">
            <type by_reference="false">string</type>
          </tag>
          <tag line="51" name="param" description="Java or PHP style class name" type="string" variable="$targetType">
            <type by_reference="false">string</type>
          </tag>
          <tag line="51" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
          <tag line="51" name="throws" description="" type="\SprayFire\Mediator\Exception\DuplicateRegisteredEvent">
            <type by_reference="false">\SprayFire\Mediator\Exception\DuplicateRegisteredEvent</type>
          </tag>
        </docblock>
        <argument line="61">
          <name>$eventName</name>
          <default/>
          <type/>
        </argument>
        <argument line="61">
          <name>$targetType</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="SprayFire\Mediator\FireMediator" line="75" package="SprayFire\Mediator\FireMediator">
        <name>unregisterEvent</name>
        <full_name>unregisterEvent</full_name>
        <docblock line="69">
          <description>Removes an event from the registry, if that event has already been registered.</description>
          <long-description/>
          <tag line="69" name="param" description="" type="string" variable="$eventName">
            <type by_reference="false">string</type>
          </tag>
          <tag line="69" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
        <argument line="75">
          <name>$eventName</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="SprayFire\Mediator\FireMediator" line="90" package="SprayFire\Mediator\FireMediator">
        <name>getEventTargetType</name>
        <full_name>getEventTargetType</full_name>
        <docblock line="83">
          <description>Will return a Java style or PHP style name, depending on the type of value
passed in the constructor of this implementation.</description>
          <long-description/>
          <tag line="83" name="param" description="" type="string" variable="$eventName">
            <type by_reference="false">string</type>
          </tag>
          <tag line="83" name="return" description="" type="string|false">
            <type by_reference="false">string</type>
            <type by_reference="false">false</type>
          </tag>
        </docblock>
        <argument line="90">
          <name>$eventName</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="SprayFire\Mediator\FireMediator" line="103" package="SprayFire\Mediator\FireMediator">
        <name>hasEvent</name>
        <full_name>hasEvent</full_name>
        <docblock line="97">
          <description>Returns whether or not the event has been registered.</description>
          <long-description/>
          <tag line="97" name="param" description="" type="string" variable="$eventName">
            <type by_reference="false">string</type>
          </tag>
          <tag line="97" name="return" description="" type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
        </docblock>
        <argument line="103">
          <name>$eventName</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="SprayFire\Mediator\FireMediator" line="112" package="SprayFire\Mediator\FireMediator">
        <name>getIterator</name>
        <full_name>getIterator</full_name>
        <docblock line="107">
          <description>Allows the registry to be iterated over.</description>
          <long-description/>
          <tag line="107" name="return" description="" type="\SprayFire\Mediator\FireMediator\Traversable">
            <type by_reference="false">\SprayFire\Mediator\FireMediator\Traversable</type>
          </tag>
        </docblock>
      </method>
    </class>
    <parse_markers>
      <critical line="39" code="50019">No short description for property $Storage</critical>
      <error line="44" code="50012">No short description for method __construct()</error>
    </parse_markers>
  </file>
  <file path="Mediator/FireMediator/Mediator.php" hash="df5d14ebe763da3b2fa2ed4a18ff888a" package="Default">
    <docblock line="3">
      <description>An implementation of SprayFire.Mediator.Mediator used to handle event triggering
for the SprayFire framework and your application.</description>
      <long-description/>
      <tag line="3" name="author" description="Charles Sprayberry"/>
      <tag line="3" name="license" description="Subject to the terms of the LICENSE file in the project root"/>
      <tag line="3" name="version" description="0.1"/>
      <tag line="3" name="since" description="0.1"/>
    </docblock>
    <class final="false" abstract="false" namespace="SprayFire\Mediator\FireMediator" line="24" package="SprayFire\Mediator\FireMediator">
      <extends>\SprayFire\CoreObject</extends>
      <implements>\SprayFire\Mediator\Mediator</implements>
      <name>Mediator</name>
      <full_name>\SprayFire\Mediator\FireMediator\Mediator</full_name>
      <docblock line="20">
        <description/>
        <long-description/>
        <tag line="20" name="package" description="SprayFire"/>
        <tag line="20" name="subpackage" description="Mediator.FireMediator"/>
      </docblock>
      <property final="false" static="false" visibility="protected" line="31" namespace="SprayFire\Mediator\FireMediator" package="Default">
        <name>$eventCallbacks</name>
        <default>array()</default>
        <docblock line="26">
          <description>A multi-dimensional array that stores the callbacks for various events</description>
          <long-description/>
          <tag line="26" name="property" description="" type="array" variable="">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="38" namespace="SprayFire\Mediator\FireMediator" package="Default">
        <name>$Registry</name>
        <default/>
        <docblock line="33">
          <description>Stores the events that are able to be triggered by this implementation.</description>
          <long-description/>
          <tag line="33" name="property" description="" type="\SprayFire\Mediator\FireMediator\EventRegistry" variable="">
            <type by_reference="false">\SprayFire\Mediator\FireMediator\EventRegistry</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="43" namespace="SprayFire\Mediator\FireMediator" package="Default">
        <name>$Storage</name>
        <default/>
        <docblock line="40">
          <description/>
          <long-description/>
          <tag line="40" name="property" description="" type="\SprayFire\Mediator\FireMediator\CallbackStorage" variable="">
            <type by_reference="false">\SprayFire\Mediator\FireMediator\CallbackStorage</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="SprayFire\Mediator\FireMediator" line="48" package="SprayFire\Mediator\FireMediator">
        <name>__construct</name>
        <full_name>__construct</full_name>
        <docblock line="45">
          <description/>
          <long-description/>
          <tag line="45" name="param" description="" type="\SprayFire\Mediator\FireMediator\EventRegistry" variable="$Registry">
            <type by_reference="false">\SprayFire\Mediator\FireMediator\EventRegistry</type>
          </tag>
        </docblock>
        <argument line="48">
          <name>$Registry</name>
          <default/>
          <type>\SprayFire\Mediator\FireMediator\EventRegistry</type>
        </argument>
        <argument line="48">
          <name>$Storage</name>
          <default/>
          <type>\SprayFire\Mediator\FireMediator\CallbackStorage</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="SprayFire\Mediator\FireMediator" line="61" package="SprayFire\Mediator\FireMediator">
        <name>addCallback</name>
        <full_name>addCallback</full_name>
        <docblock line="53">
          <description>Will add the $Callback to be invoked when the $Callback::getEventName() is
triggered.</description>
          <long-description/>
          <tag line="53" name="param" description="" type="\SprayFire\Mediator\Callback" variable="$Callback">
            <type by_reference="false">\SprayFire\Mediator\Callback</type>
          </tag>
          <tag line="53" name="return" description="" type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
          <tag line="53" name="throws" description="" type="\SprayFire\Mediator\Exception\EventNotRegistered">
            <type by_reference="false">\SprayFire\Mediator\Exception\EventNotRegistered</type>
          </tag>
        </docblock>
        <argument line="61">
          <name>$Callback</name>
          <default/>
          <type>\SprayFire\Mediator\Callback</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="SprayFire\Mediator\FireMediator" line="79" package="SprayFire\Mediator\FireMediator">
        <name>removeCallback</name>
        <full_name>removeCallback</full_name>
        <docblock line="70">
          <description>Will remove the $Callback associated to the $Callback::getEventName().</description>
          <long-description>&lt;p&gt;This implementation uses $Callback::equals() from the SprayFire.Object
interface to ensure that the appropriate object is removed.&lt;/p&gt;</long-description>
          <tag line="70" name="param" description="" type="\SprayFire\Mediator\Callback" variable="$Callback">
            <type by_reference="false">\SprayFire\Mediator\Callback</type>
          </tag>
          <tag line="70" name="return" description="" type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
        </docblock>
        <argument line="79">
          <name>$Callback</name>
          <default/>
          <type>\SprayFire\Mediator\Callback</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="SprayFire\Mediator\FireMediator" line="95" package="SprayFire\Mediator\FireMediator">
        <name>getCallbacks</name>
        <full_name>getCallbacks</full_name>
        <docblock line="87">
          <description>If the $eventName is not a validly registered event an empty array will
be returned otherwise will return array of whatever callbacks are attached
to the $eventName.</description>
          <long-description/>
          <tag line="87" name="param" description="" type="string" variable="$eventName">
            <type by_reference="false">string</type>
          </tag>
          <tag line="87" name="return" description="" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
        <argument line="95">
          <name>$eventName</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="SprayFire\Mediator\FireMediator" line="106" package="SprayFire\Mediator\FireMediator">
        <name>triggerEvent</name>
        <full_name>triggerEvent</full_name>
        <docblock line="99">
          <description/>
          <long-description/>
          <tag line="99" name="param" description="" type="string" variable="$eventName">
            <type by_reference="false">string</type>
          </tag>
          <tag line="99" name="param" description="" type="object" variable="$Target">
            <type by_reference="false">object</type>
          </tag>
          <tag line="99" name="param" description="" type="array" variable="$arguments">
            <type by_reference="false">array</type>
          </tag>
          <tag line="99" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
          <tag line="99" name="throws" description="" type="\SprayFire\Mediator\Exception\EventNotRegistered">
            <type by_reference="false">\SprayFire\Mediator\Exception\EventNotRegistered</type>
          </tag>
        </docblock>
        <argument line="106">
          <name>$eventName</name>
          <default/>
          <type/>
        </argument>
        <argument line="106">
          <name>$Target</name>
          <default/>
          <type/>
        </argument>
        <argument line="106">
          <name>$arguments</name>
          <default>array()</default>
          <type>array</type>
        </argument>
      </method>
    </class>
    <parse_markers>
      <critical line="20" code="50005">No short description for class \SprayFire\Mediator\FireMediator\Mediator</critical>
      <critical line="40" code="50019">No short description for property $Storage</critical>
      <error line="45" code="50012">No short description for method __construct()</error>
      <error line="45" code="50015">Argument $Storage is missing from the Docblock of __construct()</error>
      <error line="99" code="50012">No short description for method triggerEvent()</error>
    </parse_markers>
  </file>
  <file path="Mediator/Mediator.php" hash="c7aad97bbf845fa115ef820b5015d882" package="Default">
    <docblock line="3">
      <description>Interface to implement a Mediator design pattern to trigger various events and
invoke various functions attached to those events.</description>
      <long-description/>
      <tag line="3" name="author" description="Charles Sprayberry"/>
      <tag line="3" name="license" description="Subject to the terms of the LICENSE file in the project root"/>
      <tag line="3" name="version" description="0.1"/>
      <tag line="3" name="since" description="0.1"/>
    </docblock>
    <interface namespace="SprayFire\Mediator" line="19" package="SprayFire\Mediator">
      <name>Mediator</name>
      <full_name>\SprayFire\Mediator\Mediator</full_name>
      <docblock line="15">
        <description/>
        <long-description/>
        <tag line="15" name="package" description="SprayFire"/>
        <tag line="15" name="subpackage" description="Mediator"/>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="SprayFire\Mediator" line="28" package="SprayFire\Mediator">
        <name>addCallback</name>
        <full_name>addCallback</full_name>
        <docblock line="21">
          <description>Should add a callback to a collection of callbacks for a specific event
based on the event name returned from the passed $Callback.</description>
          <long-description/>
          <tag line="21" name="param" description="" type="\SprayFire\Mediator\Callback" variable="$Callback">
            <type by_reference="false">\SprayFire\Mediator\Callback</type>
          </tag>
          <tag line="21" name="return" description="" type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
        </docblock>
        <argument line="28">
          <name>$Callback</name>
          <default/>
          <type>\SprayFire\Mediator\Callback</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="SprayFire\Mediator" line="36" package="SprayFire\Mediator">
        <name>removeCallback</name>
        <full_name>removeCallback</full_name>
        <docblock line="30">
          <description>Should remove a callback from the collection of callbacks for the event
name.</description>
          <long-description/>
          <tag line="30" name="param" description="" type="\SprayFire\Mediator\Callback" variable="$Callback">
            <type by_reference="false">\SprayFire\Mediator\Callback</type>
          </tag>
        </docblock>
        <argument line="36">
          <name>$Callback</name>
          <default/>
          <type>\SprayFire\Mediator\Callback</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="SprayFire\Mediator" line="50" package="SprayFire\Mediator">
        <name>triggerEvent</name>
        <full_name>triggerEvent</full_name>
        <docblock line="38">
          <description>Should create an appropriate SprayFire.Mediator.Event object and invoke
the appropriate callbacks stored in the collection associated to $eventName.</description>
          <long-description>&lt;p&gt;$Target and $arguments should be provided by the Event object created and
returned from their appropriate getter methods.&lt;/p&gt;</long-description>
          <tag line="38" name="param" description="" type="string" variable="$eventName">
            <type by_reference="false">string</type>
          </tag>
          <tag line="38" name="param" description="" type="Object" variable="$Target">
            <type by_reference="false">Object</type>
          </tag>
          <tag line="38" name="param" description="" type="array" variable="$arguments">
            <type by_reference="false">array</type>
          </tag>
          <tag line="38" name="return" description="" type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
        </docblock>
        <argument line="50">
          <name>$eventName</name>
          <default/>
          <type/>
        </argument>
        <argument line="50">
          <name>$Target</name>
          <default/>
          <type/>
        </argument>
        <argument line="50">
          <name>$arguments</name>
          <default>array()</default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="SprayFire\Mediator" line="59" package="SprayFire\Mediator">
        <name>getCallbacks</name>
        <full_name>getCallbacks</full_name>
        <docblock line="52">
          <description>Will return an array of SprayFire.Mediator.Callback objects or an empty
array if no callbacks are added for the given event.</description>
          <long-description/>
          <tag line="52" name="param" description="" type="string" variable="$eventName">
            <type by_reference="false">string</type>
          </tag>
          <tag line="52" name="return" description="" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
        <argument line="59">
          <name>$eventName</name>
          <default/>
          <type/>
        </argument>
      </method>
    </interface>
  </file>
  <file path="Object.php" hash="0e1147fc0ab4d5c078637815af18f84e" package="Default">
    <docblock line="3">
      <description>Interface to represent a generic object within the context of SprayFire or a
SprayFire-driven application.</description>
      <long-description/>
      <tag line="3" name="author" description="Charles Sprayberry"/>
      <tag line="3" name="license" description="Subject to the terms of the LICENSE file in the project root"/>
      <tag line="3" name="version" description="0.1"/>
      <tag line="3" name="since" description="0.1"/>
    </docblock>
    <interface namespace="SprayFire" line="18" package="SprayFire">
      <name>Object</name>
      <full_name>\SprayFire\Object</full_name>
      <docblock line="15">
        <description/>
        <long-description/>
        <tag line="15" name="package" description="SprayFire"/>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="SprayFire" line="27" package="SprayFire">
        <name>equals</name>
        <full_name>equals</full_name>
        <docblock line="20">
          <description>Should return true or false for whether or not the given $Object is equal
to the object invoking equals.</description>
          <long-description/>
          <tag line="20" name="param" description="" type="\SprayFire\Object" variable="$Object">
            <type by_reference="false">\SprayFire\Object</type>
          </tag>
          <tag line="20" name="return" description="" type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
        </docblock>
        <argument line="27">
          <name>$Object</name>
          <default/>
          <type>\SprayFire\Object</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="SprayFire" line="34" package="SprayFire">
        <name>hashCode</name>
        <full_name>hashCode</full_name>
        <docblock line="29">
          <description>Should return some unique identifier for the object.</description>
          <long-description/>
          <tag line="29" name="return" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="SprayFire" line="39" package="SprayFire">
        <name>__toString</name>
        <full_name>__toString</full_name>
        <docblock line="36">
          <description/>
          <long-description/>
          <tag line="36" name="return" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </method>
    </interface>
    <parse_markers>
      <error line="36" code="50012">No short description for method __toString()</error>
    </parse_markers>
  </file>
  <file path="Responder/FireResponder/Base.php" hash="9d2d2ad26fa4192b6a0c0875afbd7030" package="Default">
    <docblock line="3">
      <description/>
      <long-description/>
      <tag line="3" name="author" description="Charles Sprayberry"/>
      <tag line="3" name="license" description="Subject to the terms of the LICENSE file in the project root"/>
      <tag line="3" name="version" description="0.1"/>
      <tag line="3" name="since" description="0.1"/>
    </docblock>
    <class final="false" abstract="true" namespace="SprayFire\Responder\FireResponder" line="22" package="SprayFire\Responder\FireResponder">
      <extends>\SprayFire\Service\FireService\Consumer</extends>
      <implements>\SprayFire\Responder\Responder</implements>
      <name>Base</name>
      <full_name>\SprayFire\Responder\FireResponder\Base</full_name>
      <docblock line="17">
        <description/>
        <long-description/>
        <tag line="17" name="package" description="SprayFire"/>
        <tag line="17" name="subpackage" description="Responder.FireResponder"/>
      </docblock>
      <property final="false" static="false" visibility="protected" line="29" namespace="SprayFire\Responder\FireResponder" package="Default">
        <name>$services</name>
        <default>array('Paths' =&gt; 'SprayFire.FileSys.FireFileSys.Paths', 'Escaper' =&gt; 'SprayFire.Responder.FireResponder.OutputEscaper')</default>
        <docblock line="24">
          <description>Provides functionality to SprayFire.Service.FireService.Consumer implementation.</description>
          <long-description/>
          <tag line="24" name="property" description="" type="array" variable="">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="SprayFire\Responder\FireResponder" line="41" package="SprayFire\Responder\FireResponder">
        <name>getEscapedData</name>
        <full_name>getEscapedData</full_name>
        <docblock line="34">
          <description>Will get the appropriate data from the $Controller with the appropriate
contexts and return an array with that data escaped in that context.</description>
          <long-description/>
          <tag line="34" name="param" description="" type="\SprayFire\Controller\Controller" variable="$Controller">
            <type by_reference="false">\SprayFire\Controller\Controller</type>
          </tag>
          <tag line="34" name="return" description="" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
        <argument line="41">
          <name>$Controller</name>
          <default/>
          <type>\SprayFire\Controller\Controller</type>
        </argument>
      </method>
    </class>
    <parse_markers>
      <critical line="3" code="50008">No short description for file Responder/FireResponder/Base.php</critical>
      <critical line="17" code="50005">No short description for class \SprayFire\Responder\FireResponder\Base</critical>
    </parse_markers>
  </file>
  <file path="Responder/FireResponder/Factory.php" hash="ec1b1fdd7451323084dc2cb86dab7eb4" package="Default">
    <docblock line="3">
      <description>A Factory for creating SprayFire.Responder.Responder implementations and
assuring that they are constructed with the appropriate services attached.</description>
      <long-description/>
      <tag line="3" name="author" description="Charles Sprayberry"/>
      <tag line="3" name="license" description="Subject to the terms of the LICENSE file in the project root"/>
      <tag line="3" name="version" description="0.1"/>
      <tag line="3" name="since" description="0.1"/>
    </docblock>
    <class final="false" abstract="false" namespace="SprayFire\Responder\FireResponder" line="24" package="SprayFire\Responder\FireResponder">
      <extends>\SprayFire\Service\FireService\ConsumerFactory</extends>
      <name>Factory</name>
      <full_name>\SprayFire\Responder\FireResponder\Factory</full_name>
      <docblock line="20">
        <description/>
        <long-description/>
        <tag line="20" name="package" description="SprayFire"/>
        <tag line="20" name="subpackage" description="Responder.FireResponder"/>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="SprayFire\Responder\FireResponder" line="33" package="SprayFire\Responder\FireResponder">
        <name>__construct</name>
        <full_name>__construct</full_name>
        <docblock line="26">
          <description/>
          <long-description/>
          <tag line="26" name="param" description="" type="\SprayFire\Utils\ReflectionCache" variable="$Cache">
            <type by_reference="false">\SprayFire\Utils\ReflectionCache</type>
          </tag>
          <tag line="26" name="param" description="" type="\SprayFire\Service\Container" variable="$Container">
            <type by_reference="false">\SprayFire\Service\Container</type>
          </tag>
          <tag line="26" name="param" description="" type="\SprayFire\Logging\LogOverseer" variable="$LogOverseer">
            <type by_reference="false">\SprayFire\Logging\LogOverseer</type>
          </tag>
          <tag line="26" name="param" description="" type="string" variable="$type">
            <type by_reference="false">string</type>
          </tag>
          <tag line="26" name="param" description="" type="string" variable="$nullType">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="34">
          <name>$Cache</name>
          <default/>
          <type>\SprayFire\Utils\ReflectionCache</type>
        </argument>
        <argument line="35">
          <name>$Container</name>
          <default/>
          <type>\SprayFire\Service\Container</type>
        </argument>
        <argument line="36">
          <name>$LogOverseer</name>
          <default/>
          <type>\SprayFire\Logging\LogOverseer</type>
        </argument>
        <argument line="37">
          <name>$type</name>
          <default>'SprayFire.Responder.Responder'</default>
          <type/>
        </argument>
        <argument line="38">
          <name>$nullType</name>
          <default>'SprayFire.Responder.FireResponder.Html'</default>
          <type/>
        </argument>
      </method>
    </class>
    <parse_markers>
      <critical line="20" code="50005">No short description for class \SprayFire\Responder\FireResponder\Factory</critical>
      <error line="26" code="50012">No short description for method __construct()</error>
    </parse_markers>
  </file>
  <file path="Responder/FireResponder/Html.php" hash="6ac6364264cc7aaf99177e76778bd3cb" package="Default">
    <docblock line="3">
      <description>A Responder object that generates and sends a response as a string of HTML.</description>
      <long-description/>
      <tag line="3" name="author" description="Charles Sprayberry"/>
      <tag line="3" name="license" description="Subject to the terms of the LICENSE file in the project root"/>
      <tag line="3" name="version" description="0.1"/>
      <tag line="3" name="since" description="0.1"/>
    </docblock>
    <class final="false" abstract="false" namespace="SprayFire\Responder\FireResponder" line="26" package="SprayFire\Responder\FireResponder">
      <extends>\SprayFire\Responder\FireResponder\Base</extends>
      <implements>\SprayFire\Responder\Responder</implements>
      <name>Html</name>
      <full_name>\SprayFire\Responder\FireResponder\Html</full_name>
      <docblock line="19">
        <description/>
        <long-description/>
        <tag line="19" name="package" description="SprayFire"/>
        <tag line="19" name="subpackage" description="Responder.FireResponder"/>
        <tag line="19" name="property" description="" type="\SprayFire\FileSys\FireFileSys\Paths" variable="$Paths">
          <type by_reference="false">\SprayFire\FileSys\FireFileSys\Paths</type>
        </tag>
        <tag line="19" name="property" description="" type="\SprayFire\Responder\FireResponder\OutputEscaper" variable="$Escaper">
          <type by_reference="false">\SprayFire\Responder\FireResponder\OutputEscaper</type>
        </tag>
      </docblock>
      <property final="false" static="false" visibility="protected" line="33" namespace="SprayFire\Responder\FireResponder" package="Default">
        <name>$response</name>
        <default>''</default>
        <docblock line="28">
          <description>Stores the final generated response from this Responder</description>
          <long-description/>
          <tag line="28" name="property" description="" type="string" variable="">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="SprayFire\Responder\FireResponder" line="40" package="SprayFire\Responder\FireResponder">
        <name>generateDynamicResponse</name>
        <full_name>generateDynamicResponse</full_name>
        <docblock line="35">
          <description/>
          <long-description/>
          <tag line="35" name="param" description="" type="\SprayFire\Controller\Controller" variable="$Controller">
            <type by_reference="false">\SprayFire\Controller\Controller</type>
          </tag>
          <tag line="35" name="return" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="40">
          <name>$Controller</name>
          <default/>
          <type>\SprayFire\Controller\Controller</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="SprayFire\Responder\FireResponder" line="63" package="SprayFire\Responder\FireResponder">
        <name>isTraversable</name>
        <full_name>isTraversable</full_name>
        <docblock line="57">
          <description>Determines if the given $traversable is a valid argument to a foreach() loop</description>
          <long-description/>
          <tag line="57" name="param" description="" type="mixed" variable="$traversable">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="57" name="return" description="" type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
        </docblock>
        <argument line="63">
          <name>$traversable</name>
          <default/>
          <type/>
        </argument>
      </method>
    </class>
    <parse_markers>
      <critical line="19" code="50005">No short description for class \SprayFire\Responder\FireResponder\Html</critical>
      <error line="35" code="50012">No short description for method generateDynamicResponse()</error>
    </parse_markers>
  </file>
  <file path="Responder/FireResponder/Json.php" hash="ad9c4bd1395771d20e6bf8008ec8792c" package="Default">
    <docblock line="3">
      <description>An implementation of SprayFire.Responder.Responder that will generate a JSON
response for a given request.</description>
      <long-description/>
      <tag line="3" name="author" description="Charles Sprayberry"/>
      <tag line="3" name="license" description="Subject to the terms of the LICENSE file in the project root"/>
      <tag line="3" name="version" description="0.1"/>
      <tag line="3" name="since" description="0.1"/>
    </docblock>
    <class final="false" abstract="false" namespace="SprayFire\Responder\FireResponder" line="23" package="SprayFire\Responder\FireResponder">
      <extends>\SprayFire\Responder\FireResponder\Base</extends>
      <implements>\SprayFire\Responder\Responder</implements>
      <name>Json</name>
      <full_name>\SprayFire\Responder\FireResponder\Json</full_name>
      <docblock line="19">
        <description/>
        <long-description/>
        <tag line="19" name="package" description="SprayFire"/>
        <tag line="19" name="subpackage" description="Responder.FireResponder"/>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="SprayFire\Responder\FireResponder" line="31" package="SprayFire\Responder\FireResponder">
        <name>generateDynamicResponse</name>
        <full_name>generateDynamicResponse</full_name>
        <docblock line="25">
          <description/>
          <long-description/>
          <tag line="25" name="param" description="" type="\SprayFire\Controller\Controller" variable="$Controller">
            <type by_reference="false">\SprayFire\Controller\Controller</type>
          </tag>
          <tag line="25" name="return" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="31">
          <name>$Controller</name>
          <default/>
          <type>\SprayFire\Controller\Controller</type>
        </argument>
      </method>
    </class>
    <parse_markers>
      <critical line="19" code="50005">No short description for class \SprayFire\Responder\FireResponder\Json</critical>
      <error line="25" code="50012">No short description for method generateDynamicResponse()</error>
    </parse_markers>
  </file>
  <file path="Responder/FireResponder/OutputEscaper.php" hash="c0d742dff73919544673f91c4d15d4ea" package="Default">
    <docblock line="3">
      <description>Implementation of \SprayFire\Responder\OutputEscaper provided by the default
SprayFire install.</description>
      <long-description/>
      <tag line="3" name="author" description="Charles Sprayberry"/>
      <tag line="3" name="license" description="Subject to the terms of the LICENSE file in the project root"/>
      <tag line="3" name="version" description="0.1"/>
      <tag line="3" name="since" description="0.1"/>
    </docblock>
    <class final="false" abstract="false" namespace="SprayFire\Responder\FireResponder" line="39" package="SprayFire\Responder\FireResponder">
      <extends>\SprayFire\CoreObject</extends>
      <implements>\SprayFire\Responder\OutputEscaper</implements>
      <name>OutputEscaper</name>
      <full_name>\SprayFire\Responder\FireResponder\OutputEscaper</full_name>
      <docblock line="19">
        <description>This implementation is intended to be used with the \Zend\Escaper\Escaper
integration, provided in the libs folder by the default SprayFire install.</description>
        <long-description>&lt;p&gt;Optionally this implementation will allow you to preserve boolean and numeric
data types. Boolean data types, if escaped, will likely be converted to the
string '1' for true or the string '' for false. In some situations this is
fine, in others, for example when using Responder designed for JSON it may not
be ideal. If set you can preserve boolean and/or numeric data for these types
of situations. You still get the security from escaping but configurable to
allow more flexible escaping without suffering security risks.&lt;/p&gt;

&lt;p&gt;We use the \Zend\Escaper\Escaper implementation because they take advantage of
a lot more developers on their project and they ensure we get the best escaping
as possible. We don't extend the Escaper implementation, e.g. through inheritance,
to ensure the API for the module works as expected.&lt;/p&gt;</long-description>
        <tag line="19" name="package" description="SprayFire"/>
        <tag line="19" name="subpackage" description="Responder.FireResponder"/>
      </docblock>
      <constant namespace="SprayFire\Responder\FireResponder" line="45" package="SprayFire\Responder\FireResponder">
        <name>NO_PRESERVATION</name>
        <full_name>NO_PRESERVATION</full_name>
        <value>1</value>
        <docblock line="41">
          <description>Used in conjunction with preserveDataType to indicate that boolean and
numeric types should be escaped.</description>
          <long-description/>
        </docblock>
      </constant>
      <constant namespace="SprayFire\Responder\FireResponder" line="51" package="SprayFire\Responder\FireResponder">
        <name>PRESERVE_BOOLEAN</name>
        <full_name>PRESERVE_BOOLEAN</full_name>
        <value>2</value>
        <docblock line="47">
          <description>Used in conjunction with preserveDataType to indicate that boolean data
should be preserved and not escaped.</description>
          <long-description/>
        </docblock>
      </constant>
      <constant namespace="SprayFire\Responder\FireResponder" line="57" package="SprayFire\Responder\FireResponder">
        <name>PRESERVE_NUMERIC</name>
        <full_name>PRESERVE_NUMERIC</full_name>
        <value>4</value>
        <docblock line="53">
          <description>Used in conjunction with preserveDataType to indicate that numeric data,
integers and floats, should be preserved and not escaped.</description>
          <long-description/>
        </docblock>
      </constant>
      <property final="false" static="false" visibility="protected" line="62" namespace="SprayFire\Responder\FireResponder" package="Default">
        <name>$ZendEscaper</name>
        <default/>
        <docblock line="59">
          <description/>
          <long-description/>
          <tag line="59" name="property" description="" type="\Zend\Escaper\Escaper" variable="">
            <type by_reference="false">\Zend\Escaper\Escaper</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="70" namespace="SprayFire\Responder\FireResponder" package="Default">
        <name>$typePreservation</name>
        <default>self::NO_PRESERVATION</default>
        <docblock line="64">
          <description>The property that controls whether or not numeric and/or boolean data should
be preserved during escaping.</description>
          <long-description/>
          <tag line="64" name="property" description="" type="integer" variable="">
            <type by_reference="false">integer</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="SprayFire\Responder\FireResponder" line="75" package="SprayFire\Responder\FireResponder">
        <name>__construct</name>
        <full_name>__construct</full_name>
        <docblock line="72">
          <description/>
          <long-description/>
          <tag line="72" name="param" description="" type="string" variable="$encoding">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="75">
          <name>$encoding</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="SprayFire\Responder\FireResponder" line="85" package="SprayFire\Responder\FireResponder">
        <name>escapeCss</name>
        <full_name>escapeCss</full_name>
        <docblock line="79">
          <description>Pass a string or string[] that should be escaped in a CSS context.</description>
          <long-description/>
          <tag line="79" name="param" description="" type="mixed" variable="$data">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="79" name="return" description="" type="mixed">
            <type by_reference="false">mixed</type>
          </tag>
        </docblock>
        <argument line="85">
          <name>$data</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="SprayFire\Responder\FireResponder" line="95" package="SprayFire\Responder\FireResponder">
        <name>escapeHtmlAttribute</name>
        <full_name>escapeHtmlAttribute</full_name>
        <docblock line="89">
          <description>Pass a string or string[] that should be escape in a HTML attribute context.</description>
          <long-description/>
          <tag line="89" name="param" description="" type="mixed" variable="$data">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="89" name="return" description="" type="mixed">
            <type by_reference="false">mixed</type>
          </tag>
        </docblock>
        <argument line="95">
          <name>$data</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="SprayFire\Responder\FireResponder" line="105" package="SprayFire\Responder\FireResponder">
        <name>escapeHtmlContent</name>
        <full_name>escapeHtmlContent</full_name>
        <docblock line="99">
          <description>Pass a string or string[] that should be escaped in a HTML content context.</description>
          <long-description/>
          <tag line="99" name="param" description="" type="mixed" variable="$data">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="99" name="return" description="" type="mixed">
            <type by_reference="false">mixed</type>
          </tag>
        </docblock>
        <argument line="105">
          <name>$data</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="SprayFire\Responder\FireResponder" line="116" package="SprayFire\Responder\FireResponder">
        <name>escapeJavaScript</name>
        <full_name>escapeJavaScript</full_name>
        <docblock line="110">
          <description>Pass a string or string[] that should be escaped in a JavaScript context.</description>
          <long-description/>
          <tag line="110" name="param" description="" type="mixed" variable="$data">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="110" name="return" description="" type="mixed">
            <type by_reference="false">mixed</type>
          </tag>
        </docblock>
        <argument line="116">
          <name>$data</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="SprayFire\Responder\FireResponder" line="128" package="SprayFire\Responder\FireResponder">
        <name>escapeContent</name>
        <full_name>escapeContent</full_name>
        <docblock line="120">
          <description>Will escape the appropriate data, be it a string or array, with the
$context passed being the name of the ZendEscaper method to invoke.</description>
          <long-description/>
          <tag line="120" name="param" description="" type="mixed" variable="$data">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="120" name="param" description="" type="string" variable="$context">
            <type by_reference="false">string</type>
          </tag>
          <tag line="120" name="return" description="" type="mixed">
            <type by_reference="false">mixed</type>
          </tag>
        </docblock>
        <argument line="128">
          <name>$data</name>
          <default/>
          <type/>
        </argument>
        <argument line="128">
          <name>$context</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="SprayFire\Responder\FireResponder" line="169" package="SprayFire\Responder\FireResponder">
        <name>escapeMultipleContent</name>
        <full_name>escapeMultipleContent</full_name>
        <docblock line="161">
          <description>Will recursively escape an array of data, the $context being the ZendEscaper
method to invoke.</description>
          <long-description/>
          <tag line="161" name="param" description="" type="array" variable="$data">
            <type by_reference="false">array</type>
          </tag>
          <tag line="161" name="param" description="" type="string" variable="$context">
            <type by_reference="false">string</type>
          </tag>
          <tag line="161" name="return" description="" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
        <argument line="169">
          <name>$data</name>
          <default/>
          <type>array</type>
        </argument>
        <argument line="169">
          <name>$context</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="SprayFire\Responder\FireResponder" line="202" package="SprayFire\Responder\FireResponder">
        <name>preserveDataType</name>
        <full_name>preserveDataType</full_name>
        <docblock line="177">
          <description>Indicate whether or not boolean and numeric data types should be preserved
and not escaped.</description>
          <long-description>&lt;p&gt;It is strongly advised that you make use of the OutputEscaper constants
to ensure the appropriate data types are preserved.&lt;/p&gt;

&lt;h2&gt;Preserve boolean and numeric data&lt;/h2&gt;

&lt;p&gt;$typeBitMask = OutputEscaper::PRESERVE_NUMERIC | OutputEscaper::PRESERVE_BOOLEAN&lt;/p&gt;

&lt;h2&gt;Preserve boolean data only&lt;/h2&gt;

&lt;p&gt;$typeBitMask = OutputEscaper::PRESERVE_BOOLEAN&lt;/p&gt;

&lt;h2&gt;Preserve numeric data only&lt;/h2&gt;

&lt;p&gt;$typeBitMask = OutputEscaper::PRESERVE_NUMERIC&lt;/p&gt;

&lt;p&gt;Any other value will result in no preservation taking place and all values
being escaped.&lt;/p&gt;</long-description>
          <tag line="177" name="param" description="" type="\SprayFire\Responder\FireResponder\" variable="$typeBitMask"/>
          <tag line="177" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
        <argument line="202">
          <name>$typeBitMask</name>
          <default/>
          <type/>
        </argument>
      </method>
    </class>
    <parse_markers>
      <critical line="59" code="50019">No short description for property $ZendEscaper</critical>
      <error line="72" code="50012">No short description for method __construct()</error>
    </parse_markers>
  </file>
  <file path="Responder/html/404.php" hash="4e45c856bb5392f12056b9300af94109" package="Default">
    <parse_markers>
      <error line="0" code="50007">No page-level DocBlock was found in file Responder/html/404.php</error>
    </parse_markers>
  </file>
  <file path="Responder/html/about.php" hash="011f2d64bd9b1c3501dbf6488777c22f" package="Default">
    <parse_markers>
      <error line="0" code="50007">No page-level DocBlock was found in file Responder/html/about.php</error>
    </parse_markers>
  </file>
  <file path="Responder/html/blank.php" hash="68b329da9893e34099c7d8ad5cb9c940" package="Default">
    <parse_markers>
      <error line="0" code="50007">No page-level DocBlock was found in file Responder/html/blank.php</error>
    </parse_markers>
  </file>
  <file path="Responder/html/debug-content.php" hash="22b973a3d4b49aa17fa5233fafd1e9a4" package="Default">
    <parse_markers>
      <error line="0" code="50007">No page-level DocBlock was found in file Responder/html/debug-content.php</error>
    </parse_markers>
  </file>
  <file path="Responder/html/index.php" hash="5224e65227c100694aebbce3105738e6" package="Default">
    <parse_markers>
      <error line="0" code="50007">No page-level DocBlock was found in file Responder/html/index.php</error>
    </parse_markers>
  </file>
  <file path="Responder/html/layout/default-no-placeholders.php" hash="f581506763ca98f6a2bf44e51b000305" package="Default">
    <parse_markers>
      <error line="0" code="50007">No page-level DocBlock was found in file Responder/html/layout/default-no-placeholders.php</error>
    </parse_markers>
  </file>
  <file path="Responder/html/layout/default.php" hash="27c3448658f312a44788220377a7c41f" package="Default">
    <parse_markers>
      <error line="0" code="50007">No page-level DocBlock was found in file Responder/html/layout/default.php</error>
    </parse_markers>
  </file>
  <file path="Responder/html/sidebar.php" hash="6a0d97a8d063204e1bc7138c753b3dcb" package="Default">
    <parse_markers>
      <error line="0" code="50007">No page-level DocBlock was found in file Responder/html/sidebar.php</error>
    </parse_markers>
  </file>
  <file path="Responder/OutputEscaper.php" hash="5c64e080cdd8f6cd5a24b92a134ddab4" package="Default">
    <docblock line="3">
      <description>Interface representing an object capable of escaping output in various web
contexts.</description>
      <long-description/>
      <tag line="3" name="author" description="Charles Sprayberry"/>
      <tag line="3" name="license" description="Subject to the terms of the LICENSE file in the project root"/>
      <tag line="3" name="version" description="0.1"/>
      <tag line="3" name="since" description="0.1"/>
    </docblock>
    <interface namespace="SprayFire\Responder" line="25" package="SprayFire\Responder">
      <name>OutputEscaper</name>
      <full_name>\SprayFire\Responder\OutputEscaper</full_name>
      <extends>\SprayFire\Object</extends>
      <docblock line="17">
        <description>All escape* methods should accept a piece of data in the form of a string or
an array of strings, if an array is passed the escaping should be done
recursively.</description>
        <long-description/>
        <tag line="17" name="package" description="SprayFire"/>
        <tag line="17" name="subpackage" description="Responder"/>
      </docblock>
      <constant namespace="SprayFire\Responder" line="31" package="SprayFire\Responder">
        <name>CSS_CONTEXT</name>
        <full_name>CSS_CONTEXT</full_name>
        <value>'css'</value>
        <docblock line="27">
          <description>Constant that can be used by other modules to signify data or escaping in
a CSS context.</description>
          <long-description/>
        </docblock>
      </constant>
      <constant namespace="SprayFire\Responder" line="37" package="SprayFire\Responder">
        <name>HTML_CONTENT_CONTEXT</name>
        <full_name>HTML_CONTENT_CONTEXT</full_name>
        <value>'html_content'</value>
        <docblock line="33">
          <description>Constant that can be used by other modules to signify data or escaping in
a HTML content context.</description>
          <long-description/>
        </docblock>
      </constant>
      <constant namespace="SprayFire\Responder" line="43" package="SprayFire\Responder">
        <name>HTML_ATTRIBUTE_CONTEXT</name>
        <full_name>HTML_ATTRIBUTE_CONTEXT</full_name>
        <value>'html_attribute'</value>
        <docblock line="39">
          <description>Constant that can be used by other modules to signify data or escaping in
a HTML attribute context.</description>
          <long-description/>
        </docblock>
      </constant>
      <constant namespace="SprayFire\Responder" line="49" package="SprayFire\Responder">
        <name>JAVASCRIPT_CONTEXT</name>
        <full_name>JAVASCRIPT_CONTEXT</full_name>
        <value>'javascript'</value>
        <docblock line="45">
          <description>Constant that can be used by other modules to signify data or escaping in
a JavaScript context.</description>
          <long-description/>
        </docblock>
      </constant>
      <method final="false" abstract="false" static="false" visibility="public" namespace="SprayFire\Responder" line="57" package="SprayFire\Responder">
        <name>escapeCss</name>
        <full_name>escapeCss</full_name>
        <docblock line="51">
          <description>Pass a string or string[] that should be escaped in a CSS context.</description>
          <long-description/>
          <tag line="51" name="param" description="" type="mixed" variable="$data">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="51" name="return" description="" type="mixed">
            <type by_reference="false">mixed</type>
          </tag>
        </docblock>
        <argument line="57">
          <name>$data</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="SprayFire\Responder" line="65" package="SprayFire\Responder">
        <name>escapeHtmlAttribute</name>
        <full_name>escapeHtmlAttribute</full_name>
        <docblock line="59">
          <description>Pass a string or string[] that should be escape in a HTML attribute context.</description>
          <long-description/>
          <tag line="59" name="param" description="" type="mixed" variable="$data">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="59" name="return" description="" type="mixed">
            <type by_reference="false">mixed</type>
          </tag>
        </docblock>
        <argument line="65">
          <name>$data</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="SprayFire\Responder" line="73" package="SprayFire\Responder">
        <name>escapeHtmlContent</name>
        <full_name>escapeHtmlContent</full_name>
        <docblock line="67">
          <description>Pass a string or string[] that should be escaped in a HTML content context.</description>
          <long-description/>
          <tag line="67" name="param" description="" type="mixed" variable="$data">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="67" name="return" description="" type="mixed">
            <type by_reference="false">mixed</type>
          </tag>
        </docblock>
        <argument line="73">
          <name>$data</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="SprayFire\Responder" line="81" package="SprayFire\Responder">
        <name>escapeJavaScript</name>
        <full_name>escapeJavaScript</full_name>
        <docblock line="75">
          <description>Pass a string or string[] that should be escaped in a JavaScript context.</description>
          <long-description/>
          <tag line="75" name="param" description="" type="mixed" variable="$data">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="75" name="return" description="" type="mixed">
            <type by_reference="false">mixed</type>
          </tag>
        </docblock>
        <argument line="81">
          <name>$data</name>
          <default/>
          <type/>
        </argument>
      </method>
    </interface>
  </file>
  <file path="Responder/Responder.php" hash="a15aa1bfc0de2d5380a502f7deee069b" package="Default">
    <docblock line="3">
      <description>Interface responsible for preparing and sending an appropriate response to
the user.</description>
      <long-description/>
      <tag line="3" name="author" description="Charles Sprayberry"/>
      <tag line="3" name="license" description="Subject to the terms of the LICENSE file in the project root&#10;code"/>
    </docblock>
    <interface namespace="SprayFire\Responder" line="22" package="SprayFire\Responder">
      <name>Responder</name>
      <full_name>\SprayFire\Responder\Responder</full_name>
      <extends>\SprayFire\Object</extends>
      <extends>\SprayFire\Service\Consumer</extends>
      <docblock line="18">
        <description/>
        <long-description/>
        <tag line="18" name="package" description="SprayFire"/>
        <tag line="18" name="subpackage" description="Responder"/>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="SprayFire\Responder" line="31" package="SprayFire\Responder">
        <name>generateDynamicResponse</name>
        <full_name>generateDynamicResponse</full_name>
        <docblock line="24">
          <description>Should sanitize the appropriate data and generate a response based on the
$Controller data provided.</description>
          <long-description/>
          <tag line="24" name="param" description="" type="\SprayFire\Controller\Controller" variable="$Controller">
            <type by_reference="false">\SprayFire\Controller\Controller</type>
          </tag>
          <tag line="24" name="return" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="31">
          <name>$Controller</name>
          <default/>
          <type>\SprayFire\Controller\Controller</type>
        </argument>
      </method>
    </interface>
  </file>
  <file path="Responder/Template/Exception/FileNotFound.php" hash="d4a0b0236435563eb3b7ebc7720c1baa" package="Default">
    <docblock line="3">
      <description>Thrown if a file path to a file template could not be properly found or opened.</description>
      <long-description/>
      <tag line="3" name="author" description="Charles Sprayberry"/>
      <tag line="3" name="license" description="Subject to the terms of the LICENSE file in the project root"/>
      <tag line="3" name="version" description="0.1"/>
      <tag line="3" name="since" description="0.1"/>
    </docblock>
    <class final="false" abstract="false" namespace="SprayFire\Responder\Template\Exception" line="20" package="SprayFire\`">
      <extends>\RuntimeException</extends>
      <name>FileNotFound</name>
      <full_name>\SprayFire\Responder\Template\Exception\FileNotFound</full_name>
      <docblock line="14">
        <description/>
        <long-description/>
        <tag line="14" name="package" description="SprayFire"/>
        <tag line="14" name="subpackage" description="`"/>
      </docblock>
    </class>
    <parse_markers>
      <critical line="14" code="50005">No short description for class \SprayFire\Responder\Template\Exception\FileNotFound</critical>
    </parse_markers>
  </file>
  <file path="Responder/Template/Exception/LayoutNotSet.php" hash="fed9479403aba0b44ee5c99edce843fc" package="Default">
    <docblock line="3">
      <description>Exception thrown if SprayFire.Responder.Template.Manager::getLayoutTemplate()
is called without first calling setLayoutTemplate($Template).</description>
      <long-description/>
      <tag line="3" name="author" description="Charles Sprayberry"/>
      <tag line="3" name="license" description="Subject to the terms of the LICENSE file in the project root"/>
      <tag line="3" name="version" description="0.1"/>
      <tag line="3" name="since" description="0.1"/>
    </docblock>
    <class final="false" abstract="false" namespace="SprayFire\Responder\Template\Exception" line="19" package="SprayFire\`Responder\Template\Exception">
      <extends>\RuntimeException</extends>
      <name>LayoutNotSet</name>
      <full_name>\SprayFire\Responder\Template\Exception\LayoutNotSet</full_name>
      <docblock line="15">
        <description/>
        <long-description/>
        <tag line="15" name="package" description="SprayFire"/>
        <tag line="15" name="subpackage" description="`Responder.Template.Exception"/>
      </docblock>
    </class>
    <parse_markers>
      <critical line="15" code="50005">No short description for class \SprayFire\Responder\Template\Exception\LayoutNotSet</critical>
    </parse_markers>
  </file>
  <file path="Responder/Template/FireTemplate/BaseTemplate.php" hash="1cd8164655413ef56b622adfb7dfe81a" package="Default">
    <docblock line="3">
      <description>Abstract class to provide basic getName() support across a variety of templates</description>
      <long-description/>
      <tag line="3" name="author" description="Charles Sprayberry"/>
      <tag line="3" name="license" description="Subject to the terms of the LICENSE file in the project root"/>
      <tag line="3" name="version" description="0.1"/>
      <tag line="3" name="since" description="0.1"/>
    </docblock>
    <class final="false" abstract="true" namespace="SprayFire\Responder\Template\FireTemplate" line="21" package="SprayFire\Responder\FireResponder\FireTemplate">
      <extends>\SprayFire\CoreObject</extends>
      <implements>\SprayFire\Responder\Template\Template</implements>
      <name>BaseTemplate</name>
      <full_name>\SprayFire\Responder\Template\FireTemplate\BaseTemplate</full_name>
      <docblock line="17">
        <description/>
        <long-description/>
        <tag line="17" name="package" description="SprayFire"/>
        <tag line="17" name="subpackage" description="Responder.FireResponder.FireTemplate"/>
      </docblock>
      <property final="false" static="false" visibility="protected" line="28" namespace="SprayFire\Responder\Template\FireTemplate" package="Default">
        <name>$name</name>
        <default/>
        <docblock line="23">
          <description>The name for the template</description>
          <long-description/>
          <tag line="23" name="property" description="" type="string" variable="">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="SprayFire\Responder\Template\FireTemplate" line="33" package="SprayFire\Responder\FireResponder\FireTemplate">
        <name>__construct</name>
        <full_name>__construct</full_name>
        <docblock line="30">
          <description/>
          <long-description/>
          <tag line="30" name="param" description="" type="string" variable="$name">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="33">
          <name>$name</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="SprayFire\Responder\Template\FireTemplate" line="40" package="SprayFire\Responder\FireResponder\FireTemplate">
        <name>getName</name>
        <full_name>getName</full_name>
        <docblock line="37">
          <description/>
          <long-description/>
          <tag line="37" name="return" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </method>
    </class>
    <parse_markers>
      <critical line="17" code="50005">No short description for class \SprayFire\Responder\Template\FireTemplate\BaseTemplate</critical>
      <error line="30" code="50012">No short description for method __construct()</error>
      <error line="37" code="50012">No short description for method getName()</error>
    </parse_markers>
  </file>
  <file path="Responder/Template/FireTemplate/FileTemplate.php" hash="89d95edfe6bf6a98a8cbd8f5970c2f15" package="Default">
    <docblock line="3">
      <description>Implementation of SprayFire.Responder.Template.Template that will render output
stored in a file.</description>
      <long-description/>
      <tag line="3" name="author" description="Charles Sprayberry"/>
      <tag line="3" name="license" description="Subject to the terms of the LICENSE file in the project root"/>
      <tag line="3" name="version" description="0.1"/>
      <tag line="3" name="since" description="0.1"/>
    </docblock>
    <include line="63" type="Include" package="Default">
      <name/>
    </include>
    <class final="false" abstract="false" namespace="SprayFire\Responder\Template\FireTemplate" line="23" package="SprayFire\`Responder\FireResponder\FireTemplate">
      <extends>\SprayFire\Responder\Template\FireTemplate\BaseTemplate</extends>
      <name>FileTemplate</name>
      <full_name>\SprayFire\Responder\Template\FireTemplate\FileTemplate</full_name>
      <docblock line="19">
        <description/>
        <long-description/>
        <tag line="19" name="package" description="SprayFire"/>
        <tag line="19" name="subpackage" description="`Responder.FireResponder.FireTemplate"/>
      </docblock>
      <property final="false" static="false" visibility="protected" line="30" namespace="SprayFire\Responder\Template\FireTemplate" package="Default">
        <name>$File</name>
        <default/>
        <docblock line="25">
          <description>The absolute path to the file storing the output that should be rendered</description>
          <long-description/>
          <tag line="25" name="property" description="" type="\SplFileObject" variable="">
            <type by_reference="false">\SplFileObject</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="SprayFire\Responder\Template\FireTemplate" line="37" package="SprayFire\`Responder\FireResponder\FireTemplate">
        <name>__construct</name>
        <full_name>__construct</full_name>
        <docblock line="32">
          <description/>
          <long-description/>
          <tag line="32" name="param" description="" type="string" variable="$name">
            <type by_reference="false">string</type>
          </tag>
          <tag line="32" name="param" description="" type="string" variable="$filePath">
            <type by_reference="false">string</type>
          </tag>
          <tag line="32" name="throws" description="" type="\SprayFire\Responder\Template\Exception\FileNotFound">
            <type by_reference="false">\SprayFire\Responder\Template\Exception\FileNotFound</type>
          </tag>
        </docblock>
        <argument line="37">
          <name>$name</name>
          <default/>
          <type/>
        </argument>
        <argument line="37">
          <name>$filePath</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="SprayFire\Responder\Template\FireTemplate" line="60" package="SprayFire\`Responder\FireResponder\FireTemplate">
        <name>getContent</name>
        <full_name>getContent</full_name>
        <docblock line="52">
          <description>Generates the appropriate content based on the $filePath passed to constructor
and the $data that should fill in placeholders for the template stored in
$filePath.</description>
          <long-description/>
          <tag line="52" name="param" description="" type="array" variable="$data">
            <type by_reference="false">array</type>
          </tag>
          <tag line="52" name="return" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="60">
          <name>$data</name>
          <default/>
          <type>array</type>
        </argument>
      </method>
    </class>
    <parse_markers>
      <critical line="19" code="50005">No short description for class \SprayFire\Responder\Template\FireTemplate\FileTemplate</critical>
      <error line="32" code="50012">No short description for method __construct()</error>
    </parse_markers>
  </file>
  <file path="Responder/Template/FireTemplate/Manager.php" hash="afceb37fc55539224cf82feecde84d1f" package="Default">
    <docblock line="3">
      <description>Default implementation of SprayFire.Responder.Template.Manager to provide layout
and content templates to the SprayFire.Responder.Responder generating the
response for a given Request.</description>
      <long-description/>
      <tag line="3" name="author" description="Charles Sprayberry"/>
      <tag line="3" name="license" description="Subject to the terms of the LICENSE file in the project root"/>
      <tag line="3" name="version" description="0.1"/>
      <tag line="3" name="since" description="0.1"/>
    </docblock>
    <class final="false" abstract="false" namespace="SprayFire\Responder\Template\FireTemplate" line="23" package="SprayFire\Responder\FireResponder\FireTemplate">
      <extends>\SprayFire\CoreObject</extends>
      <implements>\SprayFire\Responder\Template\Manager</implements>
      <name>Manager</name>
      <full_name>\SprayFire\Responder\Template\FireTemplate\Manager</full_name>
      <docblock line="19">
        <description/>
        <long-description/>
        <tag line="19" name="package" description="SprayFire"/>
        <tag line="19" name="subpackage" description="Responder.FireResponder.FireTemplate"/>
      </docblock>
      <property final="false" static="false" visibility="protected" line="30" namespace="SprayFire\Responder\Template\FireTemplate" package="Default">
        <name>$LayoutTemplate</name>
        <default/>
        <docblock line="25">
          <description>Represents the primary template for a given response.</description>
          <long-description/>
          <tag line="25" name="property" description="" type="\SprayFire\Responder\Template\Template" variable="">
            <type by_reference="false">\SprayFire\Responder\Template\Template</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="37" namespace="SprayFire\Responder\Template\FireTemplate" package="Default">
        <name>$contentTemplates</name>
        <default>array()</default>
        <docblock line="32">
          <description>Stores the templates added to the Manager</description>
          <long-description/>
          <tag line="32" name="property" description="" type="array" variable="">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="SprayFire\Responder\Template\FireTemplate" line="45" package="SprayFire\Responder\FireResponder\FireTemplate">
        <name>addContentTemplate</name>
        <full_name>addContentTemplate</full_name>
        <docblock line="39">
          <description>Stores a $Template against the name returned from $Template::getName.</description>
          <long-description/>
          <tag line="39" name="param" description="" type="\SprayFire\Responder\Template\Template" variable="$Template">
            <type by_reference="false">\SprayFire\Responder\Template\Template</type>
          </tag>
          <tag line="39" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
        <argument line="45">
          <name>$Template</name>
          <default/>
          <type>\SprayFire\Responder\Template\Template</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="SprayFire\Responder\Template\FireTemplate" line="55" package="SprayFire\Responder\FireResponder\FireTemplate">
        <name>getContentTemplates</name>
        <full_name>getContentTemplates</full_name>
        <docblock line="49">
          <description>Provides an array of \SprayFire\Responder\Template\Template that have been
added as a content template.</description>
          <long-description/>
          <tag line="49" name="return" description="" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="SprayFire\Responder\Template\FireTemplate" line="69" package="SprayFire\Responder\FireResponder\FireTemplate">
        <name>getLayoutTemplate</name>
        <full_name>getLayoutTemplate</full_name>
        <docblock line="59">
          <description>Return the \SprayFire\Responder\Template\Template that was passed to
Manager::setLayoutTemplate().</description>
          <long-description>&lt;p&gt;If Manager::setLayoutTemplate is never called and this method is invoked
an exception will be thrown.&lt;/p&gt;</long-description>
          <tag line="59" name="return\SprayFire\Responder\Template\Template" description=""/>
          <tag line="59" name="throws" description="" type="\SprayFire\Responder\Template\Exception\LayoutNotSet">
            <type by_reference="false">\SprayFire\Responder\Template\Exception\LayoutNotSet</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="SprayFire\Responder\Template\FireTemplate" line="82" package="SprayFire\Responder\FireResponder\FireTemplate">
        <name>hasTemplate</name>
        <full_name>hasTemplate</full_name>
        <docblock line="76">
          <description>Returns whether or not a specific template has been added to this instance.</description>
          <long-description/>
          <tag line="76" name="param" description="" type="string" variable="$templateName">
            <type by_reference="false">string</type>
          </tag>
          <tag line="76" name="return" description="" type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
        </docblock>
        <argument line="82">
          <name>$templateName</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="SprayFire\Responder\Template\FireTemplate" line="93" package="SprayFire\Responder\FireResponder\FireTemplate">
        <name>removeTemplate</name>
        <full_name>removeTemplate</full_name>
        <docblock line="86">
          <description>Removes a content template from the collection added, returns true if the
collection was removed, false if it was not.</description>
          <long-description/>
          <tag line="86" name="param" description="" type="string" variable="$templateName">
            <type by_reference="false">string</type>
          </tag>
          <tag line="86" name="return" description="" type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
        </docblock>
        <argument line="93">
          <name>$templateName</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="SprayFire\Responder\Template\FireTemplate" line="106" package="SprayFire\Responder\FireResponder\FireTemplate">
        <name>setLayoutTemplate</name>
        <full_name>setLayoutTemplate</full_name>
        <docblock line="103">
          <description/>
          <long-description/>
          <tag line="103" name="param" description="" type="\SprayFire\Responder\Template\Template" variable="$Template">
            <type by_reference="false">\SprayFire\Responder\Template\Template</type>
          </tag>
        </docblock>
        <argument line="106">
          <name>$Template</name>
          <default/>
          <type>\SprayFire\Responder\Template\Template</type>
        </argument>
      </method>
    </class>
    <parse_markers>
      <critical line="19" code="50005">No short description for class \SprayFire\Responder\Template\FireTemplate\Manager</critical>
      <error line="103" code="50012">No short description for method setLayoutTemplate()</error>
    </parse_markers>
  </file>
  <file path="Responder/Template/Manager.php" hash="0a3504808b1edc88c080dfaa5cc598de" package="Default">
    <docblock line="3">
      <description>Interface responsible for allowing the storage, retrieval and meta information
of SprayFire.Responder.Template.Template instances that should be used in the
processing of a given Request.</description>
      <long-description/>
      <tag line="3" name="author" description="Charles Sprayberry"/>
      <tag line="3" name="license" description="Subject to the terms of the LICENSE file in the project root"/>
      <tag line="3" name="version" description="0.1"/>
      <tag line="3" name="since" description="0.1"/>
    </docblock>
    <interface namespace="SprayFire\Responder\Template" line="22" package="SprayFire\Responder\Template">
      <name>Manager</name>
      <full_name>\SprayFire\Responder\Template\Manager</full_name>
      <extends>\SprayFire\Object</extends>
      <docblock line="18">
        <description/>
        <long-description/>
        <tag line="18" name="package" description="SprayFire"/>
        <tag line="18" name="subpackage" description="Responder.Template"/>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="SprayFire\Responder\Template" line="31" package="SprayFire\Responder\Template">
        <name>setLayoutTemplate</name>
        <full_name>setLayoutTemplate</full_name>
        <docblock line="24">
          <description>Add a SprayFire.Template.Template to the Manager to be used when generating
the final response to the user.</description>
          <long-description/>
          <tag line="24" name="param" description="" type="\SprayFire\Responder\Template\Template" variable="$Template">
            <type by_reference="false">\SprayFire\Responder\Template\Template</type>
          </tag>
          <tag line="24" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
        <argument line="31">
          <name>$Template</name>
          <default/>
          <type>\SprayFire\Responder\Template\Template</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="SprayFire\Responder\Template" line="39" package="SprayFire\Responder\Template">
        <name>getLayoutTemplate</name>
        <full_name>getLayoutTemplate</full_name>
        <docblock line="33">
          <description>Return a SprayFire.Template.Template that should be used as the primary
layout for the response.</description>
          <long-description/>
          <tag line="33" name="return" description="" type="\SprayFire\Responder\Template\Template">
            <type by_reference="false">\SprayFire\Responder\Template\Template</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="SprayFire\Responder\Template" line="51" package="SprayFire\Responder\Template">
        <name>addContentTemplate</name>
        <full_name>addContentTemplate</full_name>
        <docblock line="41">
          <description>Add a \SprayFire\Responder\Template\Template to a collection that can be
retrieved by Manager::getContentTemplates.</description>
          <long-description>&lt;p&gt;The key used to store the $Template should be the value returned by
$Template::getName.&lt;/p&gt;</long-description>
          <tag line="41" name="param" description="" type="\SprayFire\Responder\Template\Template" variable="$Template">
            <type by_reference="false">\SprayFire\Responder\Template\Template</type>
          </tag>
          <tag line="41" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
        <argument line="51">
          <name>$Template</name>
          <default/>
          <type>\SprayFire\Responder\Template\Template</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="SprayFire\Responder\Template" line="61" package="SprayFire\Responder\Template">
        <name>getContentTemplates</name>
        <full_name>getContentTemplates</full_name>
        <docblock line="53">
          <description>Return a collection of \SprayFire\Responder\Template\Template objects that
were added with addContentTemplate().</description>
          <long-description>&lt;p&gt;The key for the collection should be the name of the template.&lt;/p&gt;</long-description>
          <tag line="53" name="return" description="" type="\SprayFire\Responder\Template\Traversable">
            <type by_reference="false">\SprayFire\Responder\Template\Traversable</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="SprayFire\Responder\Template" line="72" package="SprayFire\Responder\Template">
        <name>removeTemplate</name>
        <full_name>removeTemplate</full_name>
        <docblock line="63">
          <description>Remove an added template that matches the $templateName.</description>
          <long-description>&lt;p&gt;Return true if a template was removed, false if the $templateName has
not been added.&lt;/p&gt;</long-description>
          <tag line="63" name="param" description="" type="string" variable="$templateName">
            <type by_reference="false">string</type>
          </tag>
          <tag line="63" name="return" description="" type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
        </docblock>
        <argument line="72">
          <name>$templateName</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="SprayFire\Responder\Template" line="81" package="SprayFire\Responder\Template">
        <name>hasTemplate</name>
        <full_name>hasTemplate</full_name>
        <docblock line="74">
          <description>Return whether or not a template with the given $templateName has been
added.</description>
          <long-description/>
          <tag line="74" name="param" description="" type="string" variable="$templateName">
            <type by_reference="false">string</type>
          </tag>
          <tag line="74" name="return" description="" type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
        </docblock>
        <argument line="81">
          <name>$templateName</name>
          <default/>
          <type/>
        </argument>
      </method>
    </interface>
  </file>
  <file path="Responder/Template/Template.php" hash="67d39466dc4ffcad0a4a0d4b7c51d6bb" package="Default">
    <docblock line="3">
      <description>An interface that allows the abstraction of templates that deliver the appropriate
content for a response.</description>
      <long-description/>
      <tag line="3" name="author" description="Charles Sprayberry"/>
      <tag line="3" name="license" description="Subject to the terms of the LICENSE file in the project root"/>
      <tag line="3" name="version" description="0.1"/>
      <tag line="3" name="since" description="0.1"/>
    </docblock>
    <interface namespace="SprayFire\Responder\Template" line="21" package="SprayFire\Responder\Template">
      <name>Template</name>
      <full_name>\SprayFire\Responder\Template\Template</full_name>
      <extends>\SprayFire\Object</extends>
      <docblock line="17">
        <description/>
        <long-description/>
        <tag line="17" name="package" description="SprayFire"/>
        <tag line="17" name="subpackage" description="Responder.Template"/>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="SprayFire\Responder\Template" line="28" package="SprayFire\Responder\Template">
        <name>getName</name>
        <full_name>getName</full_name>
        <docblock line="23">
          <description>Return a value that can be used to uniquely identify this template.</description>
          <long-description/>
          <tag line="23" name="return" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="SprayFire\Responder\Template" line="36" package="SprayFire\Responder\Template">
        <name>getContent</name>
        <full_name>getContent</full_name>
        <docblock line="30">
          <description>Return the fully rendered template based on the $data passed.</description>
          <long-description/>
          <tag line="30" name="param" description="" type="array" variable="$data">
            <type by_reference="false">array</type>
          </tag>
          <tag line="30" name="return" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="36">
          <name>$data</name>
          <default/>
          <type>array</type>
        </argument>
      </method>
    </interface>
  </file>
  <file path="Service/Consumer.php" hash="90d4585ed5becadff4615a98026d823a" package="Default">
    <docblock line="3">
      <description>Interface for objects that require services from SprayFire.Service.Container.</description>
      <long-description/>
      <tag line="3" name="author" description="Charles Sprayberry"/>
      <tag line="3" name="license" description="Subject to the terms of the LICENSE file in the project root"/>
      <tag line="3" name="version" description="0.1"/>
      <tag line="3" name="since" description="0.1"/>
    </docblock>
    <interface namespace="SprayFire\Service" line="24" package="SprayFire\Service">
      <name>Consumer</name>
      <full_name>\SprayFire\Service\Consumer</full_name>
      <extends>\SprayFire\Object</extends>
      <docblock line="16">
        <description>Implementations of this object are expected to provide a mechanism for retrieving
a list of services needed from a Container and to provide storage for those
services if they are property stored by the container.</description>
        <long-description/>
        <tag line="16" name="package" description="SprayFire"/>
        <tag line="16" name="subpackage" description="Service"/>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="SprayFire\Service" line="32" package="SprayFire\Service">
        <name>getRequestedServices</name>
        <full_name>getRequestedServices</full_name>
        <docblock line="26">
          <description>An associative array with $key =&gt; $nameOfService; the $key should be passed
to giveService() along with the created $Service.</description>
          <long-description/>
          <tag line="26" name="return" description="" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="SprayFire\Service" line="40" package="SprayFire\Service">
        <name>giveService</name>
        <full_name>giveService</full_name>
        <docblock line="34">
          <description>Provide a service to the Consumer.</description>
          <long-description/>
          <tag line="34" name="param" description="" type="string" variable="$key">
            <type by_reference="false">string</type>
          </tag>
          <tag line="34" name="param" description="" type="object" variable="$Service">
            <type by_reference="false">object</type>
          </tag>
        </docblock>
        <argument line="40">
          <name>$key</name>
          <default/>
          <type/>
        </argument>
        <argument line="40">
          <name>$Service</name>
          <default/>
          <type/>
        </argument>
      </method>
    </interface>
  </file>
  <file path="Service/Container.php" hash="bfe7a4b1f0a66265024b3d629297fa58" package="Default">
    <docblock line="3">
      <description>Interface for classes that are inteded to store services for later use throughout
the framework and your applications.</description>
      <long-description/>
      <tag line="3" name="author" description="Charles Sprayberry"/>
      <tag line="3" name="license" description="Subject to the terms of the LICENSE file in the project root"/>
      <tag line="3" name="version" description="0.1"/>
      <tag line="3" name="since" description="0.1"/>
    </docblock>
    <interface namespace="SprayFire\Service" line="22" package="SprayFire\Service">
      <name>Container</name>
      <full_name>\SprayFire\Service\Container</full_name>
      <extends>\SprayFire\Object</extends>
      <docblock line="18">
        <description/>
        <long-description/>
        <tag line="18" name="package" description="SprayFire"/>
        <tag line="18" name="subpackage" description="Service"/>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="SprayFire\Service" line="32" package="SprayFire\Service">
        <name>getService</name>
        <full_name>getService</full_name>
        <docblock line="24">
          <description>Will return the object represented by $serviceName or throw an exception
if that service does not exist.</description>
          <long-description/>
          <tag line="24" name="param" description="" type="string" variable="$serviceName">
            <type by_reference="false">string</type>
          </tag>
          <tag line="24" name="return" description="" type="object">
            <type by_reference="false">object</type>
          </tag>
          <tag line="24" name="throws" description="" type="\SprayFire\Service\NotFoundException">
            <type by_reference="false">\SprayFire\Service\NotFoundException</type>
          </tag>
        </docblock>
        <argument line="32">
          <name>$serviceName</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="SprayFire\Service" line="47" package="SprayFire\Service">
        <name>addService</name>
        <full_name>addService</full_name>
        <docblock line="34">
          <description>Add a service to the container, $callableParameters for constructor should
be a callable function that returns the appropriate dependencies for the service.</description>
          <long-description>&lt;p&gt;If a valid $factoryKey has been passed the service should be created with
that Factory. An invalid key should result in an exception being thrown.&lt;/p&gt;</long-description>
          <tag line="34" name="param" description="" type="string" variable="$serviceName">
            <type by_reference="false">string</type>
          </tag>
          <tag line="34" name="param" description="" type="callable|null" variable="$callableParameters">
            <type by_reference="false">callable</type>
            <type by_reference="false">null</type>
          </tag>
          <tag line="34" name="param" description="" type="null" variable="$factoryKey">
            <type by_reference="false">null</type>
          </tag>
          <tag line="34" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
          <tag line="34" name="param" description="" type="string|null" variable="$factoryKey">
            <type by_reference="false">string</type>
            <type by_reference="false">null</type>
          </tag>
        </docblock>
        <argument line="47">
          <name>$serviceName</name>
          <default/>
          <type/>
        </argument>
        <argument line="47">
          <name>$callableParameters</name>
          <default>null</default>
          <type/>
        </argument>
        <argument line="47">
          <name>$factoryKey</name>
          <default>null</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="SprayFire\Service" line="55" package="SprayFire\Service">
        <name>doesServiceExist</name>
        <full_name>doesServiceExist</full_name>
        <docblock line="49">
          <description>Should return whether or not a given service has been added to the container.</description>
          <long-description/>
          <tag line="49" name="param" description="" type="string" variable="$serviceName">
            <type by_reference="false">string</type>
          </tag>
          <tag line="49" name="return" description="" type="bool">
            <type by_reference="false">bool</type>
          </tag>
        </docblock>
        <argument line="55">
          <name>$serviceName</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="SprayFire\Service" line="64" package="SprayFire\Service">
        <name>registerFactory</name>
        <full_name>registerFactory</full_name>
        <docblock line="57">
          <description>Will register a Factory with a given key, if that key is used in addService
calls then the service will be created by that Factory.</description>
          <long-description/>
          <tag line="57" name="param" description="" type="string" variable="$factoryKey">
            <type by_reference="false">string</type>
          </tag>
          <tag line="57" name="param" description="" type="\SprayFire\Factory\Factory" variable="$Factory">
            <type by_reference="false">\SprayFire\Factory\Factory</type>
          </tag>
        </docblock>
        <argument line="64">
          <name>$factoryKey</name>
          <default/>
          <type/>
        </argument>
        <argument line="64">
          <name>$Factory</name>
          <default/>
          <type>\SprayFire\Factory\Factory</type>
        </argument>
      </method>
    </interface>
  </file>
  <file path="Service/Exception/FactoryNotRegistered.php" hash="0d74c1909030ad4b5e65d75db1734805" package="Default">
    <docblock line="3">
      <description>An exception thrown if a SprayFire.Service.Container is attempting to create
a service using a factoryKey that has not been registered.</description>
      <long-description/>
      <tag line="3" name="author" description="Charles Sprayberry"/>
      <tag line="3" name="license" description="Subject to the terms of the LICENSE file in the project root"/>
      <tag line="3" name="version" description="0.1"/>
      <tag line="3" name="since" description="0.1"/>
    </docblock>
    <class final="false" abstract="false" namespace="SprayFire\Service\Exception" line="19" package="SprayFire\`Service\Exception">
      <extends>\InvalidArgumentException</extends>
      <name>FactoryNotRegistered</name>
      <full_name>\SprayFire\Service\Exception\FactoryNotRegistered</full_name>
      <docblock line="15">
        <description/>
        <long-description/>
        <tag line="15" name="package" description="SprayFire"/>
        <tag line="15" name="subpackage" description="`Service.Exception"/>
      </docblock>
    </class>
    <parse_markers>
      <critical line="15" code="50005">No short description for class \SprayFire\Service\Exception\FactoryNotRegistered</critical>
    </parse_markers>
  </file>
  <file path="Service/Exception/ServiceNotFound.php" hash="05aa3e9f39455e9f67c9d1640fc20c05" package="Default">
    <docblock line="3">
      <description>Exception thrown by SprayFire.Service.Container implementations.</description>
      <long-description/>
      <tag line="3" name="author" description="Charles Sprayberry"/>
      <tag line="3" name="license" description="Subject to the terms of the LICENSE file in the project root"/>
      <tag line="3" name="version" description="0.1"/>
      <tag line="3" name="since" description="0.1"/>
    </docblock>
    <class final="false" abstract="false" namespace="SprayFire\Service\Exception" line="21" package="SprayFire\Service\Exception">
      <extends>\Exception</extends>
      <name>ServiceNotFound</name>
      <full_name>\SprayFire\Service\Exception\ServiceNotFound</full_name>
      <docblock line="14">
        <description>Should be thrown by implementations of SprayFire.Service.Container when a service
is attempted to be retrieved that was not properly added to the container.</description>
        <long-description/>
        <tag line="14" name="package" description="SprayFire"/>
        <tag line="14" name="subpackage" description="Service.Exception"/>
      </docblock>
    </class>
  </file>
  <file path="Service/FireService/Consumer.php" hash="90d0745258149b2246a852abb4630070" package="Default">
    <docblock line="3">
      <description>Base class implementating SprayFire.Service.Consumer to provide generic
functionality for classes consuming services.</description>
      <long-description/>
      <tag line="3" name="author" description="Charles Sprayberry"/>
      <tag line="3" name="license" description="Subject to the terms of the LICENSE file in the project root"/>
      <tag line="3" name="version" description="0.1"/>
      <tag line="3" name="since" description="0.1"/>
    </docblock>
    <class final="false" abstract="true" namespace="SprayFire\Service\FireService" line="24" package="SprayFire\Service\FireService">
      <extends>\SprayFire\CoreObject</extends>
      <implements>\SprayFire\Service\Consumer</implements>
      <name>Consumer</name>
      <full_name>\SprayFire\Service\FireService\Consumer</full_name>
      <docblock line="20">
        <description/>
        <long-description/>
        <tag line="20" name="package" description="SprayFire"/>
        <tag line="20" name="subpackage" description="Service.FireService"/>
      </docblock>
      <property final="false" static="false" visibility="protected" line="29" namespace="SprayFire\Service\FireService" package="Default">
        <name>$services</name>
        <default>array()</default>
        <docblock line="26">
          <description/>
          <long-description/>
          <tag line="26" name="property" description="" type="array" variable="">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="34" namespace="SprayFire\Service\FireService" package="Default">
        <name>$storedServices</name>
        <default>array()</default>
        <docblock line="31">
          <description/>
          <long-description/>
          <tag line="31" name="property" description="" type="array" variable="">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="SprayFire\Service\FireService" line="41" package="SprayFire\Service\FireService">
        <name>getRequestedServices</name>
        <full_name>getRequestedServices</full_name>
        <docblock line="36">
          <description>Returns an array of $this-&gt;services set</description>
          <long-description/>
          <tag line="36" name="return" description="" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="SprayFire\Service\FireService" line="58" package="SprayFire\Service\FireService">
        <name>giveService</name>
        <full_name>giveService</full_name>
        <docblock line="45">
          <description>Provides a requested service to the consumer, the service will be stored
in Consumer::storedServices with the $key passed.</description>
          <long-description>&lt;p&gt;If the $Service is not an object of some type an exception will be thrown.&lt;/p&gt;

&lt;p&gt;If the $key passed has already been stored its value will be overwritten
by the $Service passed.&lt;/p&gt;</long-description>
          <tag line="45" name="param" description="" type="string" variable="$key">
            <type by_reference="false">string</type>
          </tag>
          <tag line="45" name="param" description="" type="object" variable="$Service">
            <type by_reference="false">object</type>
          </tag>
          <tag line="45" name="throws" description="" type="\InvalidArgumentException">
            <type by_reference="false">\InvalidArgumentException</type>
          </tag>
        </docblock>
        <argument line="58">
          <name>$key</name>
          <default/>
          <type/>
        </argument>
        <argument line="58">
          <name>$Service</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="SprayFire\Service\FireService" line="73" package="SprayFire\Service\FireService">
        <name>service</name>
        <full_name>service</full_name>
        <docblock line="66">
          <description>Method provided to easily retrieve a service based on the key stored in
Consumer::services</description>
          <long-description/>
          <tag line="66" name="param" description="" type="string" variable="$serviceName">
            <type by_reference="false">string</type>
          </tag>
          <tag line="66" name="return" description="" type="mixed">
            <type by_reference="false">mixed</type>
          </tag>
        </docblock>
        <argument line="73">
          <name>$serviceName</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="SprayFire\Service\FireService" line="84" package="SprayFire\Service\FireService">
        <name>__get</name>
        <full_name>__get</full_name>
        <docblock line="80">
          <description/>
          <long-description/>
          <tag line="80" name="param" description="" type="string" variable="$serviceName">
            <type by_reference="false">string</type>
          </tag>
          <tag line="80" name="return" description="" type="object|false">
            <type by_reference="false">object</type>
            <type by_reference="false">false</type>
          </tag>
        </docblock>
        <argument line="84">
          <name>$serviceName</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="SprayFire\Service\FireService" line="92" package="SprayFire\Service\FireService">
        <name>__set</name>
        <full_name>__set</full_name>
        <docblock line="88">
          <description/>
          <long-description/>
          <tag line="88" name="param" description="" type="string" variable="$serviceName">
            <type by_reference="false">string</type>
          </tag>
          <tag line="88" name="param" description="" type="object" variable="$Service">
            <type by_reference="false">object</type>
          </tag>
        </docblock>
        <argument line="92">
          <name>$serviceName</name>
          <default/>
          <type/>
        </argument>
        <argument line="92">
          <name>$Service</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="SprayFire\Service\FireService" line="100" package="SprayFire\Service\FireService">
        <name>__isset</name>
        <full_name>__isset</full_name>
        <docblock line="96">
          <description/>
          <long-description/>
          <tag line="96" name="param" description="" type="string" variable="$serviceName">
            <type by_reference="false">string</type>
          </tag>
          <tag line="96" name="return" description="" type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
        </docblock>
        <argument line="100">
          <name>$serviceName</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="SprayFire\Service\FireService" line="108" package="SprayFire\Service\FireService">
        <name>__unset</name>
        <full_name>__unset</full_name>
        <docblock line="104">
          <description/>
          <long-description/>
          <tag line="104" name="param" description="" type="string" variable="$serviceName">
            <type by_reference="false">string</type>
          </tag>
          <tag line="104" name="throws" description="" type="\BadMethodCallException">
            <type by_reference="false">\BadMethodCallException</type>
          </tag>
        </docblock>
        <argument line="108">
          <name>$serviceName</name>
          <default/>
          <type/>
        </argument>
      </method>
    </class>
    <parse_markers>
      <critical line="20" code="50005">No short description for class \SprayFire\Service\FireService\Consumer</critical>
      <critical line="26" code="50019">No short description for property $services</critical>
      <critical line="31" code="50019">No short description for property $storedServices</critical>
      <error line="80" code="50012">No short description for method __get()</error>
      <error line="88" code="50012">No short description for method __set()</error>
      <error line="96" code="50012">No short description for method __isset()</error>
      <error line="104" code="50012">No short description for method __unset()</error>
    </parse_markers>
  </file>
  <file path="Service/FireService/ConsumerFactory.php" hash="65dd5b0760676d51457b96684ca66dd5" package="Default">
    <docblock line="3">
      <description>A factory that will add requested services to an object implementing the
SprayFire.Service.Consumer interface.</description>
      <long-description/>
      <tag line="3" name="author" description="Charles Sprayberry"/>
      <tag line="3" name="license" description="Subject to the terms of the LICENSE file in the project root"/>
      <tag line="3" name="version" description="0.1"/>
      <tag line="3" name="since" description="0.1"/>
    </docblock>
    <class final="false" abstract="true" namespace="SprayFire\Service\FireService" line="33" package="SprayFire\Service\FireService">
      <extends>\SprayFire\Factory\FireFactory\Base</extends>
      <name>ConsumerFactory</name>
      <full_name>\SprayFire\Service\FireService\ConsumerFactory</full_name>
      <docblock line="22">
        <description/>
        <long-description/>
        <tag line="22" name="package" description="SprayFire"/>
        <tag line="22" name="subpackage" description="Service.FireService"/>
        <tag line="22" name="deprecated" description=""/>
        <tag line="22" name="todo" description="We should take a look making this a Builder and not a Factory.  We are too&#10;reliant on implementations to not override makeObject or to properly override&#10;makeObject in such a way that the ConsumerFactory::makeObject is still invoked."/>
      </docblock>
      <property final="false" static="false" visibility="protected" line="41" namespace="SprayFire\Service\FireService" package="Default">
        <name>$Container</name>
        <default/>
        <docblock line="35">
          <description>The Container that we will be pulling services from when creating the
appropriate Consumer.</description>
          <long-description/>
          <tag line="35" name="property" description="" type="\SprayFire\Service\FireService\SprayFire.Service.Container" variable="">
            <type by_reference="false">\SprayFire\Service\FireService\SprayFire.Service.Container</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="SprayFire\Service\FireService" line="50" package="SprayFire\Service\FireService">
        <name>__construct</name>
        <full_name>__construct</full_name>
        <docblock line="43">
          <description/>
          <long-description/>
          <tag line="43" name="param" description="" type="\SprayFire\Utils\ReflectionCache" variable="$Cache">
            <type by_reference="false">\SprayFire\Utils\ReflectionCache</type>
          </tag>
          <tag line="43" name="param" description="" type="\SprayFire\Service\Container" variable="$Container">
            <type by_reference="false">\SprayFire\Service\Container</type>
          </tag>
          <tag line="43" name="param" description="" type="\SprayFire\Logging\LogOverseer" variable="$LogOverseer">
            <type by_reference="false">\SprayFire\Logging\LogOverseer</type>
          </tag>
          <tag line="43" name="param" description="" type="string" variable="$type">
            <type by_reference="false">string</type>
          </tag>
          <tag line="43" name="param" description="" type="string" variable="$nullObject">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="51">
          <name>$Cache</name>
          <default/>
          <type>\SprayFire\Utils\ReflectionCache</type>
        </argument>
        <argument line="52">
          <name>$Container</name>
          <default/>
          <type>\SprayFire\Service\Container</type>
        </argument>
        <argument line="53">
          <name>$LogOverseer</name>
          <default/>
          <type>\SprayFire\Logging\LogOverseer</type>
        </argument>
        <argument line="54">
          <name>$type</name>
          <default/>
          <type/>
        </argument>
        <argument line="55">
          <name>$nullObject</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="SprayFire\Service\FireService" line="70" package="SprayFire\Service\FireService">
        <name>makeObject</name>
        <full_name>makeObject</full_name>
        <docblock line="61">
          <description>An exception can potentially be thrown from this method if the appropriate
services requested by $className have not been added to the Container.</description>
          <long-description/>
          <tag line="61" name="param" description="" type="string" variable="$className">
            <type by_reference="false">string</type>
          </tag>
          <tag line="61" name="param" description="" type="array" variable="$parameters">
            <type by_reference="false">array</type>
          </tag>
          <tag line="61" name="return" description="" type="Object">
            <type by_reference="false">Object</type>
          </tag>
          <tag line="61" name="throws" description="" type="\SprayFire\Service\Exception\ServiceNotFound">
            <type by_reference="false">\SprayFire\Service\Exception\ServiceNotFound</type>
          </tag>
        </docblock>
        <argument line="70">
          <name>$className</name>
          <default/>
          <type/>
        </argument>
        <argument line="70">
          <name>$parameters</name>
          <default>array()</default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="SprayFire\Service\FireService" line="83" package="SprayFire\Service\FireService">
        <name>isTraversable</name>
        <full_name>isTraversable</full_name>
        <docblock line="76">
          <description>Used to ensure that the values returned from Consumer::getRequestedServices
can be properly iterated over.</description>
          <long-description/>
          <tag line="76" name="param" description="" type="mixed" variable="$type">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="76" name="return" description="" type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
        </docblock>
        <argument line="83">
          <name>$type</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="SprayFire\Service\FireService" line="97" package="SprayFire\Service\FireService">
        <name>addServices</name>
        <full_name>addServices</full_name>
        <docblock line="93">
          <description/>
          <long-description/>
          <tag line="93" name="param" description="" type="\SprayFire\Service\Consumer" variable="$Object">
            <type by_reference="false">\SprayFire\Service\Consumer</type>
          </tag>
          <tag line="93" name="throws" description="" type="\SprayFire\Service\Exception\ServiceNotFound">
            <type by_reference="false">\SprayFire\Service\Exception\ServiceNotFound</type>
          </tag>
        </docblock>
        <argument line="97">
          <name>$Object</name>
          <default/>
          <type>\SprayFire\Service\Consumer</type>
        </argument>
      </method>
    </class>
    <parse_markers>
      <critical line="22" code="50005">No short description for class \SprayFire\Service\FireService\ConsumerFactory</critical>
      <error line="43" code="50012">No short description for method __construct()</error>
      <error line="93" code="50012">No short description for method addServices()</error>
    </parse_markers>
  </file>
  <file path="Service/FireService/Container.php" hash="a4e6d56a022d2a6629f11e94675dde84" package="Default">
    <docblock line="3">
      <description>Implementation of SprayFire.Service.Container provided by the default SprayFire
install.</description>
      <long-description/>
      <tag line="3" name="author" description="Charles Sprayberry"/>
      <tag line="3" name="license" description="Subject to the terms of the LICENSE file in the project root"/>
      <tag line="3" name="version" description="0.1"/>
      <tag line="3" name="since" description="0.1"/>
    </docblock>
    <class final="false" abstract="false" namespace="SprayFire\Service\FireService" line="29" package="SprayFire\Service\FireService">
      <extends>\SprayFire\CoreObject</extends>
      <implements>\SprayFire\Service\Container</implements>
      <name>Container</name>
      <full_name>\SprayFire\Service\FireService\Container</full_name>
      <docblock line="22">
        <description>A very simple implementation designed to lazy-load services needed and provide
all consumers of services the same service.</description>
        <long-description/>
        <tag line="22" name="package" description="SprayFire"/>
        <tag line="22" name="subpackage" description="Service.FireService"/>
      </docblock>
      <property final="false" static="false" visibility="protected" line="37" namespace="SprayFire\Service\FireService" package="Default">
        <name>$ReflectionCache</name>
        <default/>
        <docblock line="31">
          <description>Ensures that we are not creating unneeded Reflection objects when creating
services.</description>
          <long-description/>
          <tag line="31" name="property" description="" type="\SprayFire\Utils\ReflectionCache" variable="">
            <type by_reference="false">\SprayFire\Utils\ReflectionCache</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="44" namespace="SprayFire\Service\FireService" package="Default">
        <name>$addedServices</name>
        <default>array()</default>
        <docblock line="39">
          <description>Services and dependency callbacks added to the container</description>
          <long-description/>
          <tag line="39" name="property" description="" type="array" variable="">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="51" namespace="SprayFire\Service\FireService" package="Default">
        <name>$storedServices</name>
        <default>array()</default>
        <docblock line="46">
          <description>Services that have already been instantiated from a call to getService()</description>
          <long-description/>
          <tag line="46" name="property" description="" type="array" variable="">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="59" namespace="SprayFire\Service\FireService" package="Default">
        <name>$registeredFactories</name>
        <default>array()</default>
        <docblock line="53">
          <description>Stores SprayFire.Factory.Factory objects that are to be used for services
requested</description>
          <long-description/>
          <tag line="53" name="property" description="" type="array" variable="">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="68" namespace="SprayFire\Service\FireService" package="Default">
        <name>$emptyCallback</name>
        <default/>
        <docblock line="61">
          <description>We are storing the empty callback for null parameters as a class property
so that we do not create unnecessary Closures for multiple calls with
null parameters.</description>
          <long-description/>
          <tag line="61" name="property" description="" type="\SprayFire\Service\FireService\Closure" variable="">
            <type by_reference="false">\SprayFire\Service\FireService\Closure</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="SprayFire\Service\FireService" line="73" package="SprayFire\Service\FireService">
        <name>__construct</name>
        <full_name>__construct</full_name>
        <docblock line="70">
          <description/>
          <long-description/>
          <tag line="70" name="param" description="" type="\SprayFire\Utils\ReflectionCache" variable="$ReflectionCache">
            <type by_reference="false">\SprayFire\Utils\ReflectionCache</type>
          </tag>
        </docblock>
        <argument line="73">
          <name>$ReflectionCache</name>
          <default/>
          <type>\SprayFire\Utils\ReflectionCache</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="SprayFire\Service\FireService" line="90" package="SprayFire\Service\FireService">
        <name>addService</name>
        <full_name>addService</full_name>
        <docblock line="80">
          <description>If a non-null parameter is passed it must be callable or an
InvalidArgumentException will be thrown</description>
          <long-description/>
          <tag line="80" name="param" description="" type="string" variable="$serviceName">
            <type by_reference="false">string</type>
          </tag>
          <tag line="80" name="param" description="" type="callable|null" variable="$callableParameters">
            <type by_reference="false">callable</type>
            <type by_reference="false">null</type>
          </tag>
          <tag line="80" name="param" description="" type="string|null" variable="$factoryKey">
            <type by_reference="false">string</type>
            <type by_reference="false">null</type>
          </tag>
          <tag line="80" name="throws" description="" type="\InvalidArgumentException">
            <type by_reference="false">\InvalidArgumentException</type>
          </tag>
          <tag line="80" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
        <argument line="90">
          <name>$serviceName</name>
          <default/>
          <type/>
        </argument>
        <argument line="90">
          <name>$callableParameters</name>
          <default>null</default>
          <type/>
        </argument>
        <argument line="90">
          <name>$factoryKey</name>
          <default>null</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="SprayFire\Service\FireService" line="119" package="SprayFire\Service\FireService">
        <name>doesServiceExist</name>
        <full_name>doesServiceExist</full_name>
        <docblock line="113">
          <description>Return whether or not the service has been added to the container.</description>
          <long-description/>
          <tag line="113" name="param" description="" type="string" variable="$serviceName">
            <type by_reference="false">string</type>
          </tag>
          <tag line="113" name="return" description="" type="bool">
            <type by_reference="false">bool</type>
          </tag>
        </docblock>
        <argument line="119">
          <name>$serviceName</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="SprayFire\Service\FireService" line="134" package="SprayFire\Service\FireService">
        <name>getService</name>
        <full_name>getService</full_name>
        <docblock line="125">
          <description>Return a service object represented by $serviceName, an exception will be
thrown if the service requested does not exist.</description>
          <long-description/>
          <tag line="125" name="param" description="" type="string" variable="$serviceName">
            <type by_reference="false">string</type>
          </tag>
          <tag line="125" name="return" description="" type="object">
            <type by_reference="false">object</type>
          </tag>
          <tag line="125" name="throws" description="" type="\SprayFire\Service\Exception\ServiceNotFound">
            <type by_reference="false">\SprayFire\Service\Exception\ServiceNotFound</type>
          </tag>
          <tag line="125" name="throws" description="" type="\SprayFire\Service\Exception\FactoryNotRegistered">
            <type by_reference="false">\SprayFire\Service\Exception\FactoryNotRegistered</type>
          </tag>
        </docblock>
        <argument line="134">
          <name>$serviceName</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="SprayFire\Service\FireService" line="158" package="SprayFire\Service\FireService">
        <name>createService</name>
        <full_name>createService</full_name>
        <docblock line="148">
          <description>Will create a service based on the serviceSignature passed, properly ensuring
that a Factory is used if the service was added with a Factory key.</description>
          <long-description/>
          <tag line="148" name="param" description="" type="string" variable="$serviceName">
            <type by_reference="false">string</type>
          </tag>
          <tag line="148" name="param" description="" type="array" variable="$serviceSignature">
            <type by_reference="false">array</type>
          </tag>
          <tag line="148" name="return" description="" type="object">
            <type by_reference="false">object</type>
          </tag>
          <tag line="148" name="throws" description="" type="\SprayFire\Service\Exception\ServiceNotFound">
            <type by_reference="false">\SprayFire\Service\Exception\ServiceNotFound</type>
          </tag>
          <tag line="148" name="throws" description="" type="\SprayFire\Service\Exception\FactoryNotRegistered">
            <type by_reference="false">\SprayFire\Service\Exception\FactoryNotRegistered</type>
          </tag>
        </docblock>
        <argument line="158">
          <name>$serviceName</name>
          <default/>
          <type/>
        </argument>
        <argument line="158">
          <name>$serviceSignature</name>
          <default/>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="SprayFire\Service\FireService" line="187" package="SprayFire\Service\FireService">
        <name>getServiceKey</name>
        <full_name>getServiceKey</full_name>
        <docblock line="180">
          <description>Normalizes the service name, allowing it to be stored in the added and
stored services collections.</description>
          <long-description/>
          <tag line="180" name="param" description="" type="string" variable="$serviceName">
            <type by_reference="false">string</type>
          </tag>
          <tag line="180" name="return" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="187">
          <name>$serviceName</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="SprayFire\Service\FireService" line="196" package="SprayFire\Service\FireService">
        <name>registerFactory</name>
        <full_name>registerFactory</full_name>
        <docblock line="191">
          <description/>
          <long-description/>
          <tag line="191" name="param" description="" type="string" variable="$factoryKey">
            <type by_reference="false">string</type>
          </tag>
          <tag line="191" name="param" description="" type="\SprayFire\Factory\Factory" variable="$Factory">
            <type by_reference="false">\SprayFire\Factory\Factory</type>
          </tag>
        </docblock>
        <argument line="196">
          <name>$factoryKey</name>
          <default/>
          <type/>
        </argument>
        <argument line="196">
          <name>$Factory</name>
          <default/>
          <type>\SprayFire\Factory\Factory</type>
        </argument>
      </method>
    </class>
    <parse_markers>
      <error line="70" code="50012">No short description for method __construct()</error>
      <error line="191" code="50012">No short description for method registerFactory()</error>
    </parse_markers>
  </file>
  <file path="Utils/JavaNamespaceConverter.php" hash="a8c0dd078258b226095570a5e68e7854" package="Default">
    <docblock line="3">
      <description>Utility object that provides the ability to convert Java style class names
into PHP style class names.</description>
      <long-description/>
      <tag line="3" name="author" description="Charles Sprayberry"/>
      <tag line="3" name="license" description="Subject to the terms of the LICENSE file in the project root"/>
      <tag line="3" name="version" description="0.1"/>
      <tag line="3" name="since" description="0.1"/>
    </docblock>
    <class final="false" abstract="false" namespace="SprayFire\Utils" line="19" package="SprayFire\Utils">
      <extends/>
      <name>JavaNamespaceConverter</name>
      <full_name>\SprayFire\Utils\JavaNamespaceConverter</full_name>
      <docblock line="15">
        <description/>
        <long-description/>
        <tag line="15" name="package" description="SprayFire"/>
        <tag line="15" name="subpackage" description="Utils"/>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="SprayFire\Utils" line="28" package="SprayFire\Utils">
        <name>convertJavaClassToPhpClass</name>
        <full_name>convertJavaClassToPhpClass</full_name>
        <docblock line="21">
          <description>Will convert a dot separated, Java style $className into its PHP equivalent
with the appropriate namespace separator.</description>
          <long-description/>
          <tag line="21" name="param" description="" type="string" variable="$className">
            <type by_reference="false">string</type>
          </tag>
          <tag line="21" name="return" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="28">
          <name>$className</name>
          <default/>
          <type/>
        </argument>
      </method>
    </class>
    <parse_markers>
      <critical line="15" code="50005">No short description for class \SprayFire\Utils\JavaNamespaceConverter</critical>
    </parse_markers>
  </file>
  <file path="Utils/ReflectionCache.php" hash="ad745b0538a025d115e5d1f435e489fd" package="Default">
    <docblock line="3">
      <description>Utility object used to ensure that needless Reflection objects are not
created when dynamically creating objects.</description>
      <long-description/>
      <tag line="3" name="author" description="Charles Sprayberry"/>
      <tag line="3" name="license" description="Subject to the terms of the LICENSE file in the project root"/>
      <tag line="3" name="version" description="0.1"/>
      <tag line="3" name="since" description="0.1"/>
    </docblock>
    <class final="false" abstract="false" namespace="SprayFire\Utils" line="22" package="SprayFire\Utils">
      <extends>\SprayFire\CoreObject</extends>
      <name>ReflectionCache</name>
      <full_name>\SprayFire\Utils\ReflectionCache</full_name>
      <docblock line="18">
        <description/>
        <long-description/>
        <tag line="18" name="package" description="SprayFire"/>
        <tag line="18" name="subpackage" description="Utils"/>
      </docblock>
      <property final="false" static="false" visibility="protected" line="30" namespace="SprayFire\Utils" package="Default">
        <name>$JavaNameConverter</name>
        <default/>
        <docblock line="24">
          <description>Used to ensure that we can handle creating Reflection objects with both
Java and PHP style class names.</description>
          <long-description/>
          <tag line="24" name="property" description="" type="\SprayFire\Utils\SprayFire.Utils.JavaNamespaceConverter" variable="">
            <type by_reference="false">\SprayFire\Utils\SprayFire.Utils.JavaNamespaceConverter</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="38" namespace="SprayFire\Utils" package="Default">
        <name>$cache</name>
        <default>array()</default>
        <docblock line="32">
          <description>Key value storing [$className =&gt; Reflection] for each Reflection object
created.</description>
          <long-description/>
          <tag line="32" name="property" description="" type="array" variable="">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="SprayFire\Utils" line="43" package="SprayFire\Utils">
        <name>__construct</name>
        <full_name>__construct</full_name>
        <docblock line="40">
          <description/>
          <long-description/>
          <tag line="40" name="param" description="" type="\SprayFire\Utils\JavaNamespaceConverter" variable="$JavaNameConverter">
            <type by_reference="false">\SprayFire\Utils\JavaNamespaceConverter</type>
          </tag>
        </docblock>
        <argument line="43">
          <name>$JavaNameConverter</name>
          <default/>
          <type>\SprayFire\Utils\JavaNamespaceConverter</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="SprayFire\Utils" line="55" package="SprayFire\Utils">
        <name>getClass</name>
        <full_name>getClass</full_name>
        <docblock line="47">
          <description>Will return a Reflection of the given $className or throw an exception
if there was an error.</description>
          <long-description/>
          <tag line="47" name="param" description="" type="string" variable="$className">
            <type by_reference="false">string</type>
          </tag>
          <tag line="47" name="return" description="" type="\ReflectionClass">
            <type by_reference="false">\ReflectionClass</type>
          </tag>
          <tag line="47" name="throws" description="" type="\ReflectionException">
            <type by_reference="false">\ReflectionException</type>
          </tag>
        </docblock>
        <argument line="55">
          <name>$className</name>
          <default/>
          <type/>
        </argument>
      </method>
    </class>
    <parse_markers>
      <critical line="18" code="50005">No short description for class \SprayFire\Utils\ReflectionCache</critical>
      <error line="40" code="50012">No short description for method __construct()</error>
    </parse_markers>
  </file>
  <file path="Validation/Check/Check.php" hash="f3e28b2165cec258142d31862a7e0b3e" package="Default">
    <docblock line="3">
      <description>Interface that all validation rules must implement to run a specific check.</description>
      <long-description/>
      <tag line="3" name="author" description="Charles Sprayberry"/>
      <tag line="3" name="license" description="Subject to the terms of the LICENSE file in the project root"/>
      <tag line="3" name="version" description="0.1"/>
      <tag line="3" name="since" description="0.1"/>
    </docblock>
    <interface namespace="SprayFire\Validation\Check" line="45" package="SprayFire\Validation\Check">
      <name>Check</name>
      <full_name>\SprayFire\Validation\Check\Check</full_name>
      <extends>\SprayFire\Object</extends>
      <extends>\SprayFire\Validation\Check\MessageTokenizable</extends>
      <docblock line="16">
        <description>The primary responsibilities for objects implementing this interface are to
ensure a value passes a specific rule and to provide a means to retrieve
customizable, detailed information on how the value does not match the specific
rule.</description>
        <long-description>&lt;h2&gt;Rule Responsbility&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Rules should be simple and common&lt;/li&gt;
&lt;li&gt;Parameters that may be needed should be passed at construction time or the
module should have a clear, internal API on setting parameters that can be
used before the Check is passed off to a Validator.&lt;/li&gt;
&lt;li&gt;Rules should be unaware of the data set field it is checking against.  The
same Check object should be usable on multiple fields.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Messages Responsbility&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Messages should be customizable and there should be at least 2 messages
available for each error code, a message suitable for logging and a message
suitable for display to the user.&lt;/li&gt;
&lt;li&gt;Messages should support tokens which can be replaced with various information
from the check. Strongly recommended that if you implement this interface
you take advantage of the MessageParser interface in the same module.&lt;/li&gt;
&lt;li&gt;Messages should not be returned formatted.  The array of token values returned
by MessageTokenizable should be specific to the given $value check.&lt;/li&gt;
&lt;/ul&gt;</long-description>
        <tag line="16" name="package" description="SprayFire"/>
        <tag line="16" name="subpackage" description="Validation.Check"/>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="SprayFire\Validation\Check" line="57" package="SprayFire\Validation\Check">
        <name>passesCheck</name>
        <full_name>passesCheck</full_name>
        <docblock line="47">
          <description>Determine if the $value passes the rule for the given check.</description>
          <long-description>&lt;p&gt;An error code should be returned that allows the retrieval of the appropriate
error messages. If no error was encountered and the check passes you should
return 0. If the check does not pass a value between 1-n should be returned.&lt;/p&gt;</long-description>
          <tag line="47" name="param" description="" type="string" variable="$value">
            <type by_reference="false">string</type>
          </tag>
          <tag line="47" name="return" description="" type="integer">
            <type by_reference="false">integer</type>
          </tag>
        </docblock>
        <argument line="57">
          <name>$value</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="SprayFire\Validation\Check" line="68" package="SprayFire\Validation\Check">
        <name>setLogMessage</name>
        <full_name>setLogMessage</full_name>
        <docblock line="59">
          <description>Set the log message that should be returned for a given error code.</description>
          <long-description>&lt;p&gt;Please see interface level documentation for important information about
the $message parameter.&lt;/p&gt;</long-description>
          <tag line="59" name="param" description="" type="string" variable="$message">
            <type by_reference="false">string</type>
          </tag>
          <tag line="59" name="param" description="" type="integer" variable="$errorCode">
            <type by_reference="false">integer</type>
          </tag>
        </docblock>
        <argument line="68">
          <name>$message</name>
          <default/>
          <type/>
        </argument>
        <argument line="68">
          <name>$errorCode</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="SprayFire\Validation\Check" line="80" package="SprayFire\Validation\Check">
        <name>setDisplayMessage</name>
        <full_name>setDisplayMessage</full_name>
        <docblock line="70">
          <description>Set the display message that is suitable for showing to users for a given
error code.</description>
          <long-description>&lt;p&gt;Please see interface level documentation for important information about
the $message parameter.&lt;/p&gt;</long-description>
          <tag line="70" name="param" description="" type="string" variable="$message">
            <type by_reference="false">string</type>
          </tag>
          <tag line="70" name="param" description="" type="integer" variable="$errorCode">
            <type by_reference="false">integer</type>
          </tag>
        </docblock>
        <argument line="80">
          <name>$message</name>
          <default/>
          <type/>
        </argument>
        <argument line="80">
          <name>$errorCode</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="SprayFire\Validation\Check" line="96" package="SprayFire\Validation\Check">
        <name>getMessages</name>
        <full_name>getMessages</full_name>
        <docblock line="82">
          <description>If no $errorCode is passed your check should return some default messages;
the messages returned will be formatted with the information from the last
call to passesCheck</description>
          <long-description>&lt;p&gt;An array with 2 keys, log and display, should be returned holding the unformatted
messages.&lt;/p&gt;

&lt;p&gt;Please see interface level documentation for important information about
the message values returned from this method.&lt;/p&gt;</long-description>
          <tag line="82" name="param" description="" type="integer" variable="$errorCode">
            <type by_reference="false">integer</type>
          </tag>
          <tag line="82" name="return" description="" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
        <argument line="96">
          <name>$errorCode</name>
          <default/>
          <type/>
        </argument>
      </method>
    </interface>
  </file>
  <file path="Validation/Check/FireCheck/Alphabetic.php" hash="b3e264ac78e85b9cfed2ff42449a6f0c" package="Default">
    <docblock line="3">
      <description>A check that determines if a string value consists of only alphabetic characters,
a boolean flag may be passed to ignore spaces in the value.</description>
      <long-description/>
      <tag line="3" name="author" description="Charles Sprayberry"/>
      <tag line="3" name="license" description="Subject to the terms of the LICENSE file in the project root"/>
      <tag line="3" name="version" description="0.1"/>
      <tag line="3" name="since" description="0.1"/>
    </docblock>
    <class final="false" abstract="false" namespace="SprayFire\Validation\Check\FireCheck" line="22" package="SprayFire\Validation\Check\FireCheck">
      <extends>\SprayFire\Validation\Check\FireCheck\Regex</extends>
      <name>Alphabetic</name>
      <full_name>\SprayFire\Validation\Check\FireCheck\Alphabetic</full_name>
      <docblock line="14">
        <description>Tokens available
-----------------------------------------------------------------------------
- value =&gt; The value checked against</description>
        <long-description/>
        <tag line="14" name="package" description="SprayFire"/>
        <tag line="14" name="subpackage" description="Validation.Check.FireCheck"/>
      </docblock>
      <constant namespace="SprayFire\Validation\Check\FireCheck" line="27" package="SprayFire\Validation\Check\FireCheck">
        <name>IGNORE_SPACES</name>
        <full_name>IGNORE_SPACES</full_name>
        <value>true</value>
        <docblock line="24">
          <description>Value passed to construct parameter to ignore spaces in values checked</description>
          <long-description/>
        </docblock>
      </constant>
      <constant namespace="SprayFire\Validation\Check\FireCheck" line="33" package="SprayFire\Validation\Check\FireCheck">
        <name>DO_NOT_IGNORE_SPACES</name>
        <full_name>DO_NOT_IGNORE_SPACES</full_name>
        <value>false</value>
        <docblock line="29">
          <description>Value passed to construct parameter if spaces are not to be ignored and
would result in an invalid check on a value if it does have spaces in it</description>
          <long-description/>
        </docblock>
      </constant>
      <property final="false" static="false" visibility="protected" line="38" namespace="SprayFire\Validation\Check\FireCheck" package="Default">
        <name>$ignoreSpaces</name>
        <default/>
        <docblock line="35">
          <description/>
          <long-description/>
          <tag line="35" name="property" description="" type="boolean" variable="">
            <type by_reference="false">boolean</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="43" namespace="SprayFire\Validation\Check\FireCheck" package="Default">
        <name>$patternWithoutSpaces</name>
        <default>'/[^A-Za-z]/'</default>
        <docblock line="40">
          <description/>
          <long-description/>
          <tag line="40" name="property" description="" type="string" variable="">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="48" namespace="SprayFire\Validation\Check\FireCheck" package="Default">
        <name>$patternWithSpaces</name>
        <default>'/[^A-Za-z ]/'</default>
        <docblock line="45">
          <description/>
          <long-description/>
          <tag line="45" name="property" description="" type="string" variable="">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="SprayFire\Validation\Check\FireCheck" line="53" package="SprayFire\Validation\Check\FireCheck">
        <name>__construct</name>
        <full_name>__construct</full_name>
        <docblock line="50">
          <description/>
          <long-description/>
          <tag line="50" name="param" description="" type="boolean" variable="$ignoreSpaces">
            <type by_reference="false">boolean</type>
          </tag>
        </docblock>
        <argument line="53">
          <name>$ignoreSpaces</name>
          <default>self::DO_NOT_IGNORE_SPACES</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="SprayFire\Validation\Check\FireCheck" line="71" package="SprayFire\Validation\Check\FireCheck">
        <name>passesCheck</name>
        <full_name>passesCheck</full_name>
        <docblock line="59">
          <description>Determines if the passed value is an alphabetic string, an optional
parameter can be passed at construction time to cause this check to ignore
all spaces.</description>
          <long-description>&lt;p&gt;Possible error codes:
- ErrorCodes::NO_ERROR
- ErrorCodes::NOT_ALPHABETIC&lt;/p&gt;</long-description>
          <tag line="59" name="param" description="" type="string" variable="$value">
            <type by_reference="false">string</type>
          </tag>
          <tag line="59" name="return" description="" type="int">
            <type by_reference="false">int</type>
          </tag>
        </docblock>
        <argument line="71">
          <name>$value</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="SprayFire\Validation\Check\FireCheck" line="85" package="SprayFire\Validation\Check\FireCheck">
        <name>getCheckName</name>
        <full_name>getCheckName</full_name>
        <docblock line="80">
          <description>Return the name of the check that should be used when __toString() is called</description>
          <long-description/>
          <tag line="80" name="return" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </method>
    </class>
    <parse_markers>
      <critical line="35" code="50019">No short description for property $ignoreSpaces</critical>
      <critical line="40" code="50019">No short description for property $patternWithoutSpaces</critical>
      <critical line="45" code="50019">No short description for property $patternWithSpaces</critical>
      <error line="50" code="50012">No short description for method __construct()</error>
    </parse_markers>
  </file>
  <file path="Validation/Check/FireCheck/Alphanumeric.php" hash="25de5dc6e4e22cae3f27c81d7825266b" package="Default">
    <docblock line="3">
      <description>Implementation of \SprayFire\Validation\Check\FireCheck\Check that ensures a
string value is properly alphanumeric.</description>
      <long-description/>
      <tag line="3" name="author" description="Charles Sprayberry"/>
      <tag line="3" name="license" description="Subject to the terms of the LICENSE file in the project root"/>
      <tag line="3" name="version" description="0.1"/>
      <tag line="3" name="since" description="0.1"/>
    </docblock>
    <class final="false" abstract="false" namespace="SprayFire\Validation\Check\FireCheck" line="22" package="SprayFire\Validation\Check\FireCheck">
      <extends>\SprayFire\Validation\Check\FireCheck\Regex</extends>
      <name>Alphanumeric</name>
      <full_name>\SprayFire\Validation\Check\FireCheck\Alphanumeric</full_name>
      <docblock line="14">
        <description>Tokens available
-----------------------------------------------------------------------------
- value =&gt; The value checked against</description>
        <long-description/>
        <tag line="14" name="package" description="SprayFire"/>
        <tag line="14" name="subpackage" description="Validation.Check.FireCheck"/>
      </docblock>
      <constant namespace="SprayFire\Validation\Check\FireCheck" line="28" package="SprayFire\Validation\Check\FireCheck">
        <name>DO_NOT_IGNORE_SPACES</name>
        <full_name>DO_NOT_IGNORE_SPACES</full_name>
        <value>false</value>
        <docblock line="24">
          <description>Passed to constructor parameter to cause spaces to be invalid in checked
values, this is set by default.</description>
          <long-description/>
        </docblock>
      </constant>
      <constant namespace="SprayFire\Validation\Check\FireCheck" line="34" package="SprayFire\Validation\Check\FireCheck">
        <name>IGNORE_SPACES</name>
        <full_name>IGNORE_SPACES</full_name>
        <value>true</value>
        <docblock line="30">
          <description>Passed to constructor parameter to cause spaces to not make checked
value invalid.</description>
          <long-description/>
        </docblock>
      </constant>
      <property final="false" static="false" visibility="protected" line="39" namespace="SprayFire\Validation\Check\FireCheck" package="Default">
        <name>$patternWithSpaces</name>
        <default>'/[^A-Za-z0-9 ]/'</default>
        <docblock line="36">
          <description/>
          <long-description/>
          <tag line="36" name="property" description="" type="string" variable="">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="44" namespace="SprayFire\Validation\Check\FireCheck" package="Default">
        <name>$patternWithoutSpaces</name>
        <default>'/[^A-Za-z0-9]/'</default>
        <docblock line="41">
          <description/>
          <long-description/>
          <tag line="41" name="property" description="" type="string" variable="">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="SprayFire\Validation\Check\FireCheck" line="49" package="SprayFire\Validation\Check\FireCheck">
        <name>__construct</name>
        <full_name>__construct</full_name>
        <docblock line="46">
          <description/>
          <long-description/>
          <tag line="46" name="param" description="" type="boolean" variable="$ignoreSpaces">
            <type by_reference="false">boolean</type>
          </tag>
        </docblock>
        <argument line="49">
          <name>$ignoreSpaces</name>
          <default>self::DO_NOT_IGNORE_SPACES</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="SprayFire\Validation\Check\FireCheck" line="65" package="SprayFire\Validation\Check\FireCheck">
        <name>passesCheck</name>
        <full_name>passesCheck</full_name>
        <docblock line="54">
          <description>Checks if a $value is alphanumeric, you can pass an optional parameter at
construction to cause the check to ignore spaces.</description>
          <long-description>&lt;p&gt;Possible error codes:
- ErrorCodes::NO_ERROR
- ErrorCodes::NOT_ALPHANUMERIC_ERROR&lt;/p&gt;</long-description>
          <tag line="54" name="param" description="" type="string" variable="$value">
            <type by_reference="false">string</type>
          </tag>
          <tag line="54" name="return" description="" type="int">
            <type by_reference="false">int</type>
          </tag>
        </docblock>
        <argument line="65">
          <name>$value</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="SprayFire\Validation\Check\FireCheck" line="79" package="SprayFire\Validation\Check\FireCheck">
        <name>getCheckName</name>
        <full_name>getCheckName</full_name>
        <docblock line="74">
          <description>Return the name of the check that should be used when __toString() is called</description>
          <long-description/>
          <tag line="74" name="return" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </method>
    </class>
    <parse_markers>
      <critical line="36" code="50019">No short description for property $patternWithSpaces</critical>
      <critical line="41" code="50019">No short description for property $patternWithoutSpaces</critical>
      <error line="46" code="50012">No short description for method __construct()</error>
    </parse_markers>
  </file>
  <file path="Validation/Check/FireCheck/Check.php" hash="c7013b0f74ba54bced9eb1424f0c624c" package="Default">
    <docblock line="3">
      <description>Default implementation of \SprayFire\Validation\Check\Check</description>
      <long-description/>
      <tag line="3" name="author" description="Charles Sprayberry"/>
      <tag line="3" name="license" description="Subject to the terms of the LICENSE file in the project root"/>
      <tag line="3" name="version" description="0.1"/>
      <tag line="3" name="since" description="0.1"/>
    </docblock>
    <class final="false" abstract="true" namespace="SprayFire\Validation\Check\FireCheck" line="25" package="SprayFire\Validation\Check\FireCheck">
      <extends>\SprayFire\CoreObject</extends>
      <implements>\SprayFire\Validation\Check\Check</implements>
      <name>Check</name>
      <full_name>\SprayFire\Validation\Check\FireCheck\Check</full_name>
      <docblock line="17">
        <description>Tokens available to this implementation
-----------------------------------------------------------------------------
- value =&gt; The value being checked</description>
        <long-description/>
        <tag line="17" name="package" description="SprayFire"/>
        <tag line="17" name="subpackage" description="Validation.Check.FireCheck"/>
      </docblock>
      <constant namespace="SprayFire\Validation\Check\FireCheck" line="31" package="SprayFire\Validation\Check\FireCheck">
        <name>VALUE_TOKEN</name>
        <full_name>VALUE_TOKEN</full_name>
        <value>'value'</value>
        <docblock line="27">
          <description>In logging and display messages this token will be replaced with the value
being checked against.</description>
          <long-description/>
        </docblock>
      </constant>
      <property final="false" static="false" visibility="protected" line="39" namespace="SprayFire\Validation\Check\FireCheck" package="Default">
        <name>$tokenValues</name>
        <default>array()</default>
        <docblock line="33">
          <description>Map of tokens =&gt; values that should be used when parsing log and display
messages.</description>
          <long-description/>
          <tag line="33" name="property" description="" type="array" variable="">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="46" namespace="SprayFire\Validation\Check\FireCheck" package="Default">
        <name>$logMessages</name>
        <default>array()</default>
        <docblock line="41">
          <description>Map of errorCode =&gt; logMessage values.</description>
          <long-description/>
          <tag line="41" name="property" description="" type="array" variable="">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="53" namespace="SprayFire\Validation\Check\FireCheck" package="Default">
        <name>$displayMessages</name>
        <default>array()</default>
        <docblock line="48">
          <description>Map of errorCode =&gt; displayMessage values</description>
          <long-description/>
          <tag line="48" name="property" description="" type="array" variable="">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="SprayFire\Validation\Check\FireCheck" line="63" package="SprayFire\Validation\Check\FireCheck">
        <name>passesCheck</name>
        <full_name>passesCheck</full_name>
        <docblock line="55">
          <description>Only here to provide a convenient way to set token value parameter.</description>
          <long-description>&lt;p&gt;DO NOT RELY ON THIS TO RETURN PROPER ERROR CODE!&lt;/p&gt;</long-description>
          <tag line="55" name="param" description="" type="string" variable="$value">
            <type by_reference="false">string</type>
          </tag>
          <tag line="55" name="return" description="" type="null">
            <type by_reference="false">null</type>
          </tag>
        </docblock>
        <argument line="63">
          <name>$value</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="SprayFire\Validation\Check\FireCheck" line="74" package="SprayFire\Validation\Check\FireCheck">
        <name>getLogMessage</name>
        <full_name>getLogMessage</full_name>
        <docblock line="67">
          <description>Will return a string parsed by the injected $this-&gt;MessageParser with the
values returned by $this-&gt;getTokenValues().</description>
          <long-description/>
          <tag line="67" name="param" description="" type="integer" variable="$errorCode">
            <type by_reference="false">integer</type>
          </tag>
          <tag line="67" name="return" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="74">
          <name>$errorCode</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="SprayFire\Validation\Check\FireCheck" line="85" package="SprayFire\Validation\Check\FireCheck">
        <name>getDisplayMessage</name>
        <full_name>getDisplayMessage</full_name>
        <docblock line="78">
          <description>Will return a string parsed by the injected $this-&gt;MessageParser with the
values returned by this-&gt;getTokenValues()</description>
          <long-description/>
          <tag line="78" name="param" description="" type="integer" variable="$errorCode">
            <type by_reference="false">integer</type>
          </tag>
          <tag line="78" name="return" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="85">
          <name>$errorCode</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="SprayFire\Validation\Check\FireCheck" line="98" package="SprayFire\Validation\Check\FireCheck">
        <name>getMessages</name>
        <full_name>getMessages</full_name>
        <docblock line="89">
          <description>Will return an array of 'log' and 'display' messages matching the passed
$errorCode.</description>
          <long-description>&lt;p&gt;If no error code is passed the Check::DEFAULT_ERROR_CODE will be used.&lt;/p&gt;</long-description>
          <tag line="89" name="param" description="" type="integer" variable="$errorCode">
            <type by_reference="false">integer</type>
          </tag>
          <tag line="89" name="return" description="" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
        <argument line="98">
          <name>$errorCode</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="SprayFire\Validation\Check\FireCheck" line="109" package="SprayFire\Validation\Check\FireCheck">
        <name>setLogMessage</name>
        <full_name>setLogMessage</full_name>
        <docblock line="105">
          <description/>
          <long-description/>
          <tag line="105" name="param" description="" type="string" variable="$message">
            <type by_reference="false">string</type>
          </tag>
          <tag line="105" name="param" description="" type="integer" variable="$errorCode">
            <type by_reference="false">integer</type>
          </tag>
        </docblock>
        <argument line="109">
          <name>$message</name>
          <default/>
          <type/>
        </argument>
        <argument line="109">
          <name>$errorCode</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="SprayFire\Validation\Check\FireCheck" line="117" package="SprayFire\Validation\Check\FireCheck">
        <name>setDisplayMessage</name>
        <full_name>setDisplayMessage</full_name>
        <docblock line="113">
          <description/>
          <long-description/>
          <tag line="113" name="param" description="" type="string" variable="$message">
            <type by_reference="false">string</type>
          </tag>
          <tag line="113" name="param" description="" type="integer" variable="$errorCode">
            <type by_reference="false">integer</type>
          </tag>
        </docblock>
        <argument line="117">
          <name>$message</name>
          <default/>
          <type/>
        </argument>
        <argument line="117">
          <name>$errorCode</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="SprayFire\Validation\Check\FireCheck" line="126" package="SprayFire\Validation\Check\FireCheck">
        <name>getTokenValues</name>
        <full_name>getTokenValues</full_name>
        <docblock line="121">
          <description>Message token values that should be used to format the appropriate message.</description>
          <long-description/>
          <tag line="121" name="return" description="" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="SprayFire\Validation\Check\FireCheck" line="135" package="SprayFire\Validation\Check\FireCheck">
        <name>__toString</name>
        <full_name>__toString</full_name>
        <docblock line="130">
          <description>Returns the name of the check, as returned from Check::getCheckName</description>
          <long-description/>
          <tag line="130" name="return" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="SprayFire\Validation\Check\FireCheck" line="146" package="SprayFire\Validation\Check\FireCheck">
        <name>setTokenValue</name>
        <full_name>setTokenValue</full_name>
        <docblock line="139">
          <description>Helper method that could be used to implement getTokenValues simply as
return $this-&gt;tokenValues and using this method to set all token values.</description>
          <long-description/>
          <tag line="139" name="param" description="" type="string" variable="$token">
            <type by_reference="false">string</type>
          </tag>
          <tag line="139" name="param" description="" type="string" variable="$value">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="146">
          <name>$token</name>
          <default/>
          <type/>
        </argument>
        <argument line="146">
          <name>$value</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="true" static="false" visibility="protected" namespace="SprayFire\Validation\Check\FireCheck" line="155" package="SprayFire\Validation\Check\FireCheck">
        <name>getCheckName</name>
        <full_name>getCheckName</full_name>
        <docblock line="150">
          <description>Return the name of the check that should be used when __toString() is called</description>
          <long-description/>
          <tag line="150" name="return" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </method>
    </class>
    <parse_markers>
      <error line="105" code="50012">No short description for method setLogMessage()</error>
      <error line="113" code="50012">No short description for method setDisplayMessage()</error>
    </parse_markers>
  </file>
  <file path="Validation/Check/FireCheck/ComparisonCheck.php" hash="98c1d33c1ee8c453deea35df06149971" package="Default">
    <docblock line="3">
      <description>Implementation of \SprayFire\Validation\Check\FireCheck\Check that is intended
to provide generic functionality for checks that are simple binary comparisons</description>
      <long-description/>
      <tag line="3" name="author" description="Charles Sprayberry"/>
      <tag line="3" name="license" description="Subject to the terms of the LICENSE file in the project root"/>
      <tag line="3" name="version" description="0.1"/>
      <tag line="3" name="since" description="0.1"/>
    </docblock>
    <class final="false" abstract="true" namespace="SprayFire\Validation\Check\FireCheck" line="24" package="SprayFire\Validation\Check\FireCheck">
      <extends>\SprayFire\Validation\Check\FireCheck\Check</extends>
      <name>ComparisonCheck</name>
      <full_name>\SprayFire\Validation\Check\FireCheck\ComparisonCheck</full_name>
      <docblock line="15">
        <description>Tokens available to implementations
--------------------------------------------------------------
- value =&gt; The value being checked
- comparison =&gt; The value being checked against</description>
        <long-description/>
        <tag line="15" name="package" description="SprayFire"/>
        <tag line="15" name="subpackage" description="Validation.Check.FireCheck"/>
      </docblock>
      <constant namespace="SprayFire\Validation\Check\FireCheck" line="29" package="SprayFire\Validation\Check\FireCheck">
        <name>COMPARISON_TOKEN</name>
        <full_name>COMPARISON_TOKEN</full_name>
        <value>'comparison'</value>
        <docblock line="26">
          <description>Constant used in messages as a token for the value being compared against</description>
          <long-description/>
        </docblock>
      </constant>
      <property final="false" static="false" visibility="protected" line="36" namespace="SprayFire\Validation\Check\FireCheck" package="Default">
        <name>$comparisonParameter</name>
        <default/>
        <docblock line="31">
          <description>The data that a $value should be compared against.</description>
          <long-description/>
          <tag line="31" name="protected" description="mixed"/>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="SprayFire\Validation\Check\FireCheck" line="41" package="SprayFire\Validation\Check\FireCheck">
        <name>__construct</name>
        <full_name>__construct</full_name>
        <docblock line="38">
          <description/>
          <long-description/>
          <tag line="38" name="param" description="" type="mixed" variable="$comparisonParameter">
            <type by_reference="false">mixed</type>
          </tag>
        </docblock>
        <argument line="41">
          <name>$comparisonParameter</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="SprayFire\Validation\Check\FireCheck" line="54" package="SprayFire\Validation\Check\FireCheck">
        <name>passesCheck</name>
        <full_name>passesCheck</full_name>
        <docblock line="45">
          <description>Will set the $comparisonParameter property and will set the value of that
comparison parameter to be an available token value.</description>
          <long-description>&lt;p&gt;DO NOT RELY ON THE RETURN OF THIS FUNCTION TO SUPPLY AN ERROR CODE!&lt;/p&gt;</long-description>
          <tag line="45" name="param" description="" type="mixed" variable="$value">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="45" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
        <argument line="54">
          <name>$value</name>
          <default/>
          <type/>
        </argument>
      </method>
    </class>
    <parse_markers>
      <error line="38" code="50012">No short description for method __construct()</error>
    </parse_markers>
  </file>
  <file path="Validation/Check/FireCheck/Email.php" hash="8f19a8d2c659394b5379323cd7c58b7a" package="Default">
    <docblock line="3">
      <description>Implementation to check that a value is a valid email format.</description>
      <long-description/>
      <tag line="3" name="author" description="Charles Sprayberry"/>
      <tag line="3" name="license" description="Subject to the terms of the LICENSE file in the project root"/>
      <tag line="3" name="version" description="0.1"/>
      <tag line="3" name="since" description="0.1"/>
    </docblock>
    <class final="false" abstract="false" namespace="SprayFire\Validation\Check\FireCheck" line="25" package="SprayFire\Validation\Check\FireCheck">
      <extends>\SprayFire\Validation\Check\FireCheck\Check</extends>
      <name>Email</name>
      <full_name>\SprayFire\Validation\Check\FireCheck\Email</full_name>
      <docblock line="14">
        <description>This implementation will use the filter_var functionality to ensure we are
checking values against the RFC for email address format.</description>
        <long-description>&lt;h2&gt;Tokens avilable&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;value =&gt; The value being checked for proper email format&lt;/li&gt;
&lt;/ul&gt;</long-description>
        <tag line="14" name="package" description="SprayFire"/>
        <tag line="14" name="subpackage" description="Validation.Check.FireCheck"/>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="SprayFire\Validation\Check\FireCheck" line="34" package="SprayFire\Validation\Check\FireCheck">
        <name>passesCheck</name>
        <full_name>passesCheck</full_name>
        <docblock line="27">
          <description>Possible error codes:
- ErrorCodes::NO_ERROR</description>
          <long-description/>
          <tag line="27" name="param" description="" type="string" variable="$value">
            <type by_reference="false">string</type>
          </tag>
          <tag line="27" name="return" description="" type="integer">
            <type by_reference="false">integer</type>
          </tag>
        </docblock>
        <argument line="34">
          <name>$value</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="SprayFire\Validation\Check\FireCheck" line="42" package="SprayFire\Validation\Check\FireCheck">
        <name>getCheckName</name>
        <full_name>getCheckName</full_name>
      </method>
    </class>
    <parse_markers>
      <error line="42" code="50010">No DocBlock was found for method getCheckName()</error>
    </parse_markers>
  </file>
  <file path="Validation/Check/FireCheck/Equal.php" hash="d6d16791f394ea213aae981f88ccc77f" package="Default">
    <docblock line="3">
      <description>Implementation of SprayFire.Validation.Check.FireCheck.Check to compare the
equality of values and parameters.</description>
      <long-description/>
      <tag line="3" name="author" description="Charles Sprayberry"/>
      <tag line="3" name="license" description="Subject to the terms of the LICENSE file in the project root"/>
      <tag line="3" name="version" description="0.1"/>
      <tag line="3" name="since" description="0.1"/>
    </docblock>
    <class final="false" abstract="false" namespace="SprayFire\Validation\Check\FireCheck" line="26" package="SprayFire\Validation\Check\FireCheck">
      <extends>\SprayFire\Validation\Check\FireCheck\ComparisonCheck</extends>
      <name>Equal</name>
      <full_name>\SprayFire\Validation\Check\FireCheck\Equal</full_name>
      <docblock line="15">
        <description>This implementation will compare on a strict '===' check.</description>
        <long-description>&lt;h2&gt;Tokens available&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;value =&gt; The value being checked&lt;/li&gt;
&lt;li&gt;comparison =&gt; The value being compared against&lt;/li&gt;
&lt;/ul&gt;</long-description>
        <tag line="15" name="package" description="SprayFire"/>
        <tag line="15" name="subpackage" description="Validation.Check.FireCheck"/>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="SprayFire\Validation\Check\FireCheck" line="38" package="SprayFire\Validation\Check\FireCheck">
        <name>passesCheck</name>
        <full_name>passesCheck</full_name>
        <docblock line="28">
          <description>Passes if $value is strictly equal '===' to value passed at construction</description>
          <long-description>&lt;p&gt;Possible error codes returned:
- ErrorCodes::NO_ERROR
- ErrorCodes::NOT_EQUAL_TO_ERROR&lt;/p&gt;</long-description>
          <tag line="28" name="param" description="" type="mixed" variable="$value">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="28" name="return" description="" type="integer">
            <type by_reference="false">integer</type>
          </tag>
        </docblock>
        <argument line="38">
          <name>$value</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="SprayFire\Validation\Check\FireCheck" line="46" package="SprayFire\Validation\Check\FireCheck">
        <name>getCheckName</name>
        <full_name>getCheckName</full_name>
      </method>
    </class>
    <parse_markers>
      <error line="46" code="50010">No DocBlock was found for method getCheckName()</error>
    </parse_markers>
  </file>
  <file path="Validation/Check/FireCheck/ErrorCodes.php" hash="296ba7c8ca22e337dc8a1ee7486fff00" package="Default">
    <docblock line="3">
      <description>Class acting as an enum of possible error codes for the various Checks</description>
      <long-description/>
      <tag line="3" name="author" description="Charles Sprayberry"/>
      <tag line="3" name="license" description="Subject to the terms of the LICENSE file in the project root"/>
      <tag line="3" name="version" description="0.1"/>
      <tag line="3" name="since" description="0.1"/>
    </docblock>
    <class final="false" abstract="true" namespace="SprayFire\Validation\Check\FireCheck" line="21" package="SprayFire\Validation\Check\FireCheck">
      <extends/>
      <name>ErrorCodes</name>
      <full_name>\SprayFire\Validation\Check\FireCheck\ErrorCodes</full_name>
      <docblock line="14">
        <description>This implementation is here because error codes should be unique and you can
have multiple checks returning similar errors.</description>
        <long-description/>
        <tag line="14" name="package" description="SprayFire"/>
        <tag line="14" name="subpackage" description="Validation.Check.FireCheck"/>
      </docblock>
      <constant namespace="SprayFire\Validation\Check\FireCheck" line="26" package="SprayFire\Validation\Check\FireCheck">
        <name>NO_ERROR</name>
        <full_name>NO_ERROR</full_name>
        <value>0</value>
        <docblock line="23">
          <description>Code returned if no error for the check</description>
          <long-description/>
        </docblock>
      </constant>
      <constant namespace="SprayFire\Validation\Check\FireCheck" line="31" package="SprayFire\Validation\Check\FireCheck">
        <name>EQUAL_TO_ERROR</name>
        <full_name>EQUAL_TO_ERROR</full_name>
        <value>2</value>
        <docblock line="28">
          <description>Code returned if the error is because the value is equal to the comparison</description>
          <long-description/>
        </docblock>
      </constant>
      <constant namespace="SprayFire\Validation\Check\FireCheck" line="36" package="SprayFire\Validation\Check\FireCheck">
        <name>NOT_EQUAL_TO_ERROR</name>
        <full_name>NOT_EQUAL_TO_ERROR</full_name>
        <value>3</value>
        <docblock line="33">
          <description>Code returned if the error is because the value is not equal to the comparison</description>
          <long-description/>
        </docblock>
      </constant>
      <constant namespace="SprayFire\Validation\Check\FireCheck" line="41" package="SprayFire\Validation\Check\FireCheck">
        <name>GREATER_THAN_ERROR</name>
        <full_name>GREATER_THAN_ERROR</full_name>
        <value>4</value>
        <docblock line="38">
          <description>Code returned if the error is because the value is greater than the comparison</description>
          <long-description/>
        </docblock>
      </constant>
      <constant namespace="SprayFire\Validation\Check\FireCheck" line="46" package="SprayFire\Validation\Check\FireCheck">
        <name>LESS_THAN_ERROR</name>
        <full_name>LESS_THAN_ERROR</full_name>
        <value>5</value>
        <docblock line="43">
          <description>Code returned if the error is because the value is less than the comparison</description>
          <long-description/>
        </docblock>
      </constant>
      <constant namespace="SprayFire\Validation\Check\FireCheck" line="51" package="SprayFire\Validation\Check\FireCheck">
        <name>INVALID_EMAIL_ERROR</name>
        <full_name>INVALID_EMAIL_ERROR</full_name>
        <value>6</value>
        <docblock line="48">
          <description>Code returned if the error is because the value is an invalid email address</description>
          <long-description/>
        </docblock>
      </constant>
      <constant namespace="SprayFire\Validation\Check\FireCheck" line="56" package="SprayFire\Validation\Check\FireCheck">
        <name>REGEX_NOT_MATCHED_ERROR</name>
        <full_name>REGEX_NOT_MATCHED_ERROR</full_name>
        <value>7</value>
        <docblock line="53">
          <description>Code returned if a regular expression pattern is not matched by a checked value</description>
          <long-description/>
        </docblock>
      </constant>
      <constant namespace="SprayFire\Validation\Check\FireCheck" line="62" package="SprayFire\Validation\Check\FireCheck">
        <name>NOT_ALPHABETIC_ERROR</name>
        <full_name>NOT_ALPHABETIC_ERROR</full_name>
        <value>8</value>
        <docblock line="58">
          <description>Code returned if a string is not properly recognized as being only alphabetic
characters A-Z and a-z.</description>
          <long-description/>
        </docblock>
      </constant>
      <constant namespace="SprayFire\Validation\Check\FireCheck" line="68" package="SprayFire\Validation\Check\FireCheck">
        <name>NOT_ALPHANUMERIC_ERROR</name>
        <full_name>NOT_ALPHANUMERIC_ERROR</full_name>
        <value>9</value>
        <docblock line="64">
          <description>Code returned if a string is not properly recognized as being only alphanumeric
characters A-Z, a-z and 0-9.</description>
          <long-description/>
        </docblock>
      </constant>
      <constant namespace="SprayFire\Validation\Check\FireCheck" line="73" package="SprayFire\Validation\Check\FireCheck">
        <name>MINIMUM_LIMIT_ERROR</name>
        <full_name>MINIMUM_LIMIT_ERROR</full_name>
        <value>10</value>
        <docblock line="70">
          <description>Code returned if a number in a range breaks the minimum limit.</description>
          <long-description/>
        </docblock>
      </constant>
      <constant namespace="SprayFire\Validation\Check\FireCheck" line="78" package="SprayFire\Validation\Check\FireCheck">
        <name>MAXIMUM_LIMIT_ERROR</name>
        <full_name>MAXIMUM_LIMIT_ERROR</full_name>
        <value>11</value>
        <docblock line="75">
          <description>Code returned if a number in a range breaks the maximum limit.</description>
          <long-description/>
        </docblock>
      </constant>
    </class>
  </file>
  <file path="Validation/Check/FireCheck/GreaterThan.php" hash="637f0dbc736f6474aa36ea839e074083" package="Default">
    <docblock line="3">
      <description>A check to ensure that an integer value is greater than a set parameter.</description>
      <long-description/>
      <tag line="3" name="author" description="Charles Sprayberry"/>
      <tag line="3" name="license" description="Subject to the terms of the LICENSE file in the project root"/>
      <tag line="3" name="version" description="0.1"/>
      <tag line="3" name="since" description="0.1"/>
    </docblock>
    <class final="false" abstract="false" namespace="SprayFire\Validation\Check\FireCheck" line="23" package="SprayFire\Validation\Check\FireCheck">
      <extends>\SprayFire\Validation\Check\FireCheck\ComparisonCheck</extends>
      <name>GreaterThan</name>
      <full_name>\SprayFire\Validation\Check\FireCheck\GreaterThan</full_name>
      <docblock line="14">
        <description>Tokens available
-----------------------------------------------------------------------------
- value =&gt; The value being checked
- comparison =&gt; The value being checked against</description>
        <long-description/>
        <tag line="14" name="package" description="SprayFire"/>
        <tag line="14" name="subpackage" description="Validation.Check.FireCheck"/>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="SprayFire\Validation\Check\FireCheck" line="36" package="SprayFire\Validation\Check\FireCheck">
        <name>passesCheck</name>
        <full_name>passesCheck</full_name>
        <docblock line="25">
          <description>Checks to see if the integer $value is greaterThan the comparison value.</description>
          <long-description>&lt;p&gt;Possible error codes:
- ErrorCodes::NO_ERROR
- ErrorCodes::EQUAL_TO_ERROR
- ErrorCodes::LESS_THAN_ERROR&lt;/p&gt;</long-description>
          <tag line="25" name="param" description="" type="integer" variable="$value">
            <type by_reference="false">integer</type>
          </tag>
          <tag line="25" name="return" description="" type="integer">
            <type by_reference="false">integer</type>
          </tag>
        </docblock>
        <argument line="36">
          <name>$value</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="SprayFire\Validation\Check\FireCheck" line="51" package="SprayFire\Validation\Check\FireCheck">
        <name>getCheckName</name>
        <full_name>getCheckName</full_name>
        <docblock line="46">
          <description>Return the name of the check that should be used when __toString() is called</description>
          <long-description/>
          <tag line="46" name="return" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </method>
    </class>
  </file>
  <file path="Validation/Check/FireCheck/GreaterThanEqual.php" hash="7fe75d6f3eea85a47d6aa40bff591bda" package="Default">
    <docblock line="3">
      <description>Check to see if a value is greater than or equal to the comparison parameter.</description>
      <long-description/>
      <tag line="3" name="author" description="Charles Sprayberry"/>
      <tag line="3" name="license" description="Subject to the terms of the LICENSE file in the project root"/>
      <tag line="3" name="version" description="0.1"/>
      <tag line="3" name="since" description="0.1"/>
    </docblock>
    <class final="false" abstract="false" namespace="SprayFire\Validation\Check\FireCheck" line="23" package="SprayFire\Validation\Check\FireCheck">
      <extends>\SprayFire\Validation\Check\FireCheck\ComparisonCheck</extends>
      <name>GreaterThanEqual</name>
      <full_name>\SprayFire\Validation\Check\FireCheck\GreaterThanEqual</full_name>
      <docblock line="14">
        <description>Tokens available
-----------------------------------------------------------------------------
- value =&gt; The value being checked
- comparison =&gt; The value being compared against</description>
        <long-description/>
        <tag line="14" name="package" description="SprayFire"/>
        <tag line="14" name="subpackage" description="Validation.Check.FireCheck"/>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="SprayFire\Validation\Check\FireCheck" line="35" package="SprayFire\Validation\Check\FireCheck">
        <name>passesCheck</name>
        <full_name>passesCheck</full_name>
        <docblock line="25">
          <description>Checks to see if the $value is greater than or equal to the $comparisonParameter</description>
          <long-description>&lt;p&gt;Possible error codes:
- ErrorCodes::NO_ERROR
- ErrorCodes::LESS_THAN_ERROR&lt;/p&gt;</long-description>
          <tag line="25" name="param" description="" type="integer" variable="$value">
            <type by_reference="false">integer</type>
          </tag>
          <tag line="25" name="return" description="" type="integer">
            <type by_reference="false">integer</type>
          </tag>
        </docblock>
        <argument line="35">
          <name>$value</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="SprayFire\Validation\Check\FireCheck" line="48" package="SprayFire\Validation\Check\FireCheck">
        <name>getCheckName</name>
        <full_name>getCheckName</full_name>
        <docblock line="43">
          <description>Return the name of the check that should be used when __toString() is called</description>
          <long-description/>
          <tag line="43" name="return" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </method>
    </class>
  </file>
  <file path="Validation/Check/FireCheck/LessThan.php" hash="cbc4075f56c90940c2f2e7253fd25f8d" package="Default">
    <docblock line="3">
      <description>Implementation to ensure that an integer or float is less than a checked $value</description>
      <long-description/>
      <tag line="3" name="author" description="Charles Sprayberry"/>
      <tag line="3" name="license" description="Subject to the terms of the LICENSE file in the project root"/>
      <tag line="3" name="version" description="0.1"/>
      <tag line="3" name="since" description="0.1"/>
    </docblock>
    <class final="false" abstract="false" namespace="SprayFire\Validation\Check\FireCheck" line="23" package="SprayFire\Validation\Check\FireCheck">
      <extends>\SprayFire\Validation\Check\FireCheck\ComparisonCheck</extends>
      <name>LessThan</name>
      <full_name>\SprayFire\Validation\Check\FireCheck\LessThan</full_name>
      <docblock line="14">
        <description>Tokens available
-----------------------------------------------------------------------------
- value =&gt; The value checked against
- comparison =&gt; The value being compared against</description>
        <long-description/>
        <tag line="14" name="package" description="SprayFire"/>
        <tag line="14" name="subpackage" description="Validation.Check.FireCheck"/>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="SprayFire\Validation\Check\FireCheck" line="36" package="SprayFire\Validation\Check\FireCheck">
        <name>passesCheck</name>
        <full_name>passesCheck</full_name>
        <docblock line="25">
          <description>Ensure that the $value is less than the $comparisonParameter</description>
          <long-description>&lt;p&gt;Possible error codes:
- ErrorCodes::NO_ERROR
- ErrorCodes::EQUAL_TO_ERROR
- ErrorCodes::GREATER_THAN_ERROR&lt;/p&gt;</long-description>
          <tag line="25" name="param" description="" type="integer|float" variable="$value">
            <type by_reference="false">integer</type>
            <type by_reference="false">float</type>
          </tag>
          <tag line="25" name="return" description="" type="integer">
            <type by_reference="false">integer</type>
          </tag>
        </docblock>
        <argument line="36">
          <name>$value</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="SprayFire\Validation\Check\FireCheck" line="51" package="SprayFire\Validation\Check\FireCheck">
        <name>getCheckName</name>
        <full_name>getCheckName</full_name>
        <docblock line="46">
          <description>Return the name of the check that should be used when __toString() is called</description>
          <long-description/>
          <tag line="46" name="return" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </method>
    </class>
  </file>
  <file path="Validation/Check/FireCheck/LessThanEqual.php" hash="c02421ca7da08eefa10bc004f51ad633" package="Default">
    <docblock line="3">
      <description>Implementation of \SprayFire\Validation\Check\FireCheck\ComparisonCheck that
will ensure a value is less than or equal to an injected comparison.</description>
      <long-description/>
      <tag line="3" name="author" description="Charles Sprayberry"/>
      <tag line="3" name="license" description="Subject to the terms of the LICENSE file in the project root"/>
      <tag line="3" name="version" description="0.1"/>
      <tag line="3" name="since" description="0.1"/>
    </docblock>
    <class final="false" abstract="false" namespace="SprayFire\Validation\Check\FireCheck" line="23" package="SprayFire\Validation\Check\FireCheck">
      <extends>\SprayFire\Validation\Check\FireCheck\ComparisonCheck</extends>
      <name>LessThanEqual</name>
      <full_name>\SprayFire\Validation\Check\FireCheck\LessThanEqual</full_name>
      <docblock line="14">
        <description>Tokens available to implementations
--------------------------------------------------------------
- value =&gt; The value being checked
- comparison =&gt; The value being checked against</description>
        <long-description/>
        <tag line="14" name="package" description="SprayFire"/>
        <tag line="14" name="subpackage" description="Validation.Check.FireCheck"/>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="SprayFire\Validation\Check\FireCheck" line="36" package="SprayFire\Validation\Check\FireCheck">
        <name>passesCheck</name>
        <full_name>passesCheck</full_name>
        <docblock line="25">
          <description>Ensures that an integer or float is less than or equal to the constructor
injected $comparisonParameter.</description>
          <long-description>&lt;p&gt;Possible error codes:
- ErrorCodes::NO_ERROR
- ErrorCodes::GREATER_THAN_ERROR&lt;/p&gt;</long-description>
          <tag line="25" name="param" description="" type="integer|float" variable="$value">
            <type by_reference="false">integer</type>
            <type by_reference="false">float</type>
          </tag>
          <tag line="25" name="return" description="" type="integer">
            <type by_reference="false">integer</type>
          </tag>
        </docblock>
        <argument line="36">
          <name>$value</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="SprayFire\Validation\Check\FireCheck" line="49" package="SprayFire\Validation\Check\FireCheck">
        <name>getCheckName</name>
        <full_name>getCheckName</full_name>
        <docblock line="44">
          <description>Return the name of the check that should be used when __toString() is called</description>
          <long-description/>
          <tag line="44" name="return" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </method>
    </class>
  </file>
  <file path="Validation/Check/FireCheck/MessageParser.php" hash="8feddae478cb93d641cd7ac270fba6a3" package="Default">
    <docblock line="3">
      <description>Default implementaiton of SprayFire.Validation.Check.MessageParser provided
by the framework.</description>
      <long-description/>
      <tag line="3" name="author" description="Charles Sprayberry"/>
      <tag line="3" name="license" description="Subject to the terms of the LICENSE file in the project root"/>
      <tag line="3" name="version" description="0.1"/>
      <tag line="3" name="since" description="0.1"/>
    </docblock>
    <class final="false" abstract="false" namespace="SprayFire\Validation\Check\FireCheck" line="24" package="SprayFire\Validation\Check\FireCheck">
      <extends>\SprayFire\CoreObject</extends>
      <implements>\SprayFire\Validation\Check\MessageParser</implements>
      <name>MessageParser</name>
      <full_name>\SprayFire\Validation\Check\FireCheck\MessageParser</full_name>
      <docblock line="18">
        <description/>
        <long-description/>
        <tag line="18" name="package" description="SprayFire"/>
        <tag line="18" name="subpackage" description="Validation.Check.FireCheck"/>
      </docblock>
      <property final="false" static="false" visibility="protected" line="31" namespace="SprayFire\Validation\Check\FireCheck" package="Default">
        <name>$startDelimiter</name>
        <default/>
        <docblock line="26">
          <description>The beginning delimiter to match tokens in $message being parsed</description>
          <long-description/>
          <tag line="26" name="property" description="" type="string" variable="">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="38" namespace="SprayFire\Validation\Check\FireCheck" package="Default">
        <name>$endDelimiter</name>
        <default/>
        <docblock line="33">
          <description>The ending delimiter to match tokens in $message being parsed</description>
          <long-description/>
          <tag line="33" name="property" description="" type="string" variable="">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="SprayFire\Validation\Check\FireCheck" line="44" package="SprayFire\Validation\Check\FireCheck">
        <name>__construct</name>
        <full_name>__construct</full_name>
        <docblock line="40">
          <description/>
          <long-description/>
          <tag line="40" name="param" description="" type="string" variable="$startDelimiter">
            <type by_reference="false">string</type>
          </tag>
          <tag line="40" name="param" description="" type="string" variable="$endDelimiter">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="44">
          <name>$startDelimiter</name>
          <default>'{'</default>
          <type/>
        </argument>
        <argument line="44">
          <name>$endDelimiter</name>
          <default>'}'</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="SprayFire\Validation\Check\FireCheck" line="54" package="SprayFire\Validation\Check\FireCheck">
        <name>parseMessage</name>
        <full_name>parseMessage</full_name>
        <docblock line="49">
          <description/>
          <long-description/>
          <tag line="49" name="param" description="" type="string" variable="$message">
            <type by_reference="false">string</type>
          </tag>
          <tag line="49" name="param" description="" type="array" variable="$tokenValues">
            <type by_reference="false">array</type>
          </tag>
          <tag line="49" name="return" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="54">
          <name>$message</name>
          <default/>
          <type/>
        </argument>
        <argument line="54">
          <name>$tokenValues</name>
          <default/>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="SprayFire\Validation\Check\FireCheck" line="66" package="SprayFire\Validation\Check\FireCheck">
        <name>getTokenPattern</name>
        <full_name>getTokenPattern</full_name>
        <docblock line="62">
          <description/>
          <long-description/>
          <tag line="62" name="param" description="" type="string" variable="$token">
            <type by_reference="false">string</type>
          </tag>
          <tag line="62" name="return" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="66">
          <name>$token</name>
          <default/>
          <type/>
        </argument>
      </method>
    </class>
    <parse_markers>
      <critical line="18" code="50005">No short description for class \SprayFire\Validation\Check\FireCheck\MessageParser</critical>
      <error line="40" code="50012">No short description for method __construct()</error>
      <error line="49" code="50012">No short description for method parseMessage()</error>
      <error line="62" code="50012">No short description for method getTokenPattern()</error>
    </parse_markers>
  </file>
  <file path="Validation/Check/FireCheck/Range.php" hash="1c1d7cb8cf5ee563643a5c30b16c6c0b" package="Default">
    <docblock line="3">
      <description>Implementation of \SprayFire\Validation\Check\FireCheck\Check that ensures an integer
or a float are within a range, optionally being inclusive of the range.</description>
      <long-description/>
      <tag line="3" name="author" description="Charles Sprayberry"/>
      <tag line="3" name="license" description="Subject to the terms of the LICENSE file in the project root"/>
      <tag line="3" name="version" description="0.1"/>
      <tag line="3" name="since" description="0.1"/>
    </docblock>
    <class final="false" abstract="false" namespace="SprayFire\Validation\Check\FireCheck" line="24" package="SprayFire\Validation\Check\FireCheck">
      <extends>\SprayFire\Validation\Check\FireCheck\Check</extends>
      <name>Range</name>
      <full_name>\SprayFire\Validation\Check\FireCheck\Range</full_name>
      <docblock line="14">
        <description>Tokens available
--------------------------------------------------------------
- value =&gt; The value being checked
- min =&gt; The minimum number of the range
- max =&gt; The maximum number of the range</description>
        <long-description/>
        <tag line="14" name="package" description="SprayFire"/>
        <tag line="14" name="subpackage" description="Validation.Check.FireCheck"/>
      </docblock>
      <constant namespace="SprayFire\Validation\Check\FireCheck" line="29" package="SprayFire\Validation\Check\FireCheck">
        <name>MINIMUM_TOKEN</name>
        <full_name>MINIMUM_TOKEN</full_name>
        <value>'min'</value>
        <docblock line="26">
          <description>Message token that is made available for the minimum limit of the range.</description>
          <long-description/>
        </docblock>
      </constant>
      <constant namespace="SprayFire\Validation\Check\FireCheck" line="34" package="SprayFire\Validation\Check\FireCheck">
        <name>MAXIMUM_TOKEN</name>
        <full_name>MAXIMUM_TOKEN</full_name>
        <value>'max'</value>
        <docblock line="31">
          <description>Message token that is made available for the maximum limit of the range.</description>
          <long-description/>
        </docblock>
      </constant>
      <constant namespace="SprayFire\Validation\Check\FireCheck" line="40" package="SprayFire\Validation\Check\FireCheck">
        <name>EXCLUSIVE_CHECK</name>
        <full_name>EXCLUSIVE_CHECK</full_name>
        <value>'exclusive'</value>
        <docblock line="36">
          <description>Constant to be passed to third parameter for an exclusive check, by default
this is the value if no third parameter is passed</description>
          <long-description/>
        </docblock>
      </constant>
      <constant namespace="SprayFire\Validation\Check\FireCheck" line="45" package="SprayFire\Validation\Check\FireCheck">
        <name>INCLUSIVE_CHECK</name>
        <full_name>INCLUSIVE_CHECK</full_name>
        <value>'inclusive'</value>
        <docblock line="42">
          <description>Constant to be passed to third parameter for an inclusive check.</description>
          <long-description/>
        </docblock>
      </constant>
      <property final="false" static="false" visibility="protected" line="53" namespace="SprayFire\Validation\Check\FireCheck" package="Default">
        <name>$min</name>
        <default>0</default>
        <docblock line="47">
          <description>The minimum limit of the range that a $value must be greater than, or
with an exclusive check greater or equal than.</description>
          <long-description/>
          <tag line="47" name="property" description="" type="integer" variable="">
            <type by_reference="false">integer</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="61" namespace="SprayFire\Validation\Check\FireCheck" package="Default">
        <name>$max</name>
        <default>\PHP_INT_MAX</default>
        <docblock line="55">
          <description>The maximum limit of the range that a value must be less than, or with an
exclusive check less or equal than.</description>
          <long-description/>
          <tag line="55" name="property" description="" type="integer" variable="">
            <type by_reference="false">integer</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="69" namespace="SprayFire\Validation\Check\FireCheck" package="Default">
        <name>$checkType</name>
        <default>self::EXCLUSIVE_CHECK</default>
        <docblock line="63">
          <description>Used to determine whether the checking algorithm should use an exclusive or
inclusive check.</description>
          <long-description/>
          <tag line="63" name="property" description="" type="string" variable="">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="SprayFire\Validation\Check\FireCheck" line="75" package="SprayFire\Validation\Check\FireCheck">
        <name>__construct</name>
        <full_name>__construct</full_name>
        <docblock line="71">
          <description/>
          <long-description/>
          <tag line="71" name="param" description="" type="integer|float" variable="$min">
            <type by_reference="false">integer</type>
            <type by_reference="false">float</type>
          </tag>
          <tag line="71" name="param" description="" type="integer|float" variable="$max">
            <type by_reference="false">integer</type>
            <type by_reference="false">float</type>
          </tag>
        </docblock>
        <argument line="75">
          <name>$min</name>
          <default/>
          <type/>
        </argument>
        <argument line="75">
          <name>$max</name>
          <default/>
          <type/>
        </argument>
        <argument line="75">
          <name>$checkType</name>
          <default>self::EXCLUSIVE_CHECK</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="SprayFire\Validation\Check\FireCheck" line="87" package="SprayFire\Validation\Check\FireCheck">
        <name>setMin</name>
        <full_name>setMin</full_name>
        <docblock line="81">
          <description>Will set the $min class property and make available the token 'min' with
the passed value.</description>
          <long-description/>
          <tag line="81" name="param" description="" type="integer|float" variable="$min">
            <type by_reference="false">integer</type>
            <type by_reference="false">float</type>
          </tag>
        </docblock>
        <argument line="87">
          <name>$min</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="SprayFire\Validation\Check\FireCheck" line="98" package="SprayFire\Validation\Check\FireCheck">
        <name>setMax</name>
        <full_name>setMax</full_name>
        <docblock line="92">
          <description>Will set the $max class property and make available the token 'max' with
the passed value.</description>
          <long-description/>
          <tag line="92" name="param" description="" type="integer|float" variable="$max">
            <type by_reference="false">integer</type>
            <type by_reference="false">float</type>
          </tag>
        </docblock>
        <argument line="98">
          <name>$max</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="SprayFire\Validation\Check\FireCheck" line="109" package="SprayFire\Validation\Check\FireCheck">
        <name>setCheckType</name>
        <full_name>setCheckType</full_name>
        <docblock line="103">
          <description>Ensures that a valid check type is set and will trigger an error if an
invalid type is attempted to be set.</description>
          <long-description/>
          <tag line="103" name="param" description="" type="string" variable="$type">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="109">
          <name>$type</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="SprayFire\Validation\Check\FireCheck" line="135" package="SprayFire\Validation\Check\FireCheck">
        <name>passesCheck</name>
        <full_name>passesCheck</full_name>
        <docblock line="123">
          <description>Ensures that the passed $value is within the range injected at construction
time.</description>
          <long-description>&lt;p&gt;Possible error codes:
- ErrorCodes::NO_ERROR
- ErrorCodes::MINIMUM_LIMIT_ERROR
- ErrorCodes::MAXIMUM_LIMIT_ERROR&lt;/p&gt;</long-description>
          <tag line="123" name="param" description="" type="integer|float" variable="$value">
            <type by_reference="false">integer</type>
            <type by_reference="false">float</type>
          </tag>
          <tag line="123" name="return" description="" type="integer">
            <type by_reference="false">integer</type>
          </tag>
        </docblock>
        <argument line="135">
          <name>$value</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="SprayFire\Validation\Check\FireCheck" line="149" package="SprayFire\Validation\Check\FireCheck">
        <name>doExclusiveCheck</name>
        <full_name>doExclusiveCheck</full_name>
        <docblock line="145">
          <description/>
          <long-description/>
          <tag line="145" name="param" description="" type="integer|float" variable="$value">
            <type by_reference="false">integer</type>
            <type by_reference="false">float</type>
          </tag>
          <tag line="145" name="return" description="" type="integer">
            <type by_reference="false">integer</type>
          </tag>
        </docblock>
        <argument line="149">
          <name>$value</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="SprayFire\Validation\Check\FireCheck" line="165" package="SprayFire\Validation\Check\FireCheck">
        <name>doInclusiveCheck</name>
        <full_name>doInclusiveCheck</full_name>
        <docblock line="161">
          <description/>
          <long-description/>
          <tag line="161" name="param" description="" type="integer|float" variable="$value">
            <type by_reference="false">integer</type>
            <type by_reference="false">float</type>
          </tag>
          <tag line="161" name="return" description="" type="integer">
            <type by_reference="false">integer</type>
          </tag>
        </docblock>
        <argument line="165">
          <name>$value</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="SprayFire\Validation\Check\FireCheck" line="182" package="SprayFire\Validation\Check\FireCheck">
        <name>getCheckName</name>
        <full_name>getCheckName</full_name>
        <docblock line="177">
          <description>Return the name of the check that should be used when __toString() is called</description>
          <long-description/>
          <tag line="177" name="return" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </method>
    </class>
    <parse_markers>
      <error line="71" code="50012">No short description for method __construct()</error>
      <error line="71" code="50015">Argument $checkType is missing from the Docblock of __construct()</error>
      <error line="145" code="50012">No short description for method doExclusiveCheck()</error>
      <error line="161" code="50012">No short description for method doInclusiveCheck()</error>
    </parse_markers>
  </file>
  <file path="Validation/Check/FireCheck/Regex.php" hash="6ed43c3273c816ab64b3750fad2fa51d" package="Default">
    <docblock line="3">
      <description>An implementation of \SprayFire\Validation\Check\FireCheck\Check that will
match a value against a regular expression pattern.</description>
      <long-description/>
      <tag line="3" name="author" description="Charles Sprayberry"/>
      <tag line="3" name="license" description="Subject to the terms of the LICENSE file in the project root"/>
      <tag line="3" name="version" description="0.1"/>
      <tag line="3" name="since" description="0.1"/>
    </docblock>
    <class final="false" abstract="false" namespace="SprayFire\Validation\Check\FireCheck" line="22" package="SprayFire\Validation\Check\FireCheck">
      <extends>\SprayFire\Validation\Check\FireCheck\Check</extends>
      <name>Regex</name>
      <full_name>\SprayFire\Validation\Check\FireCheck\Regex</full_name>
      <docblock line="14">
        <description>Tokens available
-----------------------------------------------------------------------------
- value =&gt; The value checked against</description>
        <long-description/>
        <tag line="14" name="package" description="SprayFire"/>
        <tag line="14" name="subpackage" description="Validation.Check.FireCheck"/>
      </docblock>
      <property final="false" static="false" visibility="protected" line="29" namespace="SprayFire\Validation\Check\FireCheck" package="Default">
        <name>$pattern</name>
        <default>''</default>
        <docblock line="24">
          <description>The regular expression pattern that will be matched against the checked value</description>
          <long-description/>
          <tag line="24" name="property" description="" type="string" variable="">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="SprayFire\Validation\Check\FireCheck" line="37" package="SprayFire\Validation\Check\FireCheck">
        <name>__construct</name>
        <full_name>__construct</full_name>
        <docblock line="31">
          <description>Pass in the regular expression that you want to match against the checked
value.</description>
          <long-description/>
          <tag line="31" name="param" description="" type="string" variable="$pattern">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="37">
          <name>$pattern</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="SprayFire\Validation\Check\FireCheck" line="51" package="SprayFire\Validation\Check\FireCheck">
        <name>passesCheck</name>
        <full_name>passesCheck</full_name>
        <docblock line="41">
          <description>Check if a $value matches the regex pattern passed at construction.</description>
          <long-description>&lt;p&gt;Possible error codes:
- ErrorCodes::NO_ERROR
- ErrorCodes::REGEX_NOT_MATCHED&lt;/p&gt;</long-description>
          <tag line="41" name="param" description="" type="string" variable="$value">
            <type by_reference="false">string</type>
          </tag>
          <tag line="41" name="return" description="" type="int">
            <type by_reference="false">int</type>
          </tag>
        </docblock>
        <argument line="51">
          <name>$value</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="SprayFire\Validation\Check\FireCheck" line="65" package="SprayFire\Validation\Check\FireCheck">
        <name>getCheckName</name>
        <full_name>getCheckName</full_name>
        <docblock line="60">
          <description>Return the name of the check that should be used when __toString() is called</description>
          <long-description/>
          <tag line="60" name="return" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </method>
    </class>
  </file>
  <file path="Validation/Check/FireCheck/StringLength.php" hash="e5bc62b330941f7d57dabc63288629be" package="Default">
    <docblock line="3">
      <description>Check to ensure that a string value length passes a Check injected at construction
time.</description>
      <long-description/>
      <tag line="3" name="author" description="Charles Sprayberry"/>
      <tag line="3" name="license" description="Subject to the terms of the LICENSE file in the project root"/>
      <tag line="3" name="version" description="0.1"/>
      <tag line="3" name="since" description="0.1"/>
    </docblock>
    <class final="false" abstract="false" namespace="SprayFire\Validation\Check\FireCheck" line="20" package="SprayFire\Validation\Check\FireCheck">
      <extends>\SprayFire\Validation\Check\FireCheck\ComparisonCheck</extends>
      <name>StringLength</name>
      <full_name>\SprayFire\Validation\Check\FireCheck\StringLength</full_name>
      <docblock line="16">
        <description/>
        <long-description/>
        <tag line="16" name="package" description="SprayFire"/>
        <tag line="16" name="subpackage" description="Validation.Check.FireCheck"/>
      </docblock>
      <property final="false" static="false" visibility="protected" line="25" namespace="SprayFire\Validation\Check\FireCheck" package="Default">
        <name>$Check</name>
        <default/>
        <docblock line="22">
          <description/>
          <long-description/>
          <tag line="22" name="property" description="" type="\SprayFire\Validation\Check\Check" variable="">
            <type by_reference="false">\SprayFire\Validation\Check\Check</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="SprayFire\Validation\Check\FireCheck" line="30" package="SprayFire\Validation\Check\FireCheck">
        <name>__construct</name>
        <full_name>__construct</full_name>
        <docblock line="27">
          <description/>
          <long-description/>
          <tag line="27" name="param" description="" type="\SprayFire\Validation\Check\Check" variable="$Check">
            <type by_reference="false">\SprayFire\Validation\Check\Check</type>
          </tag>
        </docblock>
        <argument line="30">
          <name>$Check</name>
          <default/>
          <type>\SprayFire\Validation\Check\Check</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="SprayFire\Validation\Check\FireCheck" line="41" package="SprayFire\Validation\Check\FireCheck">
        <name>passesCheck</name>
        <full_name>passesCheck</full_name>
        <docblock line="34">
          <description>Will take the string length and pass to the Check injected at construction
time.</description>
          <long-description/>
          <tag line="34" name="param" description="" type="mixed" variable="$value">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="34" name="return" description="" type="integer">
            <type by_reference="false">integer</type>
          </tag>
        </docblock>
        <argument line="41">
          <name>$value</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="SprayFire\Validation\Check\FireCheck" line="50" package="SprayFire\Validation\Check\FireCheck">
        <name>getCheckName</name>
        <full_name>getCheckName</full_name>
        <docblock line="47">
          <description/>
          <long-description/>
          <tag line="47" name="return" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </method>
    </class>
    <parse_markers>
      <critical line="16" code="50005">No short description for class \SprayFire\Validation\Check\FireCheck\StringLength</critical>
      <critical line="22" code="50019">No short description for property $Check</critical>
      <error line="27" code="50012">No short description for method __construct()</error>
      <error line="47" code="50012">No short description for method getCheckName()</error>
    </parse_markers>
  </file>
  <file path="Validation/Check/MessageParser.php" hash="ec2b87873a47fd75193876f6931a1997" package="Default">
    <docblock line="3">
      <description>Interface used to parse messages for a given SprayFire.Validation.Check.Check</description>
      <long-description/>
      <tag line="3" name="author" description="Charles Sprayberry"/>
      <tag line="3" name="license" description="Subject to the terms of the LICENSE file in the project root"/>
      <tag line="3" name="version" description="0.1"/>
      <tag line="3" name="since" description="0.1"/>
    </docblock>
    <interface namespace="SprayFire\Validation\Check" line="20" package="SprayFire\Validation\Check">
      <name>MessageParser</name>
      <full_name>\SprayFire\Validation\Check\MessageParser</full_name>
      <extends>\SprayFire\Object</extends>
      <docblock line="16">
        <description/>
        <long-description/>
        <tag line="16" name="package" description="SprayFire"/>
        <tag line="16" name="subpackage" description="Validation.Check"/>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="SprayFire\Validation\Check" line="30" package="SprayFire\Validation\Check">
        <name>parseMessage</name>
        <full_name>parseMessage</full_name>
        <docblock line="22">
          <description>Should return a formatted string with the values in $tokenValues matching
the corresponding tokens in $message.</description>
          <long-description/>
          <tag line="22" name="param" description="" type="string" variable="$message">
            <type by_reference="false">string</type>
          </tag>
          <tag line="22" name="param" description="" type="array" variable="$tokenValues">
            <type by_reference="false">array</type>
          </tag>
          <tag line="22" name="return" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="30">
          <name>$message</name>
          <default/>
          <type/>
        </argument>
        <argument line="30">
          <name>$tokenValues</name>
          <default/>
          <type>array</type>
        </argument>
      </method>
    </interface>
  </file>
  <file path="Validation/Check/MessageTokenizable.php" hash="193e4a05c41a5e775eef3d7db94b6703" package="Default">
    <docblock line="3">
      <description>Interface that says some message provides tokens that should be filled with
some value.</description>
      <long-description/>
      <tag line="3" name="author" description="Charles Sprayberry"/>
      <tag line="3" name="license" description="Subject to the terms of the LICENSE file in the project root"/>
      <tag line="3" name="version" description="0.1"/>
      <tag line="3" name="since" description="0.1"/>
    </docblock>
    <interface namespace="SprayFire\Validation\Check" line="21" package="SprayFire\Validation\Check">
      <name>MessageTokenizable</name>
      <full_name>\SprayFire\Validation\Check\MessageTokenizable</full_name>
      <extends>\SprayFire\Object</extends>
      <docblock line="17">
        <description/>
        <long-description/>
        <tag line="17" name="package" description="SprayFire"/>
        <tag line="17" name="subpackage" description="Validation.Check"/>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="SprayFire\Validation\Check" line="29" package="SprayFire\Validation\Check">
        <name>getTokenValues</name>
        <full_name>getTokenValues</full_name>
        <docblock line="23">
          <description>A map of [token =&gt; value] that should be used for whatever message is
being represented by the implementing class.</description>
          <long-description/>
          <tag line="23" name="return" description="" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </method>
    </interface>
  </file>
  <file path="Validation/Exception/InvalidMethodChain.php" hash="13b2309c40f61435c23bac571faa3733" package="Default">
    <docblock line="3">
      <description>Exception thrown if any Fluent API utilized by SprayFire.Validation implementations
has an invalid series of methods called.</description>
      <long-description/>
      <tag line="3" name="author" description="Charles Sprayberry"/>
      <tag line="3" name="license" description="Subject to the terms of the LICENSE file in the project root"/>
      <tag line="3" name="version" description="0.1"/>
      <tag line="3" name="since" description="0.1"/>
    </docblock>
    <class final="false" abstract="false" namespace="SprayFire\Validation\Exception" line="21" package="SprayFire\Validation\Exception">
      <extends>\RuntimeException</extends>
      <name>InvalidMethodChain</name>
      <full_name>\SprayFire\Validation\Exception\InvalidMethodChain</full_name>
      <docblock line="17">
        <description/>
        <long-description/>
        <tag line="17" name="package" description="SprayFire"/>
        <tag line="17" name="subpackage" description="Validation.Exception"/>
      </docblock>
    </class>
    <parse_markers>
      <critical line="17" code="50005">No short description for class \SprayFire\Validation\Exception\InvalidMethodChain</critical>
    </parse_markers>
  </file>
  <file path="Validation/FireValidation/Rules.php" hash="aa1f4c0236c630d52275d1412ece1cad" package="Default">
    <docblock line="3">
      <description>Default implementation of SprayFire.Validation.Rules provided by SprayFire</description>
      <long-description/>
      <tag line="3" name="author" description="Charles Sprayberry"/>
      <tag line="3" name="license" description="Subject to the terms of the LICENSE file in the project root"/>
      <tag line="3" name="version" description="0.1"/>
      <tag line="3" name="since" description="0.1"/>
    </docblock>
    <class final="false" abstract="false" namespace="SprayFire\Validation\FireValidation" line="28" package="SprayFire\Validaiton\FireValidation">
      <extends>\SprayFire\CoreObject</extends>
      <implements>\SprayFire\Validation\Rules</implements>
      <name>Rules</name>
      <full_name>\SprayFire\Validation\FireValidation\Rules</full_name>
      <docblock line="20">
        <description>This implementation allows for the use of a Fluent API to add SprayFire.Validation.Check.Check
objects against a given field; this Fluent API is completely optional and the
same actions can be performed in a non-fluent manner.</description>
        <long-description/>
        <tag line="20" name="package" description="SprayFire"/>
        <tag line="20" name="subpackage" description="Validaiton.FireValidation"/>
      </docblock>
      <property final="false" static="false" visibility="protected" line="35" namespace="SprayFire\Validation\FireValidation" package="Default">
        <name>$fieldRules</name>
        <default>array()</default>
        <docblock line="30">
          <description>Array of [field =&gt; SplObjectStorage[Check =&gt; breakOnFailure]]</description>
          <long-description/>
          <tag line="30" name="property" description="" type="array" variable="">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="43" namespace="SprayFire\Validation\FireValidation" package="Default">
        <name>$activeField</name>
        <default/>
        <docblock line="37">
          <description>For the Fluent API section of this implementation determines what field
to associate calls to Rules::add()</description>
          <long-description/>
          <tag line="37" name="property" description="" type="string" variable="">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="SprayFire\Validation\FireValidation" line="52" package="SprayFire\Validaiton\FireValidation">
        <name>addCheck</name>
        <full_name>addCheck</full_name>
        <docblock line="45">
          <description>Will add the passed $Check as the next in order to be ran for $field.</description>
          <long-description/>
          <tag line="45" name="param" description="" type="string" variable="$field">
            <type by_reference="false">string</type>
          </tag>
          <tag line="45" name="param" description="" type="\SprayFire\Validation\Check\Check" variable="$Check">
            <type by_reference="false">\SprayFire\Validation\Check\Check</type>
          </tag>
          <tag line="45" name="param" description="" type="boolean" variable="$breakOnFailure">
            <type by_reference="false">boolean</type>
          </tag>
        </docblock>
        <argument line="52">
          <name>$field</name>
          <default/>
          <type/>
        </argument>
        <argument line="52">
          <name>$Check</name>
          <default/>
          <type>\SprayFire\Validation\Check\Check</type>
        </argument>
        <argument line="52">
          <name>$breakOnFailure</name>
          <default>false</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="SprayFire\Validation\FireValidation" line="64" package="SprayFire\Validaiton\FireValidation">
        <name>createFieldStorage</name>
        <full_name>createFieldStorage</full_name>
        <docblock line="58">
          <description>If the $field does not have a SplObjectStorage created for it one will be
added to $fieldRules</description>
          <long-description/>
          <tag line="58" name="param" description="" type="string" variable="$field">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="64">
          <name>$field</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="SprayFire\Validation\FireValidation" line="76" package="SprayFire\Validaiton\FireValidation">
        <name>getChecks</name>
        <full_name>getChecks</full_name>
        <docblock line="70">
          <description>Return the storage of $Check added against $field</description>
          <long-description/>
          <tag line="70" name="param" description="" type="string" variable="$field">
            <type by_reference="false">string</type>
          </tag>
          <tag line="70" name="return" description="" type="\SplObjectStorage">
            <type by_reference="false">\SplObjectStorage</type>
          </tag>
        </docblock>
        <argument line="76">
          <name>$field</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="SprayFire\Validation\FireValidation" line="91" package="SprayFire\Validaiton\FireValidation">
        <name>forField</name>
        <full_name>forField</full_name>
        <docblock line="85">
          <description>Sets the field that all successive add() calls will store the $Check against.</description>
          <long-description/>
          <tag line="85" name="param" description="" type="string" variable="$field">
            <type by_reference="false">string</type>
          </tag>
          <tag line="85" name="return" description="" type="\SprayFire\Validation\FireValidation\Rules">
            <type by_reference="false">\SprayFire\Validation\FireValidation\Rules</type>
          </tag>
        </docblock>
        <argument line="91">
          <name>$field</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="SprayFire\Validation\FireValidation" line="104" package="SprayFire\Validaiton\FireValidation">
        <name>add</name>
        <full_name>add</full_name>
        <docblock line="96">
          <description>Adds a Check to the storage for the field set by the last call to Rules::forField</description>
          <long-description/>
          <tag line="96" name="param" description="" type="\SprayFire\Validation\Check\Check" variable="$Check">
            <type by_reference="false">\SprayFire\Validation\Check\Check</type>
          </tag>
          <tag line="96" name="param" description="" type="boolean" variable="$breakOnFailure">
            <type by_reference="false">boolean</type>
          </tag>
          <tag line="96" name="return" description="" type="\SprayFire\Validation\FireValidation\Rules">
            <type by_reference="false">\SprayFire\Validation\FireValidation\Rules</type>
          </tag>
          <tag line="96" name="throws" description="" type="\SprayFire\Validation\Exception\InvalidMethodChain">
            <type by_reference="false">\SprayFire\Validation\Exception\InvalidMethodChain</type>
          </tag>
        </docblock>
        <argument line="104">
          <name>$Check</name>
          <default/>
          <type>\SprayFire\Validation\Check\Check</type>
        </argument>
        <argument line="104">
          <name>$breakOnFailure</name>
          <default>false</default>
          <type/>
        </argument>
      </method>
    </class>
  </file>
  <file path="Validation/FireValidation/Validator.php" hash="b78420a5d4406214d9c3329541d58c42" package="Default">
    <docblock line="3">
      <description>Default implementation of \SprayFire\Validation\Validator provided by the
framework.</description>
      <long-description/>
      <tag line="3" name="author" description="Charles Sprayberry"/>
      <tag line="3" name="license" description="Subject to the terms of the LICENSE file in the project root"/>
      <tag line="3" name="version" description="0.1"/>
      <tag line="3" name="since" description="0.1"/>
    </docblock>
    <class final="false" abstract="false" namespace="SprayFire\Validation\FireValidation" line="28" package="SprayFire\Validation\FireValidation">
      <extends>\SprayFire\CoreObject</extends>
      <implements>\SprayFire\Validation\Validator</implements>
      <name>Validator</name>
      <full_name>\SprayFire\Validation\FireValidation\Validator</full_name>
      <docblock line="21">
        <description>Validates a set of data, passed as an associative array, checks against the
Checks stored against the field for those Rules.</description>
        <long-description/>
        <tag line="21" name="package" description="SprayFire"/>
        <tag line="21" name="subpackage" description="Validation.FireValidation"/>
      </docblock>
      <property final="false" static="false" visibility="protected" line="33" namespace="SprayFire\Validation\FireValidation" package="Default">
        <name>$MessageParser</name>
        <default/>
        <docblock line="30">
          <description/>
          <long-description/>
          <tag line="30" name="property" description="" type="\SprayFire\Validation\Check\MessageParser" variable="">
            <type by_reference="false">\SprayFire\Validation\Check\MessageParser</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="SprayFire\Validation\FireValidation" line="38" package="SprayFire\Validation\FireValidation">
        <name>__construct</name>
        <full_name>__construct</full_name>
        <docblock line="35">
          <description/>
          <long-description/>
          <tag line="35" name="param" description="" type="\SprayFire\Validation\Check\MessageParser" variable="$MessageParser">
            <type by_reference="false">\SprayFire\Validation\Check\MessageParser</type>
          </tag>
        </docblock>
        <argument line="38">
          <name>$MessageParser</name>
          <default/>
          <type>\SprayFire\Validation\Check\MessageParser</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="SprayFire\Validation\FireValidation" line="47" package="SprayFire\Validation\FireValidation">
        <name>validate</name>
        <full_name>validate</full_name>
        <docblock line="42">
          <description/>
          <long-description/>
          <tag line="42" name="param" description="" type="array" variable="$data">
            <type by_reference="false">array</type>
          </tag>
          <tag line="42" name="param" description="" type="\SprayFire\Validation\Rules" variable="$Rules">
            <type by_reference="false">\SprayFire\Validation\Rules</type>
          </tag>
          <tag line="42" name="return" description="" type="\SprayFire\Validation\Result\Set">
            <type by_reference="false">\SprayFire\Validation\Result\Set</type>
          </tag>
        </docblock>
        <argument line="47">
          <name>$data</name>
          <default/>
          <type>array</type>
        </argument>
        <argument line="47">
          <name>$Rules</name>
          <default/>
          <type>\SprayFire\Validation\Rules</type>
        </argument>
      </method>
    </class>
    <parse_markers>
      <critical line="30" code="50019">No short description for property $MessageParser</critical>
      <error line="35" code="50012">No short description for method __construct()</error>
      <error line="42" code="50012">No short description for method validate()</error>
    </parse_markers>
  </file>
  <file path="Validation/Result/FireResult/Result.php" hash="9740e5e4d7d26120d6fe6b568b51529c" package="Default">
    <docblock line="3">
      <description>Very simple implementation of SprayFire.Validation.Result.Result that simply
passes data injected at construction time to various getters.</description>
      <long-description/>
      <tag line="3" name="author" description="Charles Sprayberry"/>
      <tag line="3" name="license" description="Subject to the terms of the LICENSE file in the project root"/>
      <tag line="3" name="version" description="0.1"/>
      <tag line="3" name="since" description="0.1"/>
    </docblock>
    <class final="false" abstract="false" namespace="SprayFire\Validation\Result\FireResult" line="22" package="SprayFire\Validation\Result\FireResult">
      <extends>\SprayFire\CoreObject</extends>
      <implements>\SprayFire\Validation\Result\Result</implements>
      <name>Result</name>
      <full_name>\SprayFire\Validation\Result\FireResult\Result</full_name>
      <docblock line="18">
        <description/>
        <long-description/>
        <tag line="18" name="package" description="SprayFire"/>
        <tag line="18" name="subpackage" description="Validation.Result.FireResult"/>
      </docblock>
      <property final="false" static="false" visibility="protected" line="27" namespace="SprayFire\Validation\Result\FireResult" package="Default">
        <name>$fieldName</name>
        <default/>
        <docblock line="24">
          <description/>
          <long-description/>
          <tag line="24" name="property" description="" type="string" variable="">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="32" namespace="SprayFire\Validation\Result\FireResult" package="Default">
        <name>$fieldValue</name>
        <default/>
        <docblock line="29">
          <description/>
          <long-description/>
          <tag line="29" name="property" description="" type="mixed" variable="">
            <type by_reference="false">mixed</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="39" namespace="SprayFire\Validation\Result\FireResult" package="Default">
        <name>$messages</name>
        <default/>
        <docblock line="34">
          <description>This array should have 2 keys 'log' and 'display' holding formatted messages</description>
          <long-description/>
          <tag line="34" name="property" description="" type="array" variable="">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="44" namespace="SprayFire\Validation\Result\FireResult" package="Default">
        <name>$checkName</name>
        <default/>
        <docblock line="41">
          <description/>
          <long-description/>
          <tag line="41" name="property" description="" type="string" variable="">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="49" namespace="SprayFire\Validation\Result\FireResult" package="Default">
        <name>$passedCheck</name>
        <default/>
        <docblock line="46">
          <description/>
          <long-description/>
          <tag line="46" name="property" description="" type="boolean" variable="">
            <type by_reference="false">boolean</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="SprayFire\Validation\Result\FireResult" line="58" package="SprayFire\Validation\Result\FireResult">
        <name>__construct</name>
        <full_name>__construct</full_name>
        <docblock line="51">
          <description/>
          <long-description/>
          <tag line="51" name="param" description="" type="string" variable="$fieldName">
            <type by_reference="false">string</type>
          </tag>
          <tag line="51" name="param" description="" type="mixed" variable="$fieldValue">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="51" name="param" description="" type="string" variable="$checkName">
            <type by_reference="false">string</type>
          </tag>
          <tag line="51" name="param" description="" type="boolean" variable="$passedCheck">
            <type by_reference="false">boolean</type>
          </tag>
          <tag line="51" name="param" description="" type="array" variable="$messages">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
        <argument line="58">
          <name>$fieldName</name>
          <default/>
          <type/>
        </argument>
        <argument line="58">
          <name>$fieldValue</name>
          <default/>
          <type/>
        </argument>
        <argument line="58">
          <name>$checkName</name>
          <default/>
          <type/>
        </argument>
        <argument line="58">
          <name>$passedCheck</name>
          <default/>
          <type/>
        </argument>
        <argument line="58">
          <name>$messages</name>
          <default/>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="SprayFire\Validation\Result\FireResult" line="69" package="SprayFire\Validation\Result\FireResult">
        <name>getDisplayMessage</name>
        <full_name>getDisplayMessage</full_name>
        <docblock line="66">
          <description/>
          <long-description/>
          <tag line="66" name="return" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="SprayFire\Validation\Result\FireResult" line="76" package="SprayFire\Validation\Result\FireResult">
        <name>getFieldName</name>
        <full_name>getFieldName</full_name>
        <docblock line="73">
          <description/>
          <long-description/>
          <tag line="73" name="return" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="SprayFire\Validation\Result\FireResult" line="83" package="SprayFire\Validation\Result\FireResult">
        <name>getFieldValue</name>
        <full_name>getFieldValue</full_name>
        <docblock line="80">
          <description/>
          <long-description/>
          <tag line="80" name="return" description="" type="mixed">
            <type by_reference="false">mixed</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="SprayFire\Validation\Result\FireResult" line="90" package="SprayFire\Validation\Result\FireResult">
        <name>getLogMessage</name>
        <full_name>getLogMessage</full_name>
        <docblock line="87">
          <description/>
          <long-description/>
          <tag line="87" name="return" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="SprayFire\Validation\Result\FireResult" line="97" package="SprayFire\Validation\Result\FireResult">
        <name>passedCheck</name>
        <full_name>passedCheck</full_name>
        <docblock line="94">
          <description/>
          <long-description/>
          <tag line="94" name="return" description="" type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="SprayFire\Validation\Result\FireResult" line="104" package="SprayFire\Validation\Result\FireResult">
        <name>getCheckName</name>
        <full_name>getCheckName</full_name>
        <docblock line="101">
          <description/>
          <long-description/>
          <tag line="101" name="return" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </method>
    </class>
    <parse_markers>
      <critical line="18" code="50005">No short description for class \SprayFire\Validation\Result\FireResult\Result</critical>
      <critical line="24" code="50019">No short description for property $fieldName</critical>
      <critical line="29" code="50019">No short description for property $fieldValue</critical>
      <critical line="41" code="50019">No short description for property $checkName</critical>
      <critical line="46" code="50019">No short description for property $passedCheck</critical>
      <error line="51" code="50012">No short description for method __construct()</error>
      <error line="66" code="50012">No short description for method getDisplayMessage()</error>
      <error line="73" code="50012">No short description for method getFieldName()</error>
      <error line="80" code="50012">No short description for method getFieldValue()</error>
      <error line="87" code="50012">No short description for method getLogMessage()</error>
      <error line="94" code="50012">No short description for method passedCheck()</error>
      <error line="101" code="50012">No short description for method getCheckName()</error>
    </parse_markers>
  </file>
  <file path="Validation/Result/FireResult/Set.php" hash="46fe7c6e08e23656f028e737275fd9d1" package="Default">
    <docblock line="3">
      <description>Implementation of the SprayFire.Validation.Result.Result interface returned by
the SprayFire.Validation.FireValidation.Validator::validate method.</description>
      <long-description/>
      <tag line="3" name="author" description="Charles Sprayberry"/>
      <tag line="3" name="license" description="Subject to the terms of the LICENSE file in the project root"/>
      <tag line="3" name="version" description="0.1"/>
      <tag line="3" name="since" description="0.1"/>
    </docblock>
    <class final="false" abstract="false" namespace="SprayFire\Validation\Result\FireResult" line="24" package="SprayFire\Validation\FireValidation\FireResult">
      <extends>\SprayFire\CoreObject</extends>
      <implements>\SprayFire\Validation\Result\Set</implements>
      <name>Set</name>
      <full_name>\SprayFire\Validation\Result\FireResult\Set</full_name>
      <docblock line="18">
        <description/>
        <long-description/>
        <tag line="18" name="package" description="SprayFire"/>
        <tag line="18" name="subpackage" description="Validation.FireValidation.FireResult"/>
      </docblock>
      <property final="false" static="false" visibility="private" line="32" namespace="SprayFire\Validation\Result\FireResult" package="Default">
        <name>$successfulResults</name>
        <default>array()</default>
        <docblock line="26">
          <description>Holds the valid \SprayFire\Validation\Result\Result objects added stored
against the field for the given Result.</description>
          <long-description/>
          <tag line="26" name="property" description="" type="array" variable="">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="private" line="43" namespace="SprayFire\Validation\Result\FireResult" package="Default">
        <name>$numSuccessfulResults</name>
        <default>0</default>
        <docblock line="34">
          <description>Holds the number of successful results added to the set.</description>
          <long-description>&lt;p&gt;This is here to ensure that we can return a proper value from Set::count
without having to loop through both successfulResults and failureResults
for each call to count.&lt;/p&gt;</long-description>
          <tag line="34" name="property" description="" type="integer" variable="">
            <type by_reference="false">integer</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="private" line="51" namespace="SprayFire\Validation\Result\FireResult" package="Default">
        <name>$failureResults</name>
        <default>array()</default>
        <docblock line="45">
          <description>Holds the invalid \SprayFire\Validation\Result\Result objects added stored
against the field for the given Result.</description>
          <long-description/>
          <tag line="45" name="property" description="" type="array" variable="">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="private" line="62" namespace="SprayFire\Validation\Result\FireResult" package="Default">
        <name>$numFailureResults</name>
        <default>0</default>
        <docblock line="53">
          <description>Holds the number of failure results added to the set.</description>
          <long-description>&lt;p&gt;This is here to ensure that we can return a proper value from Set::count
without having to loop through both successfulResults and failureResults
for each call to count.&lt;/p&gt;</long-description>
          <tag line="53" name="property" description="" type="integer" variable="">
            <type by_reference="false">integer</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="private" line="70" namespace="SprayFire\Validation\Result\FireResult" package="Default">
        <name>$errorMessage</name>
        <default>'An invalid argument, %s, was passed to %s, please use defined constants.'</default>
        <docblock line="64">
          <description>An error message in sprintf format that is used when an improper argument
is passed to a given method in this implementation.</description>
          <long-description/>
          <tag line="64" name="property" description="" type="string" variable="">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="SprayFire\Validation\Result\FireResult" line="81" package="SprayFire\Validation\FireValidation\FireResult">
        <name>addResult</name>
        <full_name>addResult</full_name>
        <docblock line="72">
          <description>Will add the appropriate $Result stored against its field name based on the
validity of the $Result.</description>
          <long-description>&lt;p&gt;Will also increment internal counters for $Results added to keep track of
the appropriate return value for count()&lt;/p&gt;</long-description>
          <tag line="72" name="param" description="" type="\SprayFire\Validation\Result\Result" variable="$Result">
            <type by_reference="false">\SprayFire\Validation\Result\Result</type>
          </tag>
        </docblock>
        <argument line="81">
          <name>$Result</name>
          <default/>
          <type>\SprayFire\Validation\Result\Result</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="SprayFire\Validation\Result\FireResult" line="92" package="SprayFire\Validation\FireValidation\FireResult">
        <name>addSuccessfulResult</name>
        <full_name>addSuccessfulResult</full_name>
        <docblock line="89">
          <description/>
          <long-description/>
          <tag line="89" name="param" description="" type="\SprayFire\Validation\Result\Result" variable="$Result">
            <type by_reference="false">\SprayFire\Validation\Result\Result</type>
          </tag>
        </docblock>
        <argument line="92">
          <name>$Result</name>
          <default/>
          <type>\SprayFire\Validation\Result\Result</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="SprayFire\Validation\Result\FireResult" line="104" package="SprayFire\Validation\FireValidation\FireResult">
        <name>addFailedResult</name>
        <full_name>addFailedResult</full_name>
        <docblock line="101">
          <description/>
          <long-description/>
          <tag line="101" name="param" description="" type="\SprayFire\Validation\Result\Result" variable="$Result">
            <type by_reference="false">\SprayFire\Validation\Result\Result</type>
          </tag>
        </docblock>
        <argument line="104">
          <name>$Result</name>
          <default/>
          <type>\SprayFire\Validation\Result\Result</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="SprayFire\Validation\Result\FireResult" line="123" package="SprayFire\Validation\FireValidation\FireResult">
        <name>count</name>
        <full_name>count</full_name>
        <docblock line="113">
          <description>The optional parameter will cause this method to return different value based
on whether you are counting all, successful or failed results.</description>
          <long-description>&lt;p&gt;Will trigger an error if an invalid parameter is passed and will return
-1 count.&lt;/p&gt;</long-description>
          <tag line="113" name="param" description="" type="string" variable="$resultType">
            <type by_reference="false">string</type>
          </tag>
          <tag line="113" name="return" description="" type="integer">
            <type by_reference="false">integer</type>
          </tag>
        </docblock>
        <argument line="123">
          <name>$resultType</name>
          <default>\SprayFire\Validation\Result\Set::ALL_RESULTS</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="SprayFire\Validation\Result\FireResult" line="140" package="SprayFire\Validation\FireValidation\FireResult">
        <name>getSuccessfulResults</name>
        <full_name>getSuccessfulResults</full_name>
        <docblock line="135">
          <description>Returns a multidimensional array with Result field names as key.</description>
          <long-description/>
          <tag line="135" name="return" description="" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="SprayFire\Validation\Result\FireResult" line="149" package="SprayFire\Validation\FireValidation\FireResult">
        <name>getFailedResults</name>
        <full_name>getFailedResults</full_name>
        <docblock line="144">
          <description>Returns a multidimensional array with Result field names as key.</description>
          <long-description/>
          <tag line="144" name="return" description="" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="SprayFire\Validation\Result\FireResult" line="156" package="SprayFire\Validation\FireValidation\FireResult">
        <name>hasFailedResults</name>
        <full_name>hasFailedResults</full_name>
        <docblock line="153">
          <description/>
          <long-description/>
          <tag line="153" name="return" description="" type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="SprayFire\Validation\Result\FireResult" line="164" package="SprayFire\Validation\FireValidation\FireResult">
        <name>getSuccessfulResultsByFieldName</name>
        <full_name>getSuccessfulResultsByFieldName</full_name>
        <docblock line="160">
          <description/>
          <long-description/>
          <tag line="160" name="param" description="" type="string" variable="$field">
            <type by_reference="false">string</type>
          </tag>
          <tag line="160" name="return" description="" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
        <argument line="164">
          <name>$field</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="SprayFire\Validation\Result\FireResult" line="175" package="SprayFire\Validation\FireValidation\FireResult">
        <name>getFailedResultsByFieldName</name>
        <full_name>getFailedResultsByFieldName</full_name>
        <docblock line="171">
          <description/>
          <long-description/>
          <tag line="171" name="param" description="" type="string" variable="$field">
            <type by_reference="false">string</type>
          </tag>
          <tag line="171" name="return" description="" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
        <argument line="175">
          <name>$field</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="SprayFire\Validation\Result\FireResult" line="193" package="SprayFire\Validation\FireValidation\FireResult">
        <name>getResultsByFieldName</name>
        <full_name>getResultsByFieldName</full_name>
        <docblock line="182">
          <description>Will always return an array of results, based on whether you want All,
Successful or Failed results.</description>
          <long-description>&lt;p&gt;If an invalid value is given to $resultType an error will be triggered and
an empty array will be returned.&lt;/p&gt;</long-description>
          <tag line="182" name="param" description="" type="string" variable="$field">
            <type by_reference="false">string</type>
          </tag>
          <tag line="182" name="param" description="" type="string" variable="$resultType">
            <type by_reference="false">string</type>
          </tag>
          <tag line="182" name="return" description="" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
        <argument line="193">
          <name>$field</name>
          <default/>
          <type/>
        </argument>
        <argument line="193">
          <name>$resultType</name>
          <default>\SprayFire\Validation\Result\Set::ALL_RESULTS</default>
          <type/>
        </argument>
      </method>
    </class>
    <parse_markers>
      <critical line="18" code="50005">No short description for class \SprayFire\Validation\Result\FireResult\Set</critical>
      <error line="89" code="50012">No short description for method addSuccessfulResult()</error>
      <error line="101" code="50012">No short description for method addFailedResult()</error>
      <error line="153" code="50012">No short description for method hasFailedResults()</error>
      <error line="160" code="50012">No short description for method getSuccessfulResultsByFieldName()</error>
      <error line="171" code="50012">No short description for method getFailedResultsByFieldName()</error>
    </parse_markers>
  </file>
  <file path="Validation/Result/Result.php" hash="780baa3542e6b0ab09a42476cf0cbcbc" package="Default">
    <docblock line="3">
      <description/>
      <long-description/>
      <tag line="3" name="author" description="Charles Sprayberry"/>
      <tag line="3" name="license" description="Subject to the terms of the LICENSE file in the project root"/>
      <tag line="3" name="version" description="0.1"/>
      <tag line="3" name="since" description="0.1"/>
    </docblock>
    <interface namespace="SprayFire\Validation\Result" line="21" package="SprayFire\Validation\Result">
      <name>Result</name>
      <full_name>\SprayFire\Validation\Result\Result</full_name>
      <extends>\SprayFire\Object</extends>
      <docblock line="15">
        <description/>
        <long-description/>
        <tag line="15" name="package" description="SprayFire"/>
        <tag line="15" name="subpackage" description="Validation.Result"/>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="SprayFire\Validation\Result" line="26" package="SprayFire\Validation\Result">
        <name>passedCheck</name>
        <full_name>passedCheck</full_name>
        <docblock line="23">
          <description/>
          <long-description/>
          <tag line="23" name="return" description="" type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="SprayFire\Validation\Result" line="31" package="SprayFire\Validation\Result">
        <name>getFieldName</name>
        <full_name>getFieldName</full_name>
        <docblock line="28">
          <description/>
          <long-description/>
          <tag line="28" name="return" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="SprayFire\Validation\Result" line="36" package="SprayFire\Validation\Result">
        <name>getFieldValue</name>
        <full_name>getFieldValue</full_name>
        <docblock line="33">
          <description/>
          <long-description/>
          <tag line="33" name="return" description="" type="mixed">
            <type by_reference="false">mixed</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="SprayFire\Validation\Result" line="41" package="SprayFire\Validation\Result">
        <name>getLogMessage</name>
        <full_name>getLogMessage</full_name>
        <docblock line="38">
          <description/>
          <long-description/>
          <tag line="38" name="return" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="SprayFire\Validation\Result" line="46" package="SprayFire\Validation\Result">
        <name>getDisplayMessage</name>
        <full_name>getDisplayMessage</full_name>
        <docblock line="43">
          <description/>
          <long-description/>
          <tag line="43" name="return" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="SprayFire\Validation\Result" line="51" package="SprayFire\Validation\Result">
        <name>getCheckName</name>
        <full_name>getCheckName</full_name>
        <docblock line="48">
          <description/>
          <long-description/>
          <tag line="48" name="return" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </method>
    </interface>
    <parse_markers>
      <critical line="3" code="50008">No short description for file Validation/Result/Result.php</critical>
      <error line="23" code="50012">No short description for method passedCheck()</error>
      <error line="28" code="50012">No short description for method getFieldName()</error>
      <error line="33" code="50012">No short description for method getFieldValue()</error>
      <error line="38" code="50012">No short description for method getLogMessage()</error>
      <error line="43" code="50012">No short description for method getDisplayMessage()</error>
      <error line="48" code="50012">No short description for method getCheckName()</error>
    </parse_markers>
  </file>
  <file path="Validation/Result/Set.php" hash="54048b4c44b89c6bf001e610af9d81a5" package="Default">
    <docblock line="3">
      <description>Interface that holds a set of results from a call to \SprayFire\Validation\Validator::validate</description>
      <long-description/>
      <tag line="3" name="author" description="Charles Sprayberry"/>
      <tag line="3" name="license" description="Subject to the terms of the LICENSE file in the project root"/>
      <tag line="3" name="version" description="0.1"/>
      <tag line="3" name="since" description="0.1"/>
    </docblock>
    <interface namespace="SprayFire\Validation\Result" line="22" package="SprayFire\Validation\Result">
      <name>Set</name>
      <full_name>\SprayFire\Validation\Result\Set</full_name>
      <extends>\SprayFire\Object</extends>
      <docblock line="16">
        <description/>
        <long-description/>
        <tag line="16" name="package" description="SprayFire"/>
        <tag line="16" name="subpackage" description="Validation.Result"/>
      </docblock>
      <constant namespace="SprayFire\Validation\Result" line="24" package="SprayFire\Validation\Result">
        <name>ALL_RESULTS</name>
        <full_name>ALL_RESULTS</full_name>
        <value>'all'</value>
      </constant>
      <constant namespace="SprayFire\Validation\Result" line="26" package="SprayFire\Validation\Result">
        <name>SUCCESSFUL_RESULTS</name>
        <full_name>SUCCESSFUL_RESULTS</full_name>
        <value>'successful'</value>
      </constant>
      <constant namespace="SprayFire\Validation\Result" line="28" package="SprayFire\Validation\Result">
        <name>FAILURE_RESULTS</name>
        <full_name>FAILURE_RESULTS</full_name>
        <value>'failure'</value>
      </constant>
      <method final="false" abstract="false" static="false" visibility="public" namespace="SprayFire\Validation\Result" line="33" package="SprayFire\Validation\Result">
        <name>addResult</name>
        <full_name>addResult</full_name>
        <docblock line="30">
          <description/>
          <long-description/>
          <tag line="30" name="param" description="" type="\SprayFire\Validation\Result\Result" variable="$Result">
            <type by_reference="false">\SprayFire\Validation\Result\Result</type>
          </tag>
        </docblock>
        <argument line="33">
          <name>$Result</name>
          <default/>
          <type>\SprayFire\Validation\Result\Result</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="SprayFire\Validation\Result" line="40" package="SprayFire\Validation\Result">
        <name>getResultsByFieldName</name>
        <full_name>getResultsByFieldName</full_name>
        <docblock line="35">
          <description/>
          <long-description/>
          <tag line="35" name="param" description="" type="string" variable="$field">
            <type by_reference="false">string</type>
          </tag>
          <tag line="35" name="param" description="" type="string" variable="$resultType">
            <type by_reference="false">string</type>
          </tag>
          <tag line="35" name="return" description="" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
        <argument line="40">
          <name>$field</name>
          <default/>
          <type/>
        </argument>
        <argument line="40">
          <name>$resultType</name>
          <default>\SprayFire\Validation\Result\Set::ALL_RESULTS</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="SprayFire\Validation\Result" line="45" package="SprayFire\Validation\Result">
        <name>getSuccessfulResults</name>
        <full_name>getSuccessfulResults</full_name>
        <docblock line="42">
          <description/>
          <long-description/>
          <tag line="42" name="return" description="" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="SprayFire\Validation\Result" line="50" package="SprayFire\Validation\Result">
        <name>getFailedResults</name>
        <full_name>getFailedResults</full_name>
        <docblock line="47">
          <description/>
          <long-description/>
          <tag line="47" name="return" description="" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="SprayFire\Validation\Result" line="55" package="SprayFire\Validation\Result">
        <name>hasFailedResults</name>
        <full_name>hasFailedResults</full_name>
        <docblock line="52">
          <description/>
          <long-description/>
          <tag line="52" name="return" description="" type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="SprayFire\Validation\Result" line="61" package="SprayFire\Validation\Result">
        <name>count</name>
        <full_name>count</full_name>
        <docblock line="57">
          <description/>
          <long-description/>
          <tag line="57" name="param" description="" type="string" variable="$resultType">
            <type by_reference="false">string</type>
          </tag>
          <tag line="57" name="return" description="" type="int">
            <type by_reference="false">int</type>
          </tag>
        </docblock>
        <argument line="61">
          <name>$resultType</name>
          <default>\SprayFire\Validation\Result\Set::ALL_RESULTS</default>
          <type/>
        </argument>
      </method>
    </interface>
    <parse_markers>
      <error line="30" code="50012">No short description for method addResult()</error>
      <error line="35" code="50012">No short description for method getResultsByFieldName()</error>
      <error line="42" code="50012">No short description for method getSuccessfulResults()</error>
      <error line="47" code="50012">No short description for method getFailedResults()</error>
      <error line="52" code="50012">No short description for method hasFailedResults()</error>
      <error line="57" code="50012">No short description for method count()</error>
    </parse_markers>
  </file>
  <file path="Validation/Rules.php" hash="846684e7e46d1de861b009696b99a9ba" package="Default">
    <docblock line="3">
      <description>Interface to determine how a set of data should be validated</description>
      <long-description/>
      <tag line="3" name="author" description="Charles Sprayberry"/>
      <tag line="3" name="license" description="Subject to the terms of the LICENSE file in the project root"/>
      <tag line="3" name="version" description="0.1"/>
      <tag line="3" name="since" description="0.1"/>
    </docblock>
    <interface namespace="SprayFire\Validation" line="21" package="SprayFire\Validation">
      <name>Rules</name>
      <full_name>\SprayFire\Validation\Rules</full_name>
      <extends>\SprayFire\Object</extends>
      <docblock line="17">
        <description/>
        <long-description/>
        <tag line="17" name="package" description="SprayFire"/>
        <tag line="17" name="subpackage" description="Validation"/>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="SprayFire\Validation" line="34" package="SprayFire\Validation">
        <name>addCheck</name>
        <full_name>addCheck</full_name>
        <docblock line="23">
          <description>Adds a $Check to the end of the chain for a given $field, if $breakOnFailure
is true if the given $Check does not pass the $field value the chain will
stop with this check.</description>
          <long-description>&lt;p&gt;$Check should be ran in the order they are added to the Rules&lt;/p&gt;</long-description>
          <tag line="23" name="param" description="" type="string" variable="$field">
            <type by_reference="false">string</type>
          </tag>
          <tag line="23" name="param" description="" type="\SprayFire\Validation\Check\Check" variable="$Check">
            <type by_reference="false">\SprayFire\Validation\Check\Check</type>
          </tag>
          <tag line="23" name="param" description="" type="boolean" variable="$breakOnFailure">
            <type by_reference="false">boolean</type>
          </tag>
        </docblock>
        <argument line="34">
          <name>$field</name>
          <default/>
          <type/>
        </argument>
        <argument line="34">
          <name>$Check</name>
          <default/>
          <type>\SprayFire\Validation\Check\Check</type>
        </argument>
        <argument line="34">
          <name>$breakOnFailure</name>
          <default>false</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="SprayFire\Validation" line="43" package="SprayFire\Validation">
        <name>getChecks</name>
        <full_name>getChecks</full_name>
        <docblock line="36">
          <description>Return a Traversable structure that communicates what order of $Checks to
run and whether a $Check should break on failure.</description>
          <long-description/>
          <tag line="36" name="param" description="" type="string" variable="$field">
            <type by_reference="false">string</type>
          </tag>
          <tag line="36" name="return" description="" type="\SprayFire\Validation\Traversable">
            <type by_reference="false">\SprayFire\Validation\Traversable</type>
          </tag>
        </docblock>
        <argument line="43">
          <name>$field</name>
          <default/>
          <type/>
        </argument>
      </method>
    </interface>
  </file>
  <file path="Validation/Validator.php" hash="60c88e0ef21e1f4a56f9d3e969decee3" package="Default">
    <docblock line="3">
      <description>Interface to allow a set of data to have its field value's validated against
a SprayFire.Validation.Rules implementation.</description>
      <long-description/>
      <tag line="3" name="author" description="Charles Sprayberry"/>
      <tag line="3" name="license" description="Subject to the terms of the LICENSE file in the project root"/>
      <tag line="3" name="version" description="0.1"/>
      <tag line="3" name="since" description="0.1"/>
    </docblock>
    <interface namespace="SprayFire\Validation" line="21" package="SprayFire\Validation">
      <name>Validator</name>
      <full_name>\SprayFire\Validation\Validator</full_name>
      <extends>\SprayFire\Object</extends>
      <docblock line="17">
        <description/>
        <long-description/>
        <tag line="17" name="package" description="SprayFire"/>
        <tag line="17" name="subpackage" description="Validation"/>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="SprayFire\Validation" line="34" package="SprayFire\Validation">
        <name>validate</name>
        <full_name>validate</full_name>
        <docblock line="23">
          <description>The $data parameter should be of format ['field' =&gt; 'value'], each field
in the data set will be checked against the $Rules passed.</description>
          <long-description>&lt;p&gt;A SprayFire.Validation.Result.Set should always be returned regardless
of whether all fields passed the rules or not.&lt;/p&gt;</long-description>
          <tag line="23" name="param" description="" type="array" variable="$data">
            <type by_reference="false">array</type>
          </tag>
          <tag line="23" name="param" description="" type="\SprayFire\Validation\Rules" variable="$Rules">
            <type by_reference="false">\SprayFire\Validation\Rules</type>
          </tag>
          <tag line="23" name="return" description="" type="\SprayFire\Validation\Result\Set">
            <type by_reference="false">\SprayFire\Validation\Result\Set</type>
          </tag>
        </docblock>
        <argument line="34">
          <name>$data</name>
          <default/>
          <type>array</type>
        </argument>
        <argument line="34">
          <name>$Rules</name>
          <default/>
          <type>\SprayFire\Validation\Rules</type>
        </argument>
      </method>
    </interface>
  </file>
  <file path="ValueObject.php" hash="fdf34272f75665e4868772bab0801f3a" package="Default">
    <docblock line="3">
      <description>A base abstract class implementing functionality for a Value Object</description>
      <long-description/>
      <tag line="3" name="author" description="Charles Sprayberry"/>
      <tag line="3" name="license" description="Subject to the terms of the LICENSE file in the project root"/>
      <tag line="3" name="version" description="0.1"/>
      <tag line="3" name="since" description="0.1"/>
    </docblock>
    <class final="false" abstract="true" namespace="SprayFire" line="19" package="SprayFire">
      <extends>\SprayFire\CoreObject</extends>
      <name>ValueObject</name>
      <full_name>\SprayFire\ValueObject</full_name>
      <docblock line="16">
        <description/>
        <long-description/>
        <tag line="16" name="package" description="SprayFire"/>
      </docblock>
      <property final="false" static="false" visibility="private" line="27" namespace="SprayFire" package="Default">
        <name>$accessibleProperties</name>
        <default/>
        <docblock line="21">
          <description>An associative array holding the property as the key and the data type for
that property as the value.</description>
          <long-description/>
          <tag line="21" name="property" description="" type="array" variable="">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="private" line="29" namespace="SprayFire" package="Default">
        <name>$errorMessage</name>
        <default>'You may not change property values of %s, it is immutable.'</default>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="SprayFire" line="37" package="SprayFire">
        <name>__construct</name>
        <full_name>__construct</full_name>
        <docblock line="31">
          <description>Accepts an associative array with the property as the key and the value for
that property as the value.</description>
          <long-description/>
          <tag line="31" name="param" description="" type="array" variable="$data">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
        <argument line="37">
          <name>$data</name>
          <default/>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="SprayFire" line="54" package="SprayFire">
        <name>__get</name>
        <full_name>__get</full_name>
        <docblock line="47">
          <description>If the requested $property is accessible the value for that property will
be returned, otherwise null will be returned.</description>
          <long-description/>
          <tag line="47" name="param" description="" type="string" variable="$property">
            <type by_reference="false">string</type>
          </tag>
          <tag line="47" name="return" description="" type="mixed">
            <type by_reference="false">mixed</type>
          </tag>
        </docblock>
        <argument line="54">
          <name>$property</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="SprayFire" line="65" package="SprayFire">
        <name>__isset</name>
        <full_name>__isset</full_name>
        <docblock line="61">
          <description/>
          <long-description/>
          <tag line="61" name="param" description="" type="string" variable="$property">
            <type by_reference="false">string</type>
          </tag>
          <tag line="61" name="return" description="" type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
        </docblock>
        <argument line="65">
          <name>$property</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="true" abstract="false" static="false" visibility="public" namespace="SprayFire" line="77" package="SprayFire">
        <name>__set</name>
        <full_name>__set</full_name>
        <docblock line="72">
          <description/>
          <long-description/>
          <tag line="72" name="param" description="" type="string" variable="$property">
            <type by_reference="false">string</type>
          </tag>
          <tag line="72" name="param" description="" type="mixed" variable="$value">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="72" name="throws" description="" type="\SprayFire\Exception\UnsupportedOperationException">
            <type by_reference="false">\SprayFire\Exception\UnsupportedOperationException</type>
          </tag>
        </docblock>
        <argument line="77">
          <name>$property</name>
          <default/>
          <type/>
        </argument>
        <argument line="77">
          <name>$value</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="true" abstract="false" static="false" visibility="public" namespace="SprayFire" line="86" package="SprayFire">
        <name>__unset</name>
        <full_name>__unset</full_name>
        <docblock line="82">
          <description/>
          <long-description/>
          <tag line="82" name="param" description="" type="string" variable="$property">
            <type by_reference="false">string</type>
          </tag>
          <tag line="82" name="throws" description="" type="\SprayFire\Exception\UnsupportedOperationException">
            <type by_reference="false">\SprayFire\Exception\UnsupportedOperationException</type>
          </tag>
        </docblock>
        <argument line="86">
          <name>$property</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="SprayFire" line="98" package="SprayFire">
        <name>equals</name>
        <full_name>equals</full_name>
        <docblock line="91">
          <description>Overridden to ensure that ValueObject equality is based on the values stored
by each object.</description>
          <long-description/>
          <tag line="91" name="param" description="" type="\SprayFire\Object" variable="$Object">
            <type by_reference="false">\SprayFire\Object</type>
          </tag>
          <tag line="91" name="return" description="" type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
        </docblock>
        <argument line="98">
          <name>$Object</name>
          <default/>
          <type>\SprayFire\Object</type>
        </argument>
      </method>
      <method final="false" abstract="true" static="false" visibility="public" namespace="SprayFire" line="112" package="SprayFire">
        <name>toArray</name>
        <full_name>toArray</full_name>
        <docblock line="107">
          <description>Return an array representation of the Value Object</description>
          <long-description/>
          <tag line="107" name="return" description="" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="true" static="false" visibility="protected" namespace="SprayFire" line="121" package="SprayFire">
        <name>getAccessibleProperties</name>
        <full_name>getAccessibleProperties</full_name>
        <docblock line="114">
          <description>Return an associative array with the key matching to an explicitly declared
class property and the value of that key being the data type that the value
should be.</description>
          <long-description/>
          <tag line="114" name="return" description="" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </method>
    </class>
    <parse_markers>
      <critical line="16" code="50005">No short description for class \SprayFire\ValueObject</critical>
      <error line="29" code="50018">No DocBlock was found for property $errorMessage</error>
      <error line="61" code="50012">No short description for method __isset()</error>
      <error line="72" code="50012">No short description for method __set()</error>
      <error line="82" code="50012">No short description for method __unset()</error>
    </parse_markers>
  </file>
  <package name="Default" full_name="Default"/>
  <package name="SprayFire" full_name="SprayFire">
    <package name="Bootstrap" full_name="SprayFire\Bootstrap">
      <package name="FireBootstrap" full_name="SprayFire\Bootstrap\FireBootstrap"/>
    </package>
    <package name="Controller" full_name="SprayFire\Controller">
      <package name="FireController" full_name="SprayFire\Controller\FireController"/>
    </package>
    <package name="Dispatcher" full_name="SprayFire\Dispatcher">
      <package name="Exception" full_name="SprayFire\Dispatcher\Exception"/>
      <package name="FireDispatcher" full_name="SprayFire\Dispatcher\FireDispatcher"/>
    </package>
    <package name="Exception" full_name="SprayFire\Exception"/>
    <package name="Factory" full_name="SprayFire\Factory">
      <package name="Exception" full_name="SprayFire\Factory\Exception"/>
      <package name="FireFactory" full_name="SprayFire\Factory\FireFactory"/>
    </package>
    <package name="FileSys" full_name="SprayFire\FileSys">
      <package name="FireFileSys" full_name="SprayFire\FileSys\FireFileSys"/>
    </package>
    <package name="Http" full_name="SprayFire\Http">
      <package name="FireHttp" full_name="SprayFire\Http\FireHttp"/>
      <package name="Routing" full_name="SprayFire\Http\Routing">
        <package name="Exception" full_name="SprayFire\Http\Routing\Exception"/>
        <package name="FireRouting" full_name="SprayFire\Http\Routing\FireRouting"/>
      </package>
    </package>
    <package name="Logging" full_name="SprayFire\Logging">
      <package name="Exception" full_name="SprayFire\Logging\Exception"/>
      <package name="FireLogging" full_name="SprayFire\Logging\FireLogging"/>
    </package>
    <package name="Mediator" full_name="SprayFire\Mediator">
      <package name="Exception" full_name="SprayFire\Mediator\Exception"/>
      <package name="FireMediator" full_name="SprayFire\Mediator\FireMediator"/>
    </package>
    <package name="Responder" full_name="SprayFire\Responder">
      <package name="FireResponder" full_name="SprayFire\Responder\FireResponder">
        <package name="FireTemplate" full_name="SprayFire\Responder\FireResponder\FireTemplate"/>
      </package>
      <package name="Template" full_name="SprayFire\Responder\Template"/>
    </package>
    <package name="Service" full_name="SprayFire\Service">
      <package name="Exception" full_name="SprayFire\Service\Exception"/>
      <package name="FireService" full_name="SprayFire\Service\FireService"/>
    </package>
    <package name="Utils" full_name="SprayFire\Utils"/>
    <package name="Validaiton" full_name="SprayFire\Validaiton">
      <package name="FireValidation" full_name="SprayFire\Validaiton\FireValidation"/>
    </package>
    <package name="Validation" full_name="SprayFire\Validation">
      <package name="Check" full_name="SprayFire\Validation\Check">
        <package name="FireCheck" full_name="SprayFire\Validation\Check\FireCheck"/>
      </package>
      <package name="Exception" full_name="SprayFire\Validation\Exception"/>
      <package name="FireValidation" full_name="SprayFire\Validation\FireValidation">
        <package name="FireResult" full_name="SprayFire\Validation\FireValidation\FireResult"/>
      </package>
      <package name="Result" full_name="SprayFire\Validation\Result">
        <package name="FireResult" full_name="SprayFire\Validation\Result\FireResult"/>
      </package>
    </package>
    <package name="`" full_name="SprayFire\`"/>
    <package name="`Responder" full_name="SprayFire\`Responder">
      <package name="FireResponder" full_name="SprayFire\`Responder\FireResponder">
        <package name="FireTemplate" full_name="SprayFire\`Responder\FireResponder\FireTemplate"/>
      </package>
      <package name="Template" full_name="SprayFire\`Responder\Template">
        <package name="Exception" full_name="SprayFire\`Responder\Template\Exception"/>
      </package>
    </package>
    <package name="`Service" full_name="SprayFire\`Service">
      <package name="Exception" full_name="SprayFire\`Service\Exception"/>
    </package>
  </package>
  <namespace name="SprayFire" full_name="SprayFire">
    <namespace name="Bootstrap" full_name="SprayFire\Bootstrap">
      <namespace name="FireBootstrap" full_name="SprayFire\Bootstrap\FireBootstrap"/>
    </namespace>
    <namespace name="Controller" full_name="SprayFire\Controller">
      <namespace name="FireController" full_name="SprayFire\Controller\FireController"/>
    </namespace>
    <namespace name="Dispatcher" full_name="SprayFire\Dispatcher">
      <namespace name="Exception" full_name="SprayFire\Dispatcher\Exception"/>
      <namespace name="FireDispatcher" full_name="SprayFire\Dispatcher\FireDispatcher"/>
    </namespace>
    <namespace name="Exception" full_name="SprayFire\Exception"/>
    <namespace name="Factory" full_name="SprayFire\Factory">
      <namespace name="Exception" full_name="SprayFire\Factory\Exception"/>
      <namespace name="FireFactory" full_name="SprayFire\Factory\FireFactory"/>
    </namespace>
    <namespace name="FileSys" full_name="SprayFire\FileSys">
      <namespace name="FireFileSys" full_name="SprayFire\FileSys\FireFileSys"/>
    </namespace>
    <namespace name="Http" full_name="SprayFire\Http">
      <namespace name="FireHttp" full_name="SprayFire\Http\FireHttp"/>
      <namespace name="Routing" full_name="SprayFire\Http\Routing">
        <namespace name="Exception" full_name="SprayFire\Http\Routing\Exception"/>
        <namespace name="FireRouting" full_name="SprayFire\Http\Routing\FireRouting"/>
      </namespace>
    </namespace>
    <namespace name="Logging" full_name="SprayFire\Logging">
      <namespace name="Exception" full_name="SprayFire\Logging\Exception"/>
      <namespace name="FireLogging" full_name="SprayFire\Logging\FireLogging"/>
    </namespace>
    <namespace name="Mediator" full_name="SprayFire\Mediator">
      <namespace name="Exception" full_name="SprayFire\Mediator\Exception"/>
      <namespace name="FireMediator" full_name="SprayFire\Mediator\FireMediator"/>
    </namespace>
    <namespace name="Responder" full_name="SprayFire\Responder">
      <namespace name="FireResponder" full_name="SprayFire\Responder\FireResponder"/>
      <namespace name="Template" full_name="SprayFire\Responder\Template">
        <namespace name="Exception" full_name="SprayFire\Responder\Template\Exception"/>
        <namespace name="FireTemplate" full_name="SprayFire\Responder\Template\FireTemplate"/>
      </namespace>
    </namespace>
    <namespace name="Service" full_name="SprayFire\Service">
      <namespace name="Exception" full_name="SprayFire\Service\Exception"/>
      <namespace name="FireService" full_name="SprayFire\Service\FireService"/>
    </namespace>
    <namespace name="Utils" full_name="SprayFire\Utils"/>
    <namespace name="Validation" full_name="SprayFire\Validation">
      <namespace name="Check" full_name="SprayFire\Validation\Check">
        <namespace name="FireCheck" full_name="SprayFire\Validation\Check\FireCheck"/>
      </namespace>
      <namespace name="Exception" full_name="SprayFire\Validation\Exception"/>
      <namespace name="FireValidation" full_name="SprayFire\Validation\FireValidation"/>
      <namespace name="Result" full_name="SprayFire\Validation\Result">
        <namespace name="FireResult" full_name="SprayFire\Validation\Result\FireResult"/>
      </namespace>
    </namespace>
  </namespace>
  <marker count="6">todo</marker>
  <marker count="0">fixme</marker>
  <deprecated count="1"/>
</project>
